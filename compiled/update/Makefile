#
# BEGIN SONGBIRD GPL
#
# This file is part of the Songbird web player.
#
# Copyright(c) 2005-2008 POTI, Inc.
# http://www.songbirdnest.com
#
# This file may be licensed under the terms of of the
# GNU General Public License Version 2 (the “GPL”).
#
# Software distributed under the License is distributed
# on an “AS IS” basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the GPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the GPL along with this
# program. If not, go to http://www.gnu.org/licenses/gpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# END SONGBIRD GPL
#

DEPTH = ..
topsrcdir = /media/disk/Linux/makepkg/songbird
srcdir = /media/disk/Linux/makepkg/songbird/update
VPATH = /media/disk/Linux/makepkg/songbird/update

include $(DEPTH)/build/autodefs.mk

SUBDIRS = test

#
# These scripts have problems with absolute paths, so use $(DEPTH) instead
#

ifndef STAGE_DIR
   STAGE_DIR = $(DEPTH)/_built_installer
endif

SERVER_BASE = http://download.songbirdnest.com/songbird/$(SB_UPDATE_CHANNEL)
SERVER_PATH = $(SERVER_BASE)/$(SB_PLATFORM)-$(SB_ARCH)/$(SB_BRANCHNAME)

UPDATE_FILENAME_BASE = $(SB_APPNAME)_$(SB_MILESTONE)-$(SB_BUILD_NUMBER)_$(SB_PLATFORM)-$(SB_ARCH)$(DEBUG:%=.debug)

#
# On OS X we need to diff from the 'Songbird.app' subdir.
#
ifeq (macosx,$(SB_PLATFORM))
   UPD_TARGET_DIR = $(SONGBIRD_OBJDIR)/$(DISTDIRNAME)/$(MACOSX_APPBUNDLE)
endif
ifeq (windows,$(SB_PLATFORM))
   # windows needs relative paths, all others need the full path
   UPD_TARGET_DIR = $(DEPTH)/$(DISTDIRNAME)
endif
ifeq (linux,$(SB_PLATFORM))
   UPD_TARGET_DIR = $(SONGBIRD_OBJDIR)/$(DISTDIRNAME)
endif

#
# Settings for the removed-files operation
#
REMOVED_FILES = files-removed-from-$(SB_PLATFORM).in
REMOVED_FILES_GEN = $(UPD_TARGET_DIR)/removed-files

# MUST specify a target, no default rule
default:: complete partial

complete:: complete-patch complete-snippet dump-build-id

partial:: partial-patch partial-snippet dump-build-id

dump-build-id::
	@echo "$(SB_MILESTONE) $(SB_PLATFORM)-$(SB_ARCH) $(SB_BUILD_ID)" \
    > $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).buildID.txt \
    $(NULL)

complete-patch:: removed-files
	@$(MKDIR) $(STAGE_DIR)
	MAR=$(MAR) \
    $(MOZSDK_SCRIPTS_DIR)/make_full_update.sh \
    "$(STAGE_DIR)/$(UPDATE_FILENAME_BASE).complete.mar" \
    "$(UPD_TARGET_DIR)"
	$(RM) -f $(REMOVED_FILES_GEN)

complete-snippet::
	@$(MKDIR) $(STAGE_DIR)
	SHA1SUM=$(SHA1SUM) $(PERL) $(SCRIPTS_DIR)/generate-update-snippet.pl \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).complete.mar \
    "complete" \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).complete.snippet \
    "$(SERVER_PATH)/$(UPDATE_FILENAME_BASE).complete.mar" \
    $(SB_BUILD_ID) \
    $(SB_MILESTONE) \
    "sha1" \
    $(NULL)

#
# To generate partials you need to set the following variables:
#
# SRC_BUILD:    the mar or directory containing the unpacked pre-update build
# Our partials are now generated by patcher2.pl during the release cycle. This
#   code is no longer relevant, although it has been updated to the new format
#   for naming our mars (no more build_id in the name or path)
#
# The Destination mar is now considered to be the mar generated by the last
#   build process and dumped into the staging dir. Milestone and build id are
#   pulled from the build config (SB_*)
#
#

ifeq (.mar,$(suffix $(SRC_BUILD)))
   PARTIAL_PATCH_TASK = partial-patch-unwrap
else
   PARTIAL_PATCH_TASK = partial-patch-no-unwrap
endif

partial-patch:: $(PARTIAL_PATCH_TASK)

partial-patch-unwrap::
	@$(MKDIR) $(STAGE_DIR)/from
	cd $(STAGE_DIR)/from && MAR=$(MAR) $(MOZSDK_SCRIPTS_DIR)/unwrap_full_update.pl "../$(SRC_BUILD)"
	@$(MKDIR) $(STAGE_DIR)/to
	cd $(STAGE_DIR)/to && MAR=$(MAR) $(MOZSDK_SCRIPTS_DIR)/unwrap_full_update.sh "../$(UPDATE_FILENAME_BASE).complete.mar"
	MAR=$(MAR) MBSDIFF=$(MBSDIFF) \
    $(MOZSDK_SCRIPTS_DIR)/make_incremental_update.sh \
    "$(STAGE_DIR)/$(UPDATE_FILENAME_BASE).partial.mar" \
    "$(STAGE_DIR)/from" \
    "$(STAGE_DIR)/to" \
    $(NULL)
	@$(RM) -rf $(STAGE_DIR)/from
	@$(RM) -rf $(STAGE_DIR)/to

partial-patch-no-unwrap::
	@$(MKDIR) $(STAGE_DIR)
	MAR=$(MAR) MBSDIFF=$(MBSDIFF) \
    $(MOZSDK_SCRIPTS_DIR)/make_incremental_update.sh \
    "$(STAGE_DIR)/$(UPDATE_FILENAME_BASE).partial.mar" \
    "$(SRC_BUILD)" \
    "$(UPDATE_FILENAME_BASE).complete.mar"

partial-snippet::
	@$(MKDIR) $(STAGE_DIR)
	SHA1SUM=$(SHA1SUM) $(PERL) $(SCRIPTS_DIR)/generate-update-snippet.pl \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).partial.mar \
    "partial" \
    $(STAGE_DIR)/$(UPDATE_FILENAME_BASE).partial.snippet \
    "$(SERVER_PATH)/$(UPDATE_FILENAME_BASE).partial.mar" \
    $(SB_BUILD_ID) \
    $(SB_MILESTONE) \
    "sha1" \
    $(NULL)

removed-files::
	$(RM) -f $(UPD_TARGET_DIR)/removed-files
	$(PERL) $(MOZSDK_SCRIPTS_DIR)/preprocessor.pl $(ACDEFINES) \
    $(PPDEFINES) -- $(srcdir)/$(REMOVED_FILES) > ./removed-files
	$(INSTALL_FILE) ./removed-files $(REMOVED_FILES_GEN)

include $(topsrcdir)/build/rules.mk
