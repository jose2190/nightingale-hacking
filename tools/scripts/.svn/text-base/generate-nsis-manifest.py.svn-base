#!/usr/bin/env python

import os
import sys

from optparse import OptionParser

def WriteInstallManifest(dirs=[], files=[]):
   print "; -- Begin autogenerated INSTALL manifest --"

   print ""
   for f in sorted(files):
      print "File %s" % (f)

   print ""
   for d in sorted(dirs):
      print "File /r %s" % (d)

   print ""
   print "; -- End autogenerated INSTALL manifest --"
   print ""

# The uninstaller manifest writes the directories out first to "unwind"
# what the installer manifest does, which is to write the files first

def WriteUninstallManifest(dirs=[], files=[]):

   print "; -- Begin autogenerated UNINSTALL manifest --"
   print ""

   reverseSortedDirs = sorted(dirs)
   reverseSortedDirs.reverse()

   for d in reverseSortedDirs:
      print "RMDir /r $INSTDIR\%s" % (d)

   print ""
   for f in sorted(files):
      print "Delete $INSTDIR\%s" % (f)

   print ""
   print "; -- End autogenerated UNINSTALL manifest --"
   print ""

def main(argv):
   o = OptionParser()
   o.add_option('-d', '--distdir', dest='distdir', default='.',
                help='Directory to generate a file manifest for; default: .')
   o.add_option('-f', '--force', action='store_true', dest='forceOverwrite', 
                help='If an output file is specified and it exists, '
                'overwrite it')
   o.add_option('-i', '--ignore', dest='ignoreList', action='append',
                default=[],
                help='List of files/directories to ignore in the manifest.')
   o.add_option('-m', '--mode', dest='manifestMode', default=None,
                help="Manifest mode; 'install' or 'uninstall'")
   o.add_option('-o', '--output', dest='output', default=None,
                help='Output file; default: stdout')

   (options, args) = o.parse_args()

   if options.manifestMode is None:
      o.print_help()
      return -1 

   manifestDir = os.path.abspath(options.distdir)

   if not os.path.isdir(manifestDir):
      sys.stderr.write("Specified manifest directory ('%s') does not exist or "
       "is not a directory:\n" % (options.distdir))
      o.print_help()
      return -1 

   if options.output is not None:
      outputFile = options.output

      if os.path.exists(outputFile):
         if (not options.forceOverwrite):
            sys.stderr.write("Requested output file '%s' exists\n" %
             (options.output))
            return -1
         else:
            if not os.path.isfile(outputFile):
               sys.stderr.write("Requested output file '%s' exists, "
                "but isn't a file\n" % (options.output))
               o.print_help()
               return -1 
            os.remove(outputFile)

      sys.stdout = open(outputFile, 'w')

   dirEntries = os.listdir(manifestDir)

   distDirDirectories = []
   distDirFiles = []

   for e in os.listdir(manifestDir):

      ignoreThisEntry = False
      for i in options.ignoreList:
         if e == i:
            ignoreThisEntry = True
            break

      if ignoreThisEntry:
         continue

      fullPath = os.path.join(manifestDir, e)

      if os.path.isdir(fullPath):
         distDirDirectories.append(e)
         continue

      if os.path.isfile(fullPath):
         distDirFiles.append(e)
         continue

      sys.stderr.write("WARNING: unknown entry type in distdir: %s\n" % (e))

   if options.manifestMode == 'install':
      WriteInstallManifest(distDirDirectories, distDirFiles)
   elif options.manifestMode == 'uninstall':
      WriteUninstallManifest(distDirDirectories, distDirFiles)
   else:
      assert (False, "Unknown mode ('%s') post-mode check" %
       (options.manifestMode))

   return 0

if __name__ == '__main__':
   sys.exit(main(sys.argv[1:]))
