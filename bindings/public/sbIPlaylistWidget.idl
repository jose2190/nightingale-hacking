/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbIPlaylistWidget.idl
 * \brief Definition of the sbIPlaylistWidget interface
 * \sa
 */

#include "nsISupports.idl"

interface sbIMediaListView;
interface sbIPlaylistCommands;
interface sbIPropertyInfo;
interface sbIPlaylistClickEvent;

/*
 Class PlaylistWidget
 */
/**
 * \interface sbIPlaylistWidget
 * \brief 
 */
[scriptable, uuid(7660f28b-6b55-40b8-8660-353aad8df5a3)]
interface sbIPlaylistWidget : nsISupports
{
  /**
   * \brief Cause the commands to be re-fetched
   *
   * This will cause the playlist to fetch the list of commands again
   * so that any newly added commands will appear in the UI for the
   * playlist
   *
   * NOTE - Not callable from web pages.
   */
  void rescanCommands();

  /**
   * \brief Get the view being displayed in the <WebPlaylist>
   *
   * NOTE - Not callable from web pages.
   *
   * \returns A medialist view for the currently displayed medialist
   */
  sbIMediaListView getListView();

  /**
   * \brief Attach the <WebPlaylist> to the view passed in.
   *
   * NOTE - Not callable from web pages.
   *
   * \param mediaListView - the ordered, sorted, selected grouping of tracks
   *                        to display in the UI
   * \param commands - the commands to be used
   * \param resize - boolean, if true the playlist will look up the
   *                 resize_height attribute for the size to resize to.
   * \param collapse - apparently no longer used
   */
  void bind( in sbIMediaListView mediaListView,
             in sbIPlaylistCommands commands,
             in boolean resize,
             in boolean collapse );

  /**
   * \brief Get the total number of columns in the web playlist
   * \returns The number of columns in the web playlist
   */
  /*
   Method: getColumnCount()

   Get the total number of columns in the web playlist

   See Also:
    <clearColumns()>
    <insertColumnBefore()>
    <removeColumn()>
  */
  unsigned long getColumnCount();

  /**
   * \brief Clear all columns from the web playlist
   */
  /*
   Method: clearColumns()

   Clear all columns from the web playlist
  */
  void clearColumns( );

  /**
   * \brief Add a column to the right side of visible columns
   *
   * \param aPropertyID - The ID of the property you want to add as a column
   * \param aWidth - The width in pixels of the column. If there has been a
   *                 width set for this particular column then that width
   *                 will be respected and this ignored.
   */
  /*
   Method: appendColumn()

   Arguments:
     aPropertyID - The ID of the property you want to add as a column
     aWidth - The width in pixels of the column. If there has been a
                  width set for this particular column then that width
                  will be respected and this ignored.

   Add a column to the right side of visible columns
  */
  void appendColumn( in AString aPropertyID,
                     [optional] in AString aWidth );

  /**
   * \brief Insert a column into the web playlist
   *
   * \param aPropertyID - The ID of the property you want to add as a column
   * \param aBeforePropertyID - If specified, the new column will appear before
   *        the column that is bound to the specified property.  If not
   *        specified, the column will be added to the end of the list.
   * \param aWidth - The width in pixels of the column. If there has been a
   *                 width set for this particular column then that width
   *                 will be respected and this ignored.
   */
  /*
   Method: insertColumnBefore()

   Insert a column into the web playlist

   Arguments:
     aPropertyID - The ID of the property you want to add as a column
     aBeforePropertyID - If specified, the new column will appear before the
       column that is bound to the specified property.  If not specified, the
       column will be added to the end of the list.
     aWidth - The width in pixels of the column. If there has been a
                  width set for this particular column then that width
                  will be respected and this ignored.
  */
  void insertColumnBefore( in AString aPropertyID,
                           [optional] in AString aBeforePropertyID,
                           [optional] in AString aWidth );

  /**
   * \brief Remove a column from the playlist
   *
   * \param aPropertyID - The ID of the property that is bound to the column
   *        you wish to remove.
   */
  /*
   Method: removeColumn()

   Remove a column from the playlist

   Arguments:
     aPropertyID - The ID of the property that is bound to the column you wish
       to remove.
  */
  void removeColumn( in AString aPropertyID );

  /**
   * \brief Get the property ID bould to a particular column at a given
   *        index
   *
   * \param aIndex - The index of the column from which you want to retrieve
   *        the bound property
   * \returns The ID of the property bound to the specified column
   */
  /*
   Method: getColumnPropertyIDByIndex()

   Get the property ID bould to a particular column at a given index

   Arguments:
     aIndex - The index of the column from which you want to retrieve the bound
       property

   Returns:
     The ID of the property bound to the specified column
  */
  AString getColumnPropertyIDByIndex( in unsigned long aIndex );

  /**
   * \brief Set the sort of the web playlist
   *
   * \param aPropertyID - The ID of the property that is bound to the column
   *        you wish to sort.
   * \param aIsAscending - True if the sort should be ascending, false if the
   *        sort should be descending.
   */
  /*
   Method: setSortColumn()

   Set the sort of the web playlist

   Arguments:
     aPropertyID - The ID of the property that is bound to the column you wish
       to sort.
     aIsAscending - True if the sort should be ascending, false if the sort
       should be descending.
  */
  void setSortColumn( in AString aPropertyID,
                      in boolean aIsAscending );

  /**
   * \brief The last click even that occured on this <WebPlaylist>
   *
   * This is used only during the propogation of the PlaylistClickEvent event
   * and will only be non-null for a very brief time during that flow.
   */
  readonly attribute sbIPlaylistClickEvent lastClickEvent;
};
