/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

#filter substitution

// Constants for convience
if (typeof(Cc) == 'undefined')
  var Cc = Components.classes;
if (typeof(Ci) == 'undefined')
  var Ci = Components.interfaces;
if (typeof(Cu) == 'undefined')
  var Cu = Components.utils;
if (typeof(Cr) == 'undefined')
  var Cr = Components.results;

// Imports to help with some common tasks
Cu.import('resource://app/jsmodules/sbProperties.jsm');
Cu.import('resource://app/jsmodules/sbLibraryUtils.jsm');
Cu.import('resource://gre/modules/XPCOMUtils.jsm');
Cu.import('resource://app/jsmodules/StringUtils.jsm');

// FUEL makes us happier...
var Application = Components.classes["@mozilla.org/fuel/application;1"]
    .getService(Components.interfaces.fuelIApplication);

// Some prefs to use
const PREF_CONFIGURED = 'extensions.7digital.configured';
// What's my GUID
const EXTENSION_GUID = '7digital@songbirdnest.com';
// Node IDs for the service pane
const NODE_SERVICES = 'SB:Services';
const NODE_7DIGITAL = 'SB:7Digital';
const NODE_7DIGITAL_RECOMMENDATIONS = 'SB:7Digital:Recommendations';
// Where's our stringbundle?
const STRINGBUNDLE = 'chrome://7digital/locale/7digital.properties';
// Where's that store?
const STORE_URL = 'http://7digital.songbirdnest.com';
const STORE_LOADING_STUB_PATH = "/client";
const STORE_RECOMMENDATIONS_PATH = '/recommendations/client';
const STORE_CONFIG_PROPS = 'chrome://7digital/content/config.properties';
const STORE_ICON = "chrome://7digital/skin/servicepane-icon.png";
// What's the search engine's name?
const SEARCHENGINE_NAME = '7digital';
const SEARCHENGINE_URL_TEMPLATE =
    "http://7digital.songbirdnest.com/searches/{searchTerms}";
// What's the permission for?
const PERMISSION_SCOPE = 'http://7digital.songbirdnest.com/';
// What's the service pane's namespace
const SERVICEPANE_NS = 'http://songbirdnest.com/rdf/servicepane#'

function sb7Digital() { }
sb7Digital.prototype = {
  // XPCOM stuff
  className: 'sb7Digital',
  classDescription: '7digital Music Store Integration',
  classID: Components.ID('{2ceaef85-303f-4e6d-af40-b449f4922693}'),
  contractID: '@songbirdnest.com/7digital;1',
  QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver]),

  // Observer stuff
  _observerTopics: [
    'quit-application-granted', // the application is shutting down
    'em-action-requested',      // the extension manager is doing something
    'songbird-main-window-presented' // app is done starting up the ui
  ],
  _observerService: null,

  // Should I stay or should I go now?
  _uninstall: false,

  // Handy services
  _permissionManager: null,
  _searchService: null,
  _servicePaneService: null,
  _ioService: null,

  // a repeating timer that we use for setting our search engine to default
  _firstRunTimer: null,
  
  // What whitelists do we do?
  _permissions: ['rapi.playback_control', 'rapi.playback_read', 
      'rapi.library_read', 'rapi.library_write'],
}

sb7Digital.prototype.initialize = 
function sb7Digital_initialize() {
  // Listen to a bunch of observer topics
  for (var i=0; i<this._observerTopics.length; i++) {
    this._observerService.addObserver(this, this._observerTopics[i], false);
  }

  // here's some service we may well use later...
  this._permissionManager = Cc["@mozilla.org/permissionmanager;1"]
    .getService(Ci.nsIPermissionManager);
  this._searchService = Cc['@mozilla.org/browser/search-service;1']
    .getService(Ci.nsIBrowserSearchService);
  this._servicePaneService = Cc['@songbirdnest.com/servicepane/service;1']
    .getService(Ci.sbIServicePaneService);
  this._ioService = Cc['@mozilla.org/network/io-service;1']
    .getService(Ci.nsIIOService);
}
// nsIObserver
sb7Digital.prototype.observe =
function sb7Digital_observe(subject, topic, data) {
  if (topic == 'app-startup') {
    this._observerService = Cc['@mozilla.org/observer-service;1']
        .getService(Ci.nsIObserverService);
    this._observerService.addObserver(this, 'profile-after-change', false);
  } else if (topic == 'profile-after-change') {
    this._observerService.removeObserver(this, 'profile-after-change', false);
    this.initialize();
  } else if (topic == 'quit-application-granted') {
    // the application is shutting down
    if (this._uninstall) {
      this.uninstall();
      this._uninstall = false;
    }

    // Remove event listener
    var sbWindow = Cc["@mozilla.org/appshell/window-mediator;1"]
                     .getService(Ci.nsIWindowMediator)
                     .getMostRecentWindow("Songbird:Main").window;
    sbWindow.removeEventListener("ShowCurrentTrack", this.onShowCurrentTrack, true);
  } else if (topic == 'em-action-requested') {
    // the extension manager is doing something
    subject.QueryInterface(Components.interfaces.nsIUpdateItem);
    if (subject.id != EXTENSION_GUID) {
      // if they're talking about someone else, we don't care
      return;
    }
    if (data == 'item-uninstalled' || data == 'item-disabled') {
      this._uninstall = true;
    } else if (data == 'item-cancel-action') {
      this._uninstall = false;
    }
  } else if (topic == 'timer-callback' && subject == this._firstRunTimer) {
    var searchEngine = this._searchService.getEngineByName(SEARCHENGINE_NAME);
    if (!searchEngine) {
      return;
    }
    searchEngine.hidden = false;
    this._searchService.moveEngine(searchEngine, 1);
    //gSearchHandler._previousSearchEngine = searchEngine;

    this._firstRunTimer.cancel();
    this._firstRunTimer = null;
  } else if (topic == 'songbird-main-window-presented') {
    // Run this everytime since it involves servicepane node initialization
    this.install();
  }
}

sb7Digital.prototype.onShowCurrentTrack =
function sb7Digital_onShowCurrentTrack(aEvent) {
  var mediacoreManager = Cc['@songbirdnest.com/Songbird/Mediacore/Manager;1']
                           .getService(Ci.sbIMediacoreManager);
  var item = mediacoreManager.sequencer.currentItem;

  // Don't load the hidden medialist for the 7digital store if this file
  // is a preview from the 7digital store.
  if (item.contentSrc.host.indexOf("7digital.com") != -1) {
    aEvent.preventDefault();
    aEvent.stopPropagation();
  }
}

sb7Digital.prototype.create7DigitalURL =
function sb7Digital_create7DigitalURL(aPath) {
  return STORE_URL + aPath + "?oauth_consumer_key=" +
            (new SBStringBundle(STORE_CONFIG_PROPS))
            .get("7DigitalAPIKey");
}

// install 7digital music store integration
sb7Digital.prototype.install =
function sb7Digital_install() {
  // install ourselves into the service pane
  try {
    // find the store node
    var servicesNode = this._servicePaneService.getNode(NODE_SERVICES);
    if (!servicesNode) {
      servicesNode = this._servicePaneService.createNode();
      servicesNode.id = NODE_SERVICES;
      servicesNode.className = 'folder services';
      servicesNode.editable = false;
      servicesNode.name = SBString("servicesource.services");
      servicesNode.setAttributeNS(SERVICEPANE_NS, 'Weight', 1);
      this._servicePaneService.root.appendChild(servicesNode);
    } else {
      servicesNode.hidden = false;
    }

    // create 7digital node
    var myNode = this._servicePaneService.createNode();
    myNode.id = NODE_7DIGITAL;
    myNode.url = this.create7DigitalURL(STORE_LOADING_STUB_PATH);
    myNode.image = STORE_ICON;
    myNode.className = '7digital history';
    myNode.searchtype = "external";
    myNode.name = '&servicepane.7digital';
    myNode.stringbundle = STRINGBUNDLE;
    myNode.setAttributeNS(SERVICEPANE_NS, "addonID", "@EXTENSION_UUID@");
    servicesNode.appendChild(myNode);

    // Create the recommendations node
    var recommendationsNode = this._servicePaneService.createNode();
    recommendationsNode.id = NODE_7DIGITAL;
    recommendationsNode.url = this.create7DigitalURL(STORE_RECOMMENDATIONS_PATH);
    recommendationsNode.image = 'chrome://7digital/skin/7digital-smart-picks-icon.png';
    recommendationsNode.className = "7digital history";
    recommendationsNode.searchtype = "external";
    recommendationsNode.name = "&servicepane.7digital_recommended";
    recommendationsNode.stringbundle = STRINGBUNDLE;
    recommendationsNode.setAttributeNS(SERVICEPANE_NS, "addonID", "@EXTENSION_UUID@");
    myNode.appendChild(recommendationsNode);

    // Create a event listener to prevent 7digital URL's from being clickable
    // in the faceplate. See bug 22337.
    var sbWindow = Cc["@mozilla.org/appshell/window-mediator;1"]
                     .getService(Ci.nsIWindowMediator)
                     .getMostRecentWindow("Songbird:Main").window;
    sbWindow.addEventListener("ShowCurrentTrack", this.onShowCurrentTrack, true);
  } catch (e) {
    Cu.reportError(e);
  }

  // install our search plugin
  try {

    var engine = this._searchService.getEngineByName(SEARCHENGINE_NAME);

    // If there is an existing 7digital search engine and it points to an older
    // version of the store, remove it.
    if (engine && engine.searchForm != STORE_URL) {
      this._searchService.removeEngine(engine);
      engine = null;
    }

    if (!engine) {
      // install the engine
      let stringBundle = Cc["@mozilla.org/intl/stringbundle;1"]
                           .getService(Ci.nsIStringBundleService)
                           .createBundle(STRINGBUNDLE);
      // Make the store search description match the service pane node
      let storeDescription = SBString('servicepane.7digital',
                                      null,
                                      stringBundle);
      this._searchService
          .addEngineWithDetails(SEARCHENGINE_NAME,
                                STORE_ICON, // use service pane icon for search
                                SEARCHENGINE_NAME,
                                storeDescription,
                                "GET",
                                SEARCHENGINE_URL_TEMPLATE);

      let engine = this._searchService.getEngineByName(SEARCHENGINE_NAME);

      // Add the oauth consumer key to all search submissions from this engine
      let consumerKey = (new SBStringBundle(STORE_CONFIG_PROPS))
                        .get("7DigitalAPIKey");
      engine.addParam("oauth_consumer_key", consumerKey, null);

      // start a timer to try to set the engine as the default
      this._firstRunTimer = Cc['@mozilla.org/timer;1']
        .createInstance(Ci.nsITimer);
      this._firstRunTimer.init(this, 250, Ci.nsITimer.TYPE_REPEATING_SLACK);
    }
  } catch (e) {
    Cu.reportError(e);
  }

  // add whitelist entries
  try {
    var scope = this._ioService.newURI(PERMISSION_SCOPE, null, null);
    for (var i = 0; i < this._permissions.length; i++) {
      if (!this._permissionManager.testExactPermission(scope, 
            this._permissions[i])) {
        this._permissionManager.add(scope, this._permissions[i], 
            Ci.nsIPermissionManager.ALLOW_ACTION);
      }
    }
  } catch (e) {
    Cu.reportError(e);
  }
  Application.prefs.setValue(PREF_CONFIGURED, true);
}

// uninstall 7digital music store integration
sb7Digital.prototype.uninstall =
function sb7Digital_uninstall() {
  // uninstall our search plugin
  try {

    // look for the engine...
    var engine = this._searchService.getEngineByName(SEARCHENGINE_NAME);
    if (engine) {
      this._searchService.removeEngine(engine);
    }
  } catch (e) {
    Cu.reportError(e);
  }

  // remove whitelist entries
  try {
    var scope = this._ioService.newURI(PERMISSION_SCOPE, null, null);
    for (var i = 0; i < this._permissions.length; i++) {
      if (this._permissionManager.testExactPermission(scope, 
            this._permissions[i])) {
        this._permissionManager.remove(scope.host, this._permissions[i]);
      }
    }
  } catch (e) {
    Cu.reportError(e);
  }
  Application.prefs.setValue(PREF_CONFIGURED, false);
}

// XPCOM NSGetModule implementation
function NSGetModule(compMgr, fileSpec) {
  return XPCOMUtils.generateModule([sb7Digital],
  function(aCompMgr, aFileSpec, aLocation) {
    XPCOMUtils.categoryManager.addCategoryEntry('app-startup',
      sb7Digital.prototype.classDescription,
      sb7Digital.prototype.contractID, true, true);
  });
}
