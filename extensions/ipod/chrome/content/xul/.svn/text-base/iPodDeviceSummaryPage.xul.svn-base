<?xml version="1.0"?>
<!--
/*
//=BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2009 POTI, Inc.
// http://www.songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the GPL).
//
// Software distributed under the License is distributed
// on an AS IS basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
//=END SONGBIRD GPL
*/
-->

<!-- Import external definitions. -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css"
                 type="text/css"?>
<?xml-stylesheet href="chrome://ipod/skin/ipod.css" type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd">

<!-- Summary window. -->
<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        id="ipod-device-summary"
        onload="deviceSummary.onLoad();"
        onunload="deviceSummary.onUnload();">

  <!--
   * Broadcaster set.
   *
   *   deviceIDBroadcaster      Sets value to the device identifier.
   -->

  <broadcasterset>
    <broadcaster id="deviceIDBroadcaster"/>
  </broadcasterset>


  <!-- *************************************************************************
   *
   * Content.
   *
   ************************************************************************* -->

  <vbox id="main_box" flex="1">

    <!-- Overall device information box. -->
    <vbox id="overall_device_info_box">
      <!-- Device progress. -->
      <sb-device-progress id="sb-device-progress"
                          flex="1"
                          observes="deviceIDBroadcaster"/>

      <hbox id="info_box" flex="1">
        <!-- Device icon. -->
        <sb-device-info observes="deviceIDBroadcaster"
                        showlist="image"
                        enable_context_menu="true"
                        flex="0"/>

        <vbox flex="1">
          <hbox id="info_legend_box" flex="1">
            <!-- Device model/information. -->
            <sb-device-info observes="deviceIDBroadcaster"
                            devicespecs="product_capacity"
                            showlist="name"
                            enable_context_menu="true"
                            flex="1"/>

            <spacer flex="2" />

            <!-- Device capacity legend. -->
            <sb-device-capacity id="device_legend"
                                flex="1"
                                observes="deviceIDBroadcaster"
                                hidelist="bar"/>
          </hbox> <!-- /info_legend_box -->

          <!-- Device capacity bar. -->
          <sb-device-capacity id="device_capacity"
                              flex="1"
                              observes="deviceIDBroadcaster"
                              hidelist="legend"/>
        </vbox>
      </hbox>
    </vbox> <!-- /overall_device_info_box -->

    <!-- Device management tabbox. -->
    <sb-device-managetabs flex="1"
                          observes="deviceIDBroadcaster"
                          tools="resetwarnings,format"
                          hideSettingsTab="true"/>

  </vbox> <!-- End of "main_box". -->


  <!-- *************************************************************************
   *
   * Implementation.
   *
   ************************************************************************* -->

  <!-- Import the Songbird services. -->
  <script type="application/x-javascript"
          src="chrome://global/content/globalOverlay.js"/>
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/windowUtils.js" />
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />

  <!-- Device summary services. -->
  <script><![CDATA[

    //
    // Defs.
    //

    if (typeof(Cc) == "undefined")
      var Cc = Components.classes;
    if (typeof(Ci) == "undefined")
      var Ci = Components.interfaces;
    if (typeof(Cr) == "undefined")
      var Cr = Components.results;
    if (typeof(Cu) == "undefined")
      var Cu = Components.utils;

    //
    // Device summary services object.
    //

    var deviceSummary = {
      //
      // Object fields.
      //
      //   _deviceID            Device ID.
      //   _device              sbIDevice object.
      //   _deviceManagerSvc    Device manager service.
      //

      _deviceID: null,
      _device: null,
      _deviceManagerSvc: null,


      //------------------------------------------------------------------------
      //
      // Public functions.
      //
      //------------------------------------------------------------------------

      /**
       * \brief Handle load events.
       */

      onLoad: function deviceSummary_onLoad() {
        // Get the device identifier from the chrome URL.
        var url = window.location.href;
        var pos = url.indexOf("=");
        if (pos < 0)
          return;
        this._deviceID = url.substr(pos + 1);

        // Get the device object.
        this._device = this._getDevice(this._deviceID);

        // Go back to previous page and return if device is not available.
        if (!this._device || !this._device.connected) {
            var browser = SBGetBrowser();
            browser.getTabForDocument(document).backWithDefault();
            return;
        }

        // Get the device node and set the tab title if available.
        var node = this._getDeviceNode(this._device);
        if (node) {
          document.title = node.displayName;
        }

        /* Get the device manager service and */
        /* listen for device manager events.  */
        this._deviceManagerSvc =
               Cc["@songbirdnest.com/Songbird/DeviceManager;2"]
                 .getService(Ci.sbIDeviceManager2);
        this._deviceManagerSvc.addEventListener(this);

        // Notify user if device is read-only.
        if (this._isReadOnly()) {
          var priority = document.createElement("notificationbox")
                                 .PRIORITY_INFO_MEDIUM;
          var browser = SBGetBrowser();
          browser.showNotification
                    (document,
                     "read-only-device",
                     SBString("device.summary.read_only.notification"),
                     null,
                     priority,
                     null);
        }

        // Set the device ID broadcaster.
        document.getElementById("deviceIDBroadcaster").setAttribute
                                                         ("device-id",
                                                          this._deviceID);
      },


      /**
       * \brief Handle unload events.
       */

      onUnload: function deviceSummary_onLoad() {
        // Remove device manager event listener.
        if (this._deviceManagerSvc) {
          this._deviceManagerSvc.removeEventListener(this);
        }

        // Release object references.
        this._device = null;
        this._deviceManagerSvc = null;
      },


      //------------------------------------------------------------------------
      //
      // sbIDeviceEventListener functions.
      //
      //------------------------------------------------------------------------

      /**
       * aEvent - information about the event
       */

      onDeviceEvent: function deviceSummary_onDeviceEvent(aEvent) {
        switch (aEvent.type) {
          case Ci.sbIDeviceEvent.EVENT_DEVICE_REMOVED :
            // Go back to previous page if device removed.
            var device = aEvent.data.QueryInterface(Ci.sbIDevice);
            if (device.id.toString() == this._deviceID) {
              var browser = SBGetBrowser();
              browser.getTabForDocument(document).backWithDefault();
            }
            break;

          default :
            break;
        }
      },


      //------------------------------------------------------------------------
      //
      // Internal functions.
      //
      //------------------------------------------------------------------------

      /**
       * \brief Return true if device is read-only.
       *
       * \return True if device is read-only.
       */

      _isReadOnly: function deviceSummary__isReadOnly() {
        try {
          var accessCompatibility =
                this._device.properties.properties.getPropertyAsAString
                  ("http://songbirdnest.com/device/1.0#accessCompatibility");
          if (accessCompatibility == "ro")
            return true;
        } catch (ex) { }
        return false;
      },


      /**
       * \brief Get the device object for the device ID specified by aDeviceID.
       *
       * \param aDeviceID       Device identifier.
       *
       * \return sbIDevice device object.
       */

      _getDevice: function deviceSummary__getDevice(aDeviceID) {
        var deviceManager = Cc["@songbirdnest.com/Songbird/DeviceManager;2"]
                              .getService(Ci.sbIDeviceManager2);
        try {
          return deviceManager.getDevice(Components.ID(aDeviceID));
        } catch (ex) {
          Cu.reportError(ex);
        }

        return null;
      },

      /**
       * \brief Get the device node for the device specified by aDevice.
       *
       * \param aDevice       Device
       *
       * \return sbIServicePaneNode device node.
       */

      _getDeviceNode: function deviceSummary__getDeviceNode(aDevice) {
        var deviceServicePane = Cc['@songbirdnest.com/servicepane/device;1']
                            .getService(Ci.sbIDeviceServicePaneService);
        try {
          return deviceServicePane.getNodeForDevice(aDevice);
        } catch (ex) {
          Cu.reportError(ex);
        }

        return null;
      }
    };

  ]]></script>

</window>
