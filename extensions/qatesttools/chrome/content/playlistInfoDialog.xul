<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!-- Import external definitions. -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css"
                 type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd">

<!-- Device info dialog box. -->
<dialog
 xmlns:html="http://www.w3.org/1999/xhtml"
 xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
 id="playlist-info-dialog"
 hidechrome="true"
 flex="1"
 type="songbird"
 buttons="accept"
 onload="PlaylistInfoDlg.onLoad();"
 onunload="PlaylistInfoDlg.onUnload();"
 ondialogaccept="onExit();"
>

  <!-- *************************************************************************
   *
   * Content.
   *
   ************************************************************************* -->

  <!-- Use Songbird window region. -->
  <windowregion/>

    <!-- Outermost box -->
    <vbox id="dialog-box"
              align="center"
              flex="1"
              oncontextmenu="_onContextMenu(event);"
              xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

      <!-- Top Playlist Area -->
      <vbox id="top-playlist-box"
            class="info-box"
            flex="1">

        <!-- Select Playlist Area -->
        <hbox id="top-name-box"
              class="name-box"
              align="center"
              flex="1">
          <menulist id="select-playlist-list"
                    class="medialist-list"
                    sizetopopup="always">
          </menulist>
        </hbox>

        <!-- Select Property and Display Area -->
        <hbox id="top-playlist-info"
              class="property-box"
              flex="1">
          <menulist id="top-playlist-proplist"
                    class="property-list"
                    sizetopopup="always">
          </menulist>
          <label id="top-playlist-proplabel"
                 crop="end"
                 value=""
                 width="300"/>
        </hbox>

      </vbox> <!-- End Top Playlist Area -->

      <separator id="playlist-separator" />

      <!-- Bottom Playlist Area -->
      <vbox id="bottom-playlist-box"
            class="info-box"
            flex="1">

        <!-- Select Playlist Area -->
        <hbox id="bottom-name-box"
              class="name-box"
              align="center"
              flex="1">
          <menulist id="bottom-playlist-list"
                    class="medialist-list"
                    sizetopopup="always">
          </menulist>
        </hbox>

        <!-- Select Property and Display Area -->
        <hbox id="bottom-playlist-info"
              class="property-box"
              flex="1">
          <menulist id="bottom-playlist-proplist"
                    class="property-list"
                    sizetopopup="always">
          </menulist>
          <label id="bottom-playlist-proplabel"
                 crop="end"
                 value=""
                 width="300"/>
        </hbox>

      </vbox> <!-- End Bottom Playlist Area -->

    </vbox> <!-- End Outermost Box -->


  <!-- *************************************************************************
   *
   * Implementation.
   *
   ************************************************************************* -->

  <!-- Import the Songbird services. -->
  <script type="application/x-javascript"
          src="chrome://global/content/globalOverlay.js"/>
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/windowUtils.js" />

  <!-- Playlist info dialog script -->
  <script><![CDATA[

    // Defs.
    if (typeof(Cc) == "undefined")
      var Cc = Components.classes;
    if (typeof(Ci) == "undefined")
      var Ci = Components.interfaces;
    if (typeof(Cr) == "undefined")
      var Cr = Components.results;

    Cu.import("resource://app/jsmodules/sbProperties.jsm");

    var PlaylistInfoDlg = {

      // _mediaList   The sbIMediaList object for the clicked on playlist.
      _mediaList: null,

      // Populate the medialist and property dropdowns and add listeners
      onLoad: function PlaylistInfoDlg_onLoad() {

        // Get the dialog parameter: the medialist was clicked to launch this.
        var dialogPB = window.arguments[0].QueryInterface
                                             (Ci.nsIDialogParamBlock);
        this._mediaList = dialogPB.objects.queryElementAt(0, Ci.sbIMediaList);

        // Construct the dialog title.
        var dialog = document.getElementById("playlist-info-dialog");
        var title = "Playlist Info";

        // Set the dialog title.
        var dialogTitlebar = document.getElementById("dialog-titlebar");
        dialogTitlebar.title = title;

        // Populate the medialist dropdowns with all medialists from all current
        // libraries
        var mediaListMenus = [];
        this._selectPlaylistList = document.getElementById("select-playlist-list");
        mediaListMenus.push(this._selectPlaylistList);
        this._comparePlaylistList = document.getElementById("bottom-playlist-list");
        mediaListMenus.push(this._comparePlaylistList);

        this._generateMedialistMenus(mediaListMenus);

        // Set the selected medialist to default to the one that the user
        // clicked on to launch this dialog
        var selectedList = this._selectPlaylistList.getElementsByAttribute
                                             ("listGuid", this._mediaList.guid)[0];
        this._selectPlaylistList.selectedIndex =
          this._selectPlaylistList.getIndexOfItem(selectedList);

        selectedList = this._comparePlaylistList.getElementsByAttribute
                                          ("listGuid", this._mediaList.guid)[0];
        this._comparePlaylistList.selectedIndex =
          this._comparePlaylistList.getIndexOfItem(selectedList);

        // Populate the property dropdowns with all properties
        var propertyMenus = [];
        this._selectPropertyList = document.getElementById
                                            ("top-playlist-proplist");
        propertyMenus.push(this._selectPropertyList);
        this._comparePropertyList = document.getElementById
                                           ("bottom-playlist-proplist");
        propertyMenus.push(this._comparePropertyList);

        this._generatePropertyMenus(propertyMenus);

        // Add listeners to update the displayed property when a dropdown changes
        this._selectPlaylistList.addEventListener("popuphidden", this._propertySelected, false);
        this._comparePlaylistList.addEventListener("popuphidden", this._propertySelected, false);
        this._selectPropertyList.addEventListener("popuphidden", this._propertySelected, false);
        this._comparePropertyList.addEventListener("popuphidden", this._propertySelected, false);
      },

      // Populates the param aMenus with all medialists in all current libraries
      _generateMedialistMenus: function PlaylistInfoDlg__generateMedialistMenus
                                         (aMenus) {
        // Get all libraries
        var libMgr = Cc["@songbirdnest.com/Songbird/library/Manager;1"]
                       .getService(Ci.sbILibraryManager);
        var libs = libMgr.getLibraries();

        // Get all medialists in each library
        while (libs.hasMoreElements()) {
          var lib = libs.getNext();
          try {
            var lists = lib.getItemsByProperty(SBProperties.isList, "1");
          } catch (e) {
            // this library has no mediaLists, just continue
            continue;
          }
          for (var i = 0; i < lists.length; i++) {
            var list = lists.queryElementAt(i, Ci.sbIMediaList);

            // We display a concatenation of the library and medialist names
            var libName = (lib.name ? lib.name : "<No Library Name>");
            var listName = (list.name ? list.name : "<No Playlist Name>");

            // We need to append a new menuitem to each menu that we were passed
            for (var j = 0; j < aMenus.length; j++) {
              var menu = aMenus[j];

              // Append the menuitem to this menu with the display name as
              // a concatenation of the library and medialist names
              var newItem = menu.appendItem(libName + "-" + listName);

              // We set these guid attributes so we can get back to the
              // to the medialist later
              newItem.setAttribute("listGuid", list.guid);
              newItem.setAttribute("libraryGuid", lib.guid);
            }
          }
        }
      },

      // Populates the param aMenus with all properties
      _generatePropertyMenus: function PlaylistInfoDlg__generatePropertyMenus
                                   (aMenus) {
        // Load property manager
        var propMgr = Cc["@songbirdnest.com/Songbird/Properties/PropertyManager;1"]
                        .getService(Ci.sbIPropertyManager);
        var allPropIDs = propMgr.propertyIDs;

        // Generate a list of all properties as pairs of their displayName
        // and id
        var seen = {};
        var propEntriesToDisplay = [];
        while (allPropIDs.hasMore()) {
          var prop = allPropIDs.getNext();
          if (prop instanceof Ci.sbISmartPlaylistProperty)
            prop = prop.propertyID;

          // if we already have it, skip it
          if (prop in seen)
            continue;
          // remember that we have it
          seen[prop] = true;
          // get info about that property
          var info = propMgr.getPropertyInfo(prop);

          // item name and id
          var entry = { name: info.displayName, value: info.id };
          // insert in the appropriate list
          propEntriesToDisplay.push(entry);
        }

        // Sort the properties in reverse alphabetic order as the ones likely
        // to be needed are at the higher alphas
        propEntriesToDisplay.sort(function (a,b) { return (a.name < b.name) });

        // For each property add it to each of the param aMenus
        var guidIndex = 0;
        for (var i = 0; i < propEntriesToDisplay.length; i++) {
          var propEntry = propEntriesToDisplay[i];
          if (propEntry.name.match(/GUID/)) {
            guidIndex = i;
          }

          // Add this property to each of the param aMenus
          for (var j = 0; j < aMenus.length; j++) {
            var menu = aMenus[j];
            menu.appendItem(propEntry.name, propEntry.value);
          }
        }

        // Default the selectedIndex to the guid property
        for (var j = 0; j < aMenus.length; j++) {
          var menu = aMenus[j];
          menu.selectedIndex = guidIndex;

          // update the property label to reflect the selected property's value
          this.setPropertyLabel(menu);
        }
      },

      // Wrapper to call setPropertyLabel to update the label to show the
      // currently selected property's value when the user selects from one of
      // the dropdowns
      _propertySelected: function PlaylistInfoDlg__propertySelected(event) {
        PlaylistInfoDlg.setPropertyLabel(event.target);
      },

      // Updates the label that reflects the currently selected property's
      // value.
      // target can be any element within the box containing information about
      // a playlist and the property label for that playlist will be updated
      setPropertyLabel: function PlaylistInfoDlg_setPropertyLabel(target) {
        // Get the outermost box that surrounds all information about a
        // specific playlist
        var infoBox = target;
        while (infoBox.getAttribute("class").match(/info-box/) == null) {
          infoBox = infoBox.parentNode;
        }

        // Get the medialist dropdown to retrieve information about it's
        // current selection
        var mediaListMenu = infoBox.getElementsByAttribute
                                   ("class", "name-box")[0].firstChild;
        var selectedMediaListItem = mediaListMenu.selectedItem;
        var selectedMediaListGuid = selectedMediaListItem.getAttribute("listGuid");
        var selectedLibraryGuid = selectedMediaListItem.getAttribute("libraryGuid");

        // Get the actual medialist for that is represented by the medialist
        // dropdown's current selection
        var libMgr = Cc["@songbirdnest.com/Songbird/library/Manager;1"]
                       .getService(Ci.sbILibraryManager);
        var library = libMgr.getLibrary(selectedLibraryGuid);
        var mediaList = library.getMediaItem(selectedMediaListGuid);

        // Get handles on the property dropdown and property value label
        var propertyBox = infoBox.getElementsByAttribute
                                  ("class", "property-box")[0];
        var propertyMenu = propertyBox.firstChild;
        var valueLabel = propertyBox.lastChild;

        // Get information about the selected property
        var selectedProperty = propertyMenu.selectedItem;
        var propId = selectedProperty.value;

        // Set the property value label to correspond with the selected property
        var propVal = mediaList.getProperty(propId);
        valueLabel.value = ((propVal != null) ? propVal : "null");
      },

      /**
       * \brief Handle unload events.
       */

      onUnload: function PlaylistInfoDlg_onUnload() {
        // Remove all of our listeners
        this._selectPlaylistList.removeEventListener("popuphidden", this._propertySelected, false);
        this._comparePlaylistList.removeEventListener("popuphidden", this._propertySelected, false);
        this._selectPropertyList.removeEventListener("popuphidden", this._propertySelected, false);
        this._comparePropertyList.removeEventListener("popuphidden", this._propertySelected, false);
      },
    };

  ]]></script>

</dialog>
