/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set sw=2 :miv */
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

// Mozilla imports.
#include "nsISupports.idl"

// Interface declarations.
interface sbILibrary;
interface sbIMediaItem;
interface sbIMediaItemDownloadJob;

/**
 *   This interface is implemented by media item downloader components.  These
 * components provide support for downloading media items from different sources
 * (e.g., from HTTP, Amazon, eMusic).
 *   Downloader components may be used to download media items for the main
 * library or for a device.  When downloading for a device, the downloader may
 * choose a source file format that is compatible with the device.
 *   These components are managed by the media item download service.  Media
 * item downloader components should register themselves in the media item
 * downloader category defined by SB_MEDIA_ITEM_DOWNLOADER_CATEGORY.
 *   Downloaders must be thread-safe.
 *
 * \see sbIMediaItemDownloadService
 */

[scriptable, uuid(65b0423e-1dd2-11b2-8f1d-8a6e9596b52a)]
interface sbIMediaItemDownloader : nsISupports
{
  //
  // Downloader vote defs.
  //
  //   When voting to download a media item, downloaders may use one of these
  // downloader vote constants.  Downloaders may return whatever vote value they
  // deem appropriate.  These constants are provided as a guideline.
  //

  /**
   * Downloader cannot download media item.
   */
  const unsigned long VOTE_NONE = 0;

  /**
   * Downloader matched the media item content source scheme.
   */
  const unsigned long VOTE_SCHEME = 100;

  /**
   * Downloader matched the media item content source host.
   */
  const unsigned long VOTE_HOST = 200;

  /**
   * Downloader matched the entire media item content source URL.
   */
  const unsigned long VOTE_WHOLE_URL = 300;

  /**
   * Downloader matched the media item properties.
   */
  const unsigned long VOTE_MEDIA_ITEM_PROPERTIES = 400;

  /**
   * Downloader matched the target library.
   *
   * If the target library is a device library, a special downloader may be
   * required to download a media item in a format compatible with the device.
   */
  const unsigned long VOTE_TARGET_LIBRARY = 500;


  /**
   *   Vote to be the downloader used to download the media item specified by
   * aMediaItem to the library specified by aTargetLibrary.  If aTargetLibrary
   * is not specified, the target library is the main library.
   *   The downloader that returns the highest vote value will be used to
   * download the media item.  The downloader may return one of the predefined
   * vote values or choose its own value to return.
   *
   * \param aMediaItem          Media item to download.
   * \param aTargetLibrary      Library for which the media item will be
   *                            downloaded.
   *
   * \returns                   Downloader match value.
   */
  unsigned long vote(in sbIMediaItem aMediaItem,
                     in sbILibrary   aTargetLibrary);

  /**
   * Return the download size of the media item specified by aMediaItem for the
   * library specified by aTargetLibrary.  If aTargetLibrary is not specified,
   * return the size of a download for the main library.
   *
   * \param aMediaItem          Media item for which to get download size.
   * \param aTargetLibrary      Library for which the media item will be
   *                            downloaded.
   *
   * \returns                   Download size.
   */
  unsigned long long getDownloadSize(in sbIMediaItem aMediaItem,
                                     in sbILibrary   aTargetLibrary);

  /**
   * Create and return a download job for the media item specified by aMediaItem
   * to download for the library specified by aTargetLibrary.  If aTargetLibrary
   * is not specified, create a job for downloading for the main library.
   *
   * \param aMediaItem          Media item to download.
   * \param aTargetLibrary      Library for which the media item will be
   *                            downloaded.
   *
   * \return                    Media item download job.
   */
  sbIMediaItemDownloadJob createDownloadJob(in sbIMediaItem aMediaItem,
                                            in sbILibrary   aTargetLibrary);
};


//
// C++ defs.
//

%{C++

#include <nsIComponentManager.h>
#include <nsICategoryManager.h>
#include <nsIGenericFactory.h>
#include <nsIServiceManager.h>

#include <nsCOMPtr.h>
#include <nsServiceManagerUtils.h>
#include <nsStringGlue.h>
#include <nsXPCOMCID.h>

class nsIFile;
struct nsModuleComponentInfo;

#define SB_MEDIA_ITEM_DOWNLOADER_CATEGORY "songbird-media-item-downloader"

/**
 * Put this in your module definition file. Give your class name. Then your
 * moduleInfo should look something like this:
 *
 *   NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(sbSampleMediaItemDownloader, Init)
 *   SB_MEDIACORE_FACTORY_REGISTERSELF(sbSampleMediaItemDownloader)
 *
 *   static nsModuleComponentInfo components[] =
 *   {
 *     {
 *       CLASSNAME,
 *       CID,
 *       CONTRACTID,
 *       sbSampleMediaItemDownloaderConstructor,
 *       sbSampleMediaItemDownloaderRegisterSelf,
 *       sbSampleMediaItemDownloaderUnregisterSelf
 *     }
 *   };
 *
 *   NS_IMPL_NSGETMODULE(SampleMediaItemDownloader, components)
 */
#define SB_MEDIA_ITEM_DOWNLOADER_REGISTERSELF(_name)                           \
                                                                               \
  NS_METHOD _name##RegisterSelf(nsIComponentManager* aCompMgr,                 \
                                nsIFile* aPath,                                \
                                const char* registryLocation,                  \
                                const char* componentType,                     \
                                const nsModuleComponentInfo* info);            \
                                                                               \
  NS_METHOD _name##UnregisterSelf(nsIComponentManager* aCompMgr,               \
                                  nsIFile* aPath,                              \
                                  const char* registryLocation,                \
                                  const nsModuleComponentInfo* info);

/**
 * Stick this in your implementation file. Give your class name.
 */
#define SB_MEDIA_ITEM_DOWNLOADER_REGISTERSELF_IMPL(_name)                      \
                                                                               \
  NS_METHOD                                                                    \
  _name##RegisterSelf(nsIComponentManager* aCompMgr,                           \
                      nsIFile* aPath,                                          \
                      const char* registryLocation,                            \
                      const char* componentType,                               \
                      const nsModuleComponentInfo* info)                       \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    nsCAutoString prevEntry;                                                   \
    rv = catMan->AddCategoryEntry(SB_MEDIA_ITEM_DOWNLOADER_CATEGORY,           \
                                  info->mContractID,                           \
                                  info->mContractID,                           \
                                  PR_TRUE, PR_TRUE,                            \
                                  getter_Copies(prevEntry));                   \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    NS_WARN_IF_FALSE(prevEntry.IsEmpty(),                                      \
                     "Another downloader was registered with that id!");       \
    return NS_OK;                                                              \
  }                                                                            \
                                                                               \
  NS_METHOD                                                                    \
  _name##UnregisterSelf(nsIComponentManager* aCompMgr,                         \
                        nsIFile* aPath,                                        \
                        const char* registryLocation,                          \
                        const nsModuleComponentInfo* info)                     \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    rv = catMan->DeleteCategoryEntry(SB_MEDIA_ITEM_DOWNLOADER_CATEGORY,        \
                                     info->mContractID,                        \
                                     PR_TRUE);                                 \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    return NS_OK;                                                              \
  }
%}

