/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file sbIMediaItemController.idl
 * \brief Definition of the sbIMediaItemController interface
 * \sa sbIMediaItemController.idl
 */

#include "sbIMediaItem.idl"
interface nsIDOMWindow;

/**
* \interface sbIMediaItemControllerListener
* \brief Interface to receive events from a mediaItemController
*
* \sa sbIMediaItem,sbIMediaItemController,sbIMediaCoreSequencer
*/
[scriptable, uuid(749a5b2d-8610-4ea0-96fe-46d120055045)]
interface sbIMediaItemControllerListener : nsISupports
{
  /**
   * \brief Result constant for onValidatePlaybackComplete used
   * to proceed with playing the validated item
   */
  const long VALIDATEPLAYBACKCOMPLETE_PROCEED = 0;
  /**
   * \brief Result constant for onValidatePlaybackComplete used
   * to skip item and continue on with the next in queue
   */
  const long VALIDATEPLAYBACKCOMPLETE_SKIP    = 1;
  /**
   * \brief Event triggered when the controller is done validating
   * playback for an item
   *
   * \param aItem   The item for which playback validation has completed
   * \param aResult A constant indicating the result of the validation
   */
  void onValidatePlaybackComplete(in sbIMediaItem aItem, in long aResult);
};

/**
* \interface sbIMediaItemController
* \brief Interface that defines a mediaitem controller
*
* A mediaitem controller allows components to control the disabled
* status and playback capability of a mediaitem in realtime.
* Controller ContractIDs are of the form
* @songbirdnest.com/Songbird/library/mediaitemcontroller;1?type=XXX
* where XXX is the media item's trackType property.
*
* Implementors must provide a service with the correct contractID in
* order for the sequencer to call them back for their media items.
*
* \sa sbIMediaItem,sbIMediaItemControllerListener,sbIMediaCoreSequencer
*/
[scriptable, uuid(f888f0c0-c805-11df-bd3b-0800200c9a66)]
interface sbIMediaItemController : nsISupports
{
  /**
   * \brief Determines if the item should be disabled in playlists
   */
  boolean isItemDisabled(in sbIMediaItem aMediaItem);

  /*
   * \brief Called when a mediaitem is about to be played by the
   *        mediacore sequencer. By the time this method is called, the
   *        sequencer has been put on hold and is listening for the
   *        controller's onValidatePlaybackComplete event (see
   *        sbIMediaItemControllerListener) so as to resume when the
   *        validation process has completed.
   *
   * \param aItem           The item about to be played back
   * \param aFromUserAction True if the user specifically requested playback
   *                        for the item, false if the sequencer advanced on
   *                        its own to next item.
   * \param aListener       An interface to receive completion callbacks
   *
   * Note that the mediacore sequencer monitor is being held when this method
   * is called, implementors should not call back into the sequencer except
   * from the same thread.
   */
  void validatePlayback(in sbIMediaItem aItem,
                        in boolean aFromUserAction,
                        in sbIMediaItemControllerListener aListener);

  /*
   * \brief Called to validate whether the streaming media item is accessible.
   *        By the time this method is called, the caller should be put on hold
   *        and is listening for the controller's onValidatePlaybackComplete
   *        event (see sbIMediaItemControllerListener) so as to resume when the
   *        validation process has completed.
   *
   * \param aItem            The item to be validated.
   * \param aFromUserAction  True if the user specifically requested validation.
   *                         for the item, false to skip to the next item.
   * \param aPromptLoginOnce True if only prompt for login once.
   * \param aListener        An interface to receive completion callbacks.
   */
  void validateStreaming(in sbIMediaItem aItem,
                         in boolean aFromUserAction,
                         in boolean aPromptLoginOnce,
                         in sbIMediaItemControllerListener aListener);
};

%{C++
// This is the partial contract id for an sbIMediaItemController implementor.
// The appropriate mediaItem trackType should be appended to this string to
// construct the full contract id of a controller for a given item.
#define SB_MEDIAITEMCONTROLLER_PARTIALCONTRACTID             \
  "@songbirdnest.com/Songbird/library/mediaitemcontroller;1?type="
%}

