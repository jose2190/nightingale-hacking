/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbILibrary.idl
 * \brief Definition of the sbILibrary interface
 * \sa sbILibraryFactory.idl, sbILibraryManager.idl
 */

#include "sbIMediaList.idl"

interface nsIArray;
interface nsIChannel;
interface nsIPropertyBag2;
interface nsIStringEnumerator;
interface nsIURI;
interface sbIDevice;
interface sbILibraryFactory;
interface sbIMediaItem;
interface sbIMediaListFactory;

/**
* \interface sbIBatchCreateMediaItemsListener
* \brief Callback for batch media create items
*/
[scriptable, uuid(923514f0-0845-431f-86d4-3a073c6a0a98)]
interface sbIBatchCreateMediaItemsListener : nsISupports
{
  /**
   * \brief Called periodically to provide progress updates for the batch
   *        operation
   * \param aIndex The index of the most recently completed item in the work
   *        array
   */
  void onProgress(in unsigned long aIndex);

  /**
   * \brief Called when batch operation is complete
   * \param aMediaItems Array of the created sbIMediaItem objects.  If the
   *        operation completes with an error, this argument is null.
   * \param aResult Result of operation.  Set to an error value.  NS_OK
   *                indicates successful completion.
   */
  void onComplete(in nsIArray aMediaItems,
                  in unsigned long aResult);
};

/**
* \interface sbILibrary
* \brief Media library abstraction
*
* The library interface is the primary means of exposing media library data
* to Songbird.  Implementors of this interface must also provide
* implementations of sbIMediaItem and sbIMediaList.
*
* \sa sbIMediaItem, sbIMediaList
*/
[scriptable, uuid(cf0b3ffd-bdc6-4319-a13a-1ad82560230a)]
interface sbILibrary : sbIMediaList
{
  /**
   * \brief Reference to the device that this library is stored on
   */
  readonly attribute sbIDevice device;

  /**
   * \brief Declares if this library will host foreign media items
   */
  readonly attribute boolean supportsForeignMediaItems;

  /**
   * \brief Holds the parameters with which this library was created.
   */
  readonly attribute nsIPropertyBag2 creationParameters;

  /**
   * \brief Holds the factory that created this library.
   */
  readonly attribute sbILibraryFactory factory;

  /**
   * \brief Checks if another mediaitem with the same identity as aMediaItem is
   *        already present in the library.
   *        This function can be called on the parent library of aMediaItem and
   *        it will only return true if a mediaitem other than the param
   *        aMediaItem has the same identity as aMediaItem.
   *
   * \param aMediaItem The mediaitem whose identity will be calculated and we
   *                   will check if another mediaitem with that identity is
   *                   already in the library.
   *
   * \return True if a mediaitem with the same identity as aMediaItem but with a
   *         different guid is present in the library.
   */
  boolean containsItemWithSameIdentity(in sbIMediaItem aMediaItem);

  /**
   * \brief Find mediaitems in the library that have the same identity as
   *        aMediaItem. Returns an empty array if none are found.
   *        This function can be called on the parent library of aMediaItem and
   *        it will only return a mediaitem other than the param aMediaItem.
   *
   * \param aMediaItem The mediaitem whose identity will be calculated and we
   *                   will check if other mediaitems with that identity are
   *                   already in the library.
   *
   * \return An array of mediaitems with the same identity as aMediaItem that
   *         are not the same as aMediaItem (as determined by guid).
   *         An empty array is returned if none are found.
   */
  nsIArray getItemsWithSameIdentity(in sbIMediaItem aMediaItem);

  /**
   * \brief Resolves a songbird schemed URL to a channel.  Throws an exception
   * if the item referenced in the URL is not found
   * \param aUri The nsIURI to a media item to resolve
   * \return An open channel to the content of the referenced media item
   */
  nsIChannel resolve(in nsIURI aUri);

  /**
   * \brief Creates a new media item
   * \prarm aContentUri The URI pointing to the content of the new media item.
   *        Use sbILibraryUtils.getContentURI or getFileContentURI to produce
   *        library content URI's.
   * \param aProperties Optional initial properties for this new item
   * \param aAllowDuplicates If false, an attempt to create a new media item
   *        with a content URI that already exists in the library will simply
   *        return the existing item rather than creating a new one.  If true,
   *        a new media item will be created with the specified content URI
   *        regardless if it is a duplicate.  The default is false.
   * \return A new, persisted media item
   */
  sbIMediaItem createMediaItem(in nsIURI aContentUri,
                               [optional] in sbIPropertyArray aProperties,
                               [optional] in boolean aAllowDuplicates);

  /**
   * \brief Create a new media item, disallowing duplicates, and return if it did.
   * \param [optional] aResultItem the item that was created (or found)
   * \return Whether a new media item was created
   * \see createMediaItem
   */
  boolean createMediaItemIfNotExist(in nsIURI aContentUri,
                                    [optional] in sbIPropertyArray aProperties,
                                    [optional] out sbIMediaItem aResultItem);

  /**
   * \brief Creates a new media list
   *
   * \param aType - The type of media list to create.
   * \param aProperties Optional initial properties for this new item
   *
   * \return A new media list.
   */
  sbIMediaList createMediaList(in AString aType,
                               [optional] in sbIPropertyArray aProperties);

  /**
   * \brief Creates a new media list
   *
   * \param aType - The type of media list to create.
   * \param aSource - A media list whose items and properties are to be copied.
   * \param aDontCopyContent - Do not copy the list content if true.
   *
   * \return A new media list.
   */
  sbIMediaList copyMediaList(in AString aType,
                             in sbIMediaList aSource,
                             in boolean aDontCopyContent);

  /**
   * \brief Get a media item
   * \param aGuid Guid of media item to get
   * \return The requested media item
   */
  sbIMediaItem getMediaItem(in AString aGuid);

  /**
   * \brief Search for and return a duplicate of the media item specified by
   *        aMediaItem.
   *
   * \param aMediaItem Media item for which to get duplicate.
   * \return Duplicate media item or null if no duplicates.
   */
  sbIMediaItem getDuplicate(in sbIMediaItem aMediaItem);

  /**
   * \brief Clear all media items (excluding medialists) from the library.
   * \note If you wish to clear the entire library (including medialists)
   *       use clear() instead.
   */
  void clearItems();

  /**
   * \brief Clear items of a certain CONTENT_TYPE (see sbStandardProperties.h).
   */
  void clearItemsByType(in AString aContentType);

  /**
   * \brief A list of available media list types.
   */
  readonly attribute nsIStringEnumerator mediaListTypes;

  /**
   * \brief Register a new media list type at run time
   *
   * \param aFactory - The factory that will create the media list
   */
  void registerMediaListFactory(in sbIMediaListFactory aFactory);

  /**
   * Hints for transfer service to possibly add a transcode step
   */
/*
  AString getPreferedAudioMimeType();
  AString getPreferedVideoMimeType();
*/

  /**
   * \brief Called when the library should remove unsupported media list types,
   *        unknown property types, temporary items, or otherwise optimize its
   *        performance or size.
   * \param aAnalyzeOnly - Optimize will only run analysis of the library
   *                       for performance.
   */
  void optimize([optional] in boolean aAnalyzeOnly);

  /**
   * \brief Called when the library should save any cached data to disk
   */
  void flush();

  /**
   * \brief Create many media items from a list of URIs, and notify their
   *        addition.
   * \param aURIArray nsIArray of nsIURI objects
   * \param aPropertyArrayArray Optional array of sbIPropertyArray.  If
   *        specified, the properties specified at each array index will be
   *        used in the creation of the new media item at the same array index.
   * \param aAllowDuplicates If false, URIs specified in aURIArray that
   *        already exist in the library will not be created and not returned.
   *        If true, media items will be created for all of the URIs specified
   *        regardless if they already exist.  The default is false.
   * \return nsIArray of the new sbIMediaItem objects
   */
  nsIArray batchCreateMediaItems(in nsIArray aURIArray,
                                 [optional] in nsIArray aPropertyArrayArray,
                                 [optional] in boolean aAllowDuplicates);

  /**
   * \brief Create many media items from a list of URIs, disallowing duplicates,
   *        and return which items were created.
   * \param aURIArray nsIArray of nsIURI objects
   * \param aPropertyArrayArray Optional array of sbIPropertyArray.  If
   *        specified, the properties specified at each array index will be
   *        used in the creation of the new media item at the same array index.
   * \param aResultItemArray nsIArray of sbIMediaItem objects that were created
   *        (or found).
   * \return nsIArray of nsIVariant objects of type VTYPE_BOOL indicating which
   *         items were newly created.
   */
  nsIArray batchCreateMediaItemsIfNotExist
             (in nsIArray aURIArray,
              [optional] in nsIArray aPropertyArrayArray,
              [optional] out nsIArray aResultItemArray);

  /**
   * \brief Asychronously create many media items from a list of URIs
   * \param aListener Listener to receive progress and complete notifications
   * \param aURIArray nsIArray of nsIURI objects
   * \param aPropertyArrayArray Optional array of sbIPropertyArray.  If
   *        specified, the properties specified at each array index will be
   *        used in the creation of the new media item at the same array index.
   * \param aAllowDuplicates If false, URIs specified in aURIArray that
   *        already exist in the library will not be created and not returned.
   *        If true, media items will be created for all of the URIs specified
   *        regardless if they already exist.  The default is false.
   */
  void batchCreateMediaItemsAsync(in sbIBatchCreateMediaItemsListener aListener,
                                  in nsIArray aURIArray,
                                  [optional] in nsIArray aPropertyArrayArray,
                                  [optional] in boolean aAllowDuplicates);
};
