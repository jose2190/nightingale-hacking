/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbILibraryConstraints.idl
 * \sa sbILibrary.idl
 */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface nsIStringEnumerator;
interface sbILibraryConstraint;
interface sbILibraryConstraintGroup;

/**
 * \interface sbILibraryConstraintBuilder
 *
 * A library constraint is used to apply a filter or a search to a view.  A
 * constraint consits of:
 *
 * - A property/ value pair that selects a set of items from the view's media
 *   list
 * - The result of each of the pairs are combined into a group of distinct
 *   items
 * - Multiple groups may be intersected with each other
 *
 */
[scriptable, uuid(3da5df89-9718-4c5e-9494-0d6116ab2bdd)]
interface sbILibraryConstraintBuilder : nsISupports
{
  /**
   * \brief Attempt to parse a serialized constraint description.  This expects
   *        a string as serialized by sbILibraryConstraint::toString().
   * \param aSerializedConstraint the serialized string of the constraints
   * \throws NS_ERROR_ALREADY_INITIALIZED if constraints already exist
   * \throws NS_ERROR_ILLEGAL_VALUE if the string could not be unserialized
   */
  sbILibraryConstraintBuilder parseFromString(in AString aSerializedConstraint);

  /**
   * \brief Add an existing constraint to the builder
   * \param aConstraint The constraint to add
   */
  sbILibraryConstraintBuilder includeConstraint(in sbILibraryConstraint aConstraint);

  /**
   * \brief Add a property / value pair to the current group
   * \param aProperty The property to add
   * \param aValue The value to add
   */
  sbILibraryConstraintBuilder include(in AString aProperty,
                                      in AString aValue);

  /**
   * \brief Adds a property / value pair to the current group for each of the
   *        values supplied in the value list.  This is a shortcut to calling
   *        include for every value with the same property.
   * \param aProperty The property to add
   * \param aValue The values to add
   */
  sbILibraryConstraintBuilder includeList(in AString aProperty,
                                          in nsIStringEnumerator aValues);

  /**
   * \brief Completes the current group and starts a new one.  Each group
   *        will be intersected in the result.
   */
  sbILibraryConstraintBuilder intersect();

  /**
   * \brief Returns the constructed constraint
   */
  sbILibraryConstraint get();
};

[scriptable, uuid(c271cafb-fc06-4e56-bd01-368458117618)]
interface sbILibraryConstraint : nsISupports
{
  readonly attribute unsigned long groupCount;
  readonly attribute nsISimpleEnumerator groups;
  sbILibraryConstraintGroup getGroup(in unsigned long aIndex);

  boolean equals(in sbILibraryConstraint aOtherConstraint);
  AString toString();
};

[scriptable, uuid(37793a91-e229-4642-9c16-290b84e24b87)]
interface sbILibraryConstraintGroup : nsISupports
{
  readonly attribute nsIStringEnumerator properties;
  nsIStringEnumerator getValues(in AString aProperty);
  boolean hasProperty(in AString aProperty);
  boolean equals(in sbILibraryConstraintGroup aOtherGroup);
  AString toString();
};

/**
 * \interface sbILibrarySort
 * \brief A sort that can be applied to a media list view
 */
[scriptable, uuid(d9655856-f518-43f1-b096-25f52b0b629e)]
interface sbILibrarySort : nsISupports
{
  void init(in AString aProperty, in boolean aIsAscending);

  readonly attribute AString property;
  readonly attribute boolean isAscending;
  AString toString();
};

