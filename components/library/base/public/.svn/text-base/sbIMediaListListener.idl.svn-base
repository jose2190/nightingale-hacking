/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIMediaListListener.idl
 * \brief Definition of the sbIMediaListListener interface
 * \sa sbIMediaList.idl
 */

#include "nsISupports.idl"

interface sbIMediaItem;
interface sbIMediaList;
interface sbIPropertyArray;

/**
* \interface sbIMediaListListener
* \brief Interface used to listen to changes to a media list.
*
* Implementors of this interface can listen to changes in a media list.
*
* \sa sbIMediaList
*/
[scriptable, uuid(c5e933cc-1dd1-11b2-b51a-fab53acecdc4)]
interface sbIMediaListListener : nsISupports
{
  /**
   * \brief Called when a media item is added to the list.
   * \param aMediaList The list that has changed.
   * \param aMediaItem The new media item.
   * \param aIndex The index in the list where the new item was added
   * \return True if you do not want any further onItemAdded notifications for
   *         the current batch.  If there is no current batch, the return value
   *         is ignored.
   */
  boolean onItemAdded(in sbIMediaList aMediaList,
                      in sbIMediaItem aMediaItem,
                      in unsigned long aIndex);

  /**
   * \brief Called before a media item is removed from the list.
   * \param aMediaList The list that has changed.
   * \param aMediaItem The media item to be removed
   * \param aIndex The index of the item to be removed
   * \return True if you do not want any further onBeforeItemRemoved
   *         notifications for the current batch.  If there is no current batch,
   *         the return value is ignored.
   */
  boolean onBeforeItemRemoved(in sbIMediaList aMediaList,
                              in sbIMediaItem aMediaItem,
                              in unsigned long aIndex);

  /**
   * \brief Called after a media item is removed from the list.
   * \param aMediaList The list that has changed.
   * \param aMediaItem The removed media item.
   * \param aIndex Index from where the item was removed
   * \return True if you do not want any further onAfterItemRemoved for the
   *         current batch.  If there is no current batch, the return value is
   *         ignored.
   */
  boolean onAfterItemRemoved(in sbIMediaList aMediaList,
                             in sbIMediaItem aMediaItem,
                             in unsigned long aIndex);

  /**
   * \brief Called when a media item is changed.
   * \param aMediaList The list that has changed.
   * \param aMediaItem The item that has changed.
   * \param aProperties Array of properties that were updated.  Each property's
   *        value is the previous value of the property
   * \return True if you do not want any further onItemUpdated notifications
   *         for the current batch.  If there is no current batch, the return
   *         value is ignored.
   */
  boolean onItemUpdated(in sbIMediaList aMediaList,
                        in sbIMediaItem aMediaItem,
                        in sbIPropertyArray aProperties);

  /**
   * \brief Called when a media item is moved.
   * \param sbIMediaList aMediaList The list that contains the item that moved.
   * \param aFromIndex Index of the item that was moved
   * \param aToIndex New index of the moved item
   * \return True if you do not want any further onItemMoved notifications
   *         for the current batch.  If there is no current batch, the return
   *         value is ignored.
   */
  boolean onItemMoved(in sbIMediaList aMediaList,
                      in unsigned long aFromIndex,
                      in unsigned long aToIndex);

  /**
   * \Brief Called before a media list is cleared.
   * \param sbIMediaList aMediaList The list that is about to be cleared.
   * \param aExcludeLists If true, only media items, not media lists, are being
   *                      cleared.
   * \return True if you do not want any further onBeforeListCleared
   *         notifications for the current batch.  If there is no current batch,
   *         the return value is ignored.
   */
  boolean onBeforeListCleared(in sbIMediaList aMediaList,
                              in boolean      aExcludeLists);

  /**
   * \Brief Called when a media list is cleared.
   * \param sbIMediaList aMediaList The list that was cleared.
   * \param aExcludeLists If true, only media items, not media lists, were
   *                      cleared.
   * \return True if you do not want any further onListCleared notifications
   *         for the current batch.  If there is no current batch, the return
   *         value is ignored.
   */
  boolean onListCleared(in sbIMediaList aMediaList,
                        in boolean      aExcludeLists);

  /**
   * \brief Called when the library is about to perform multiple operations at
   *        once.
   *
   * This notification can be used to optimize behavior. The consumer may
   * choose to ignore further onItemAdded or onItemRemoved notifications until
   * the onBatchEnd notification is received.
   *
   * \param aMediaList The list that has changed.
   */
  void onBatchBegin(in sbIMediaList aMediaList);

  /**
   * \brief Called when the library has finished performing multiple operations
   *        at once.
   *
   * This notification can be used to optimize behavior. The consumer may
   * choose to stop ignoring onItemAdded or onItemRemoved notifications after
   * receiving this notification.
   *
   * \param aMediaList The list that has changed.
   */
  void onBatchEnd(in sbIMediaList aMediaList);
};

/**
* \interface sbIMediaListEnumerationListener
* \brief Interface used to enumerate the items in a media list.
* \sa sbIMediaList
*/
[scriptable, uuid(8060b316-1837-44df-a184-7f25c18ea4c0)]
interface sbIMediaListEnumerationListener : nsISupports
{
  const unsigned short CONTINUE = 0;
  const unsigned short CANCEL   = 1;

  /**
   * \brief Called when enumeration is about to begin.
   *
   * \param aMediaList - The media list that is being enumerated.
   *
   * \return CONTINUE to continue enumeration, CANCEL to cancel enumeration.
   *         JavaScript callers may omit the return statement entirely to
   *         continue the enumeration.
   */
  unsigned short onEnumerationBegin(in sbIMediaList aMediaList);

  /**
   * \brief Called once for each item in the enumeration.
   *
   * \param aMediaList - The media list that is being enumerated.
   * \param aMediaItem - The media item.
   *
   * \return CONTINUE to continue enumeration, CANCEL to cancel enumeration.
   *         JavaScript callers may omit the return statement entirely to
   *         continue the enumeration.
   */
  unsigned short onEnumeratedItem(in sbIMediaList aMediaList,
                                  in sbIMediaItem aMediaItem);

  /**
   * \brief Called when enumeration has completed.
   *
   * \param aMediaList - The media list that is being enumerated.
   * \param aStatusCode - A code to determine if the enumeration was successful.
   */
  void onEnumerationEnd(in sbIMediaList aMediaList,
                        in nsresult aStatusCode);
};

