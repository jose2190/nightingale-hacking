/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbILibraryLoader.idl
 * \brief Definition of the sbILibraryLoader interface
 * \sa sbILibrary.idl
 */

#include "nsISupports.idl"

interface sbILibrary;
interface sbILibraryManager;

/**
* \interface sbILibraryLoader
* \brief [USER CODE SHOULD NOT REFERENCE THIS CLASS]
* \sa sbILibraryManager, sbILibrary
*/
[scriptable, uuid(816e9cbe-e635-4abc-944f-aa4fa5ec918a)]
interface sbILibraryLoader : nsISupports
{
  /**
   * \brief Called when the loader sohould register all startup libraries with
   *        the Library Manager.
   *
   * \param aLibraryManager - The Library Manager is provided for convenience.
   */
  void onRegisterStartupLibraries(in sbILibraryManager aLibraryManager);

  /**
   * \brief Called when a user action has altered the startup status of one of
   *        the libraries controlled by this loader.
   *
   * \param aLibrary - The library whose startup status was altered.
   * \param aLoadAtStartup - The new status requested.
   *
   * \throw NS_ERROR_NOT_AVAILABLE if the library is not supported.
   */
  void onLibraryStartupModified(in sbILibrary aLibrary,
                                in boolean aLoadAtStartup);
};

%{C++

#include <nsICategoryManager.h>
#include <nsIComponentManager.h>
#include <nsIFile.h>

#include <nsCOMPtr.h>
#include <nsServiceManagerUtils.h>
#include <nsStringGlue.h>
#include <nsXPCOMCID.h>

#define SB_LIBRARY_LOADER_CATEGORY "songbird-library-loader"

/**
 * Put this in your module definition file. Give your class name and
 * description for the arguments. Then your moduleInfo should look something
 * like this:
 *
 *   NS_GENERIC_FACTORY_CONSTRUCTOR(sbSampleLoader);
 *   SB_LIBRARY_LOADER_REGISTERSELF(sbSampleLoader, SB_SAMPLELOADER_CLASSNAME);
 *
 *   static nsModuleComponentInfo components[] =
 *   {
 *     {
 *       SB_SAMPLELOADER_CLASSNAME, 
 *       SB_SAMPLELOADER_CID,
 *       SB_SAMPLELOADER_CONTRACTID,
 *       sbSampleLoaderConstructor,
 *       sbSampleLoaderRegisterSelf,
 *       sbSampleLoaderUnregisterSelf
 *     }
 *   };
 *
 *   NS_IMPL_NSGETMODULE(SampleLibraryLoader, components)
 *
 */
#define SB_LIBRARY_LOADER_REGISTRATION(_name, _desc)                           \
                                                                               \
  NS_METHOD                                                                    \
  _name##RegisterSelf(nsIComponentManager* aCompMgr,                           \
                      nsIFile* aPath,                                          \
                      const char* registryLocation,                            \
                      const char* componentType,                               \
                      const nsModuleComponentInfo* info)                       \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
                                                                               \
    rv = catMan->AddCategoryEntry(SB_LIBRARY_LOADER_CATEGORY,                  \
                                  _desc,                                       \
                                  info->mContractID,                           \
                                  PR_TRUE, PR_TRUE,                            \
                                  nsnull);                                     \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
                                                                               \
    return NS_OK;                                                              \
  }                                                                            \
                                                                               \
  NS_METHOD                                                                    \
  _name##UnregisterSelf(nsIComponentManager* aCompMgr,                         \
                        nsIFile* aPath,                                        \
                        const char* registryLocation,                          \
                        const nsModuleComponentInfo* info)                     \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
                                                                               \
    rv = catMan->DeleteCategoryEntry(SB_LIBRARY_LOADER_CATEGORY,               \
                                     _desc,                                    \
                                     PR_FALSE);                                \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
                                                                               \
    return NS_OK;                                                              \
  }
%}
