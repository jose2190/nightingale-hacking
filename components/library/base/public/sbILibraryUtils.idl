/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2009 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file sbILibraryUtils.idl
 * \brief Definition of the sbILibraryUtils interface
 */

#include "nsISupports.idl"

interface nsIFile;
interface nsIURI;

/**
 * \interface sbILibraryUtils
 * \brief Set of library utilities
 */

[scriptable, uuid(a7e0473e-1dd1-11b2-be3e-ab8233cc8f85)]
interface sbILibraryUtils : nsISupports
{
  /**
   * \brief Return a library content URI for the URI specified by aURI.
   *        A library content URI is a specially formatted URI for use within
   *        Songbird libraries and is formatted to facilitate searching for
   *        equivalent URI's (e.g., "file:" URI's are all lower case on
   *        Windows).
   *        URI's provided to createMediaItem and related methods must be
   *        library content URI's.
   *
   * \param aURI                URI for which to get content URI.
   *
   * \return                    Library content URI.
   */
  nsIURI getContentURI(in nsIURI aURI);

  /**
   * \brief Return a library content URI for the file specified by aFile.
   *        Special processing is required to convert an nsIFile to a library
   *        content URI (see bug 6227).  getFileContentURI must be used instead
   *        of nsIIOService.newFileURI for generating library content URI's.
   *
   * \param aFile               File for which to get content URI.
   *
   * \return                    Library content URI.
   */
  nsIURI getFileContentURI(in nsIFile aFile);
  
  /**
   * \brief Return the path in a way that is as canonical as possible for the
   *        filesystem it resides on; this may include things such as
   *        normalizing the case of the file name on case-insensitive
   *        filesystems.  The result should not be used for comparision (use
   *        getFileContentURI for that instead).
   *
   * \param aFile               File for which to normalize the path.
   *
   * \return                    Normalized path.
   */
  nsIFile getCanonicalPath(in nsIFile aFile);
};

