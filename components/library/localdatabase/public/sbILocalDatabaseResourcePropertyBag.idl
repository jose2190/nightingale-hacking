/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbILocalDatabasePropertyCache.idl
 * \brief Definition of the sbILocalDatabasePropertyCache interfaces
 */

#include "nsISupports.idl"

interface nsIStringEnumerator;

/**
 * \interface sbILocalDatabaseResourcePropertyBag
 * \brief [USER CODE SHOULD NOT REFERENCE THIS CLASS]
 */
[scriptable, uuid(758e5a56-0f5f-4e00-816f-189bf11ebe1f)]
interface sbILocalDatabaseResourcePropertyBag : nsISupports
{
  readonly attribute AString guid;
  readonly attribute unsigned long mediaItemId;
  readonly attribute nsIStringEnumerator ids;

  /**
   * \brief Returns a property value by key.
   *
   * This method will *never* throw. If a value doesn't exist it will return a
   * special "void" string that behaves just like an empty string except that
   * the IsVoid() method will return PR_TRUE for those who care.
   */
  AString getProperty(in AString aPropertyID);

  /**
   * \brief Returns a property value by property database id.
   *
   * This method will *never* throw. If a value doesn't exist it will return a
   * special "void" string that behaves just like an empty string except that
   * the IsVoid() method will return PR_TRUE for those who care.
   */
  AString getPropertyByID(in unsigned long aPropertyDBID);

  AString getSortablePropertyByID(in unsigned long aPropertyDBID);

  AString getSearchablePropertyByID(in unsigned long aPropertyDBID);

  void setProperty(in AString aPropertyID, in AString aValue);

  void write();
};


