/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbILocalDatabaseSmartMediaList.idl
 * \brief Definition of the sbILocalDatabaseSmartMediaList interface
 * \sa sbIMediaList.idl
 */

#include "nsISupports.idl"
#include "sbIMediaList.idl"

interface sbIPropertyOperator;
interface sbILocalDatabaseSmartMediaList;

/**
 * \interface sbILocalDatabaseSmartMediaListCondition
 * \brief [USER CODE SHOULD NOT REFERENCE THIS CLASS]
 */
[scriptable, uuid(39b60b98-1b65-4e6e-866c-25b88127f8ad)]
interface sbILocalDatabaseSmartMediaListCondition : nsISupports
{
  /**
   * \brief The ID of the property used in this condition.
   */
  readonly attribute AString propertyID;

  /**
   * \brief The operator used in this condition
   * \sa sbIPropertyInfo
   */
  readonly attribute sbIPropertyOperator operator;

  /**
   * \brief The left value for this condition.
   * Only the operator BETWEEN requires a rightValue as well.
   */
  readonly attribute AString leftValue;

  /**
   * \brief The right value for this condition.
   * This value is only used in conjunction with the BETWEEN operator.
   * Trying to set this value when using a different operator will not fail
   * but will be ignored.
   */
  readonly attribute AString rightValue;

  /**
   * \brief The unit used to display the left and right values for
   * this condition. This is purely for display purposes, as the values
   * are always internally using the property's native unit. For instance,
   * the contentLengh property is recorded in bytes, but kB, MB, or GB
   * may be used as a display unit.
   */
  readonly attribute AString displayUnit;
};

[scriptable, function, uuid(4b3f9a5b-44d5-4384-8f4d-6f953013f877)]
interface sbILocalDatabaseSmartMediaListListener : nsISupports
{
  void onRebuild(in sbILocalDatabaseSmartMediaList aSmartMediaList);
};


/**
 * \interface sbILocalDatabaseSmartMediaList
 * \brief [USER CODE SHOULD NOT REFERENCE THIS CLASS]
 *
 * Methods and attributes that are specific to the smart media list are
 * implemented here.
 *
 * \sa sbIMediaList
 */
[scriptable, uuid(908211a1-2466-4642-bab9-75b228ff1532)]
interface sbILocalDatabaseSmartMediaList : sbIMediaList
{
  const unsigned long MATCH_TYPE_ANY  = 0;
  const unsigned long MATCH_TYPE_ALL  = 1;
  const unsigned long MATCH_TYPE_NONE = 2;

  const unsigned long LIMIT_TYPE_NONE  = 0;
  const unsigned long LIMIT_TYPE_ITEMS = 1;
  const unsigned long LIMIT_TYPE_USECS = 2;
  const unsigned long LIMIT_TYPE_BYTES = 3;

  const unsigned long NOTEXISTS_ASZERO = 0;
  const unsigned long NOTEXISTS_ASNULL = 1;

  /**
   * \brief Match any or all conditions.
   */
  attribute unsigned long matchType;

  /**
   * \brief The number of conditions added to this smart playlist.
   */
  readonly attribute unsigned long conditionCount;

  /**
   * \brief Type of limit to use
   */
  attribute unsigned long limitType;

  /**
   * \brief Value to apply to the limit type
   */
  attribute unsigned long long limit;

  /**
   * \brief Property to select limited results by
   */
  attribute AString selectPropertyID;

  /**
   * \brief Direction to sort the selection property, true for ascending,
   *        false for descending
   */
  attribute boolean selectDirection;

  /**
   * \brief Randomly select the items out of the entire result set.
   */
  attribute boolean randomSelection;

  /**
   * \brief Whether this smart media list updates automatically upon changes to
   * its source library.
   */
  attribute boolean autoUpdate;
  
  /**
   * \brief How to handle non-existent properties:
   *
   * NOTEXISTS_ASZERO : Properties that do not exist will equal 0 for numeric
   *                    fields, "" for text fields, FALSE for booleans, and
   *                    'infinitely far in the past' for dates (default).
   * NOTEXISTS_ASNULL : Properties that do not exist will not match any numeric,
   *                    text, boolean or date rule.
   */
   attribute unsigned long notExistsMode;

  /**
   * \brief Add a condition or limiting condition.
   */
  sbILocalDatabaseSmartMediaListCondition
    appendCondition(in AString aPropertyID,
                    in sbIPropertyOperator aOperator,
                    in AString aLeftValue,
                    in AString aRightValue,
                    in AString aDisplayUnit);

  /**
   * \brief Remove a condition.
   */
  void removeConditionAt(in unsigned long aConditionIndex);

  /**
   * \brief Get the condition at the specified index. Indexes start at 0.
   *        The last item is at conditionCount - 1.
   */
  sbILocalDatabaseSmartMediaListCondition
    getConditionAt(in unsigned long aConditionIndex);

  /**
   * \brief Clear all conditions
   */
  void clearConditions();

  /**
   * \brief Rebuild the smart media list contents from the conditions specificied.
   *        You should call this after you add/modify/remove any conditions.
   */
  void rebuild();
  
  void addSmartMediaListListener(in sbILocalDatabaseSmartMediaListListener aListener);
  void removeSmartMediaListListener(in sbILocalDatabaseSmartMediaListListener aListener);
  
  /**
   * \brief The guid of the source library (by default, the main library). Change this
   *        to select a different source library.
   */
  attribute AString sourceLibraryGuid;
};
