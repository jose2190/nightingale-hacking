/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

#include "nsISupports.idl"

interface sbIMediaItem;
interface sbILocalDatabaseResourcePropertyBag;

/**
* \interface sbIIdentityService sbIIdentityService.h
* \brief A service to provide identifiers for mediaitems
*/
[scriptable, uuid(3218b613-94cd-433a-a3fe-522ad4f1354e)]
interface sbIIdentityService : nsISupports
{
  /**
   * \brief HashString
   *          Hashes the param string using the same method as used when
   *          generating metadata hash identities.
   *          The methods described below calculate an identity by passing
   *          this function a metadata property string of the form:
   *            contentType|trackName|artistName|albumName|genre  for audio and
   *            contentType|trackName|artistName|albumName|genre  for video
   *          to this method and this format should also be used for any other
   *          identity calculations.
   *
   * \param aString   The string that will be hashed
   *
   * \return          The hash of the param aString
  */
  AString hashString(in AString aString);

  /**
   * \brief CalculateIdentityForMediaItem
   *          Generates an identifier for the param aMediaItem
   *          and that identifier is returned. If media item's content type is 
   *          not video or audio or the hash property values were not found or 
   *          empty, a void string is returned.
   *
   * \param aMediaItem    The mediaitem whose identity should be calculated
   *                      and returned
   * \return              An identifier for the param aMediaItem
   */
  AString calculateIdentityForMediaItem(in sbIMediaItem aMediaItem);

  /**
   * \brief CalculateIdentityForBag -
   *          Generates an identifier for the properties contained
   *          within the param aPropertyBag and that identifier is
   *          returned. If content type is not video or audio or the hash
   *          property values were not found or empty a void string is
   *          returned.
   *
   * \param aPropertyBag  The propertybag containing properties that
   *                      should be used to calculate a metadata hash
   *                      identity
   * \return              An identifier for the properties within
   *                      the param aPropertyBag. This may be a void string
   *                      if there are no property values to hash.
   */
  AString calculateIdentityForBag(in sbILocalDatabaseResourcePropertyBag aPropertyBag);

  /**
   * \brief SaveIdentityToMediaItem -
   *          Saves the param aIdentity to the param aMediaItem's propertybag
   *          which will automatically flush that value to the database
   *
   * \param aMediaItem    The mediaitem that will be associated with the
   *                      param aIdentity
   * \param aIdentity     The metadata hash identifier for the param
   *                      aMediaItem
   */
  void saveIdentityToMediaItem(in sbIMediaItem aMediaItem, in AString aIdentity);

  /**
   * \brief SaveIdentityToBag -
   *          Saves the param aIdentity to the propertybag which will
   *          automatically flush that value to the database for later retrieval
   *
   * \param aPropertyBag  The propertybag that will be associated with the
   *                      param aIdentity
   * \param aIdentity     The identity that should be saved in aPropertyBag
   */
  void saveIdentityToBag(in sbILocalDatabaseResourcePropertyBag aPropertyBag,
                         in AString aIdentity);
};
