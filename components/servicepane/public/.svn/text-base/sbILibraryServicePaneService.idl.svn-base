/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file sbILibraryServicePaneService.idl
 * \brief Interface to the library service pane provider
 */

#include "nsISupports.idl"

interface nsIArray;
interface sbIServicePaneNode;
interface sbILibrary;
interface sbILibraryResource;
interface sbIMediaListView;

/**
 * \interface sbILibraryServicePaneService
 * \brief Provides information about libraries and medialists needed by the service pane
 */
[scriptable, uuid(01b1d300-82ca-11df-8395-0800200c9a66)]
interface sbILibraryServicePaneService : nsISupports {

  /* \brief Suggest a library for creating a new media list
   *
   * \param aMediaListType string identifying a media list type, eg "simple"
   * \param aNode A service pane node to provide context for new list creation
   * \return a library, or null if this service can't suggest anything based on
   *         the given context and type.
   */
  sbILibrary suggestLibraryForNewList (in AString aMediaListType,
                                       in sbIServicePaneNode aNode);

  /* \brief Suggest a unique name for creating a new playlist
   *
   * \param aLibrary an sbILibrary.
   * \return a unique playlist name.
   */
  AString suggestNameForNewPlaylist (in sbILibrary aLibrary);

  /* \brief Attempts to create a service pane node for a given library.
   *
   * The node is created hidden. After you have parented or positioned your
   * node appropriately, show it by changing the hidden attribute to false
   * (node.hidden = false).
   *
   * The result is a service pane folder node, containing video, music, etc.
   * sub-nodes.  You may wish to hide irrelevant nodes before showing the parent
   * node.
   *
   * \param aLibrary an sbILibrary.
   * \return a service pane node that represents the given library, null
   *         if aLibrary is not an sbILibrary.
   */
  sbIServicePaneNode createNodeForLibrary (in sbILibrary aLibrary);

  /* \brief Attempt to get a service pane node for the given library resource
   *
   * \param aResource        an sbIMediaItem, sbIMediaItem, or sbILibrary
   * \param [optional] aType resource media type: "audio", "video", etc.
   * \return a service pane node that represents the given resource, if one
   *         exists. Note that in the case that more than one node related to a
   *         given library exists, it is not specified which node will be
   *         returned. However, nodes that are not hidden will be preferred.
   */
  sbIServicePaneNode getNodeForLibraryResource (in sbILibraryResource aResource,
                                                [optional] in AString aType);

  /**
   * \brief Return all service pane nodes related to the library resource
   *        specified by aResource.
   *
   * \param aResource an sbIMediaItem, sbIMediaItem, or sbILibrary
   * \return An nsIArray of service pane nodes representing the given resource.
   *         Note that in the case that more than one node is related to a given
   *         library, multiple nodes will be returned.
   */
  nsIArray getNodesForLibraryResource(in sbILibraryResource aResource);

  /**
   * \brief Attempt to get a service pane node for the given media list view
   *
   * \param aMediaListView the view for which to get the service pane node
   * \returns a service pane node that represents the given media list view
   *          or null if the node cannot be found
   */
  sbIServicePaneNode getNodeFromMediaListView (in sbIMediaListView aMediaListView);

  /**
   * \brief Attempt to get the content type of service pane node for the given
   *        media list view.
   *
   * \param aMediaListView the view for which to get the content type.
   * \returns the content type of service pane node that represents the given
   *          media list view or null if the type information is not available
   *          for the node.
   */
  AString getNodeContentTypeFromMediaListView (in sbIMediaListView aMediaListView);

  /* \brief Attempt to get a library resource for the given service pane node.
   *
   * Note that there is no guarantee that hidden service pane nodes
   * will have corresponding library resources
   *
   * \param aNode
   * \return a sbIMediaItem, sbIMediaItem, sbILibrary, or null
   */
  sbILibraryResource getLibraryResourceForNode (in sbIServicePaneNode aNode);

  /* \brief Set node read-only property.
   *
   * \param aNode Node to set.
   * \param aReadOnly If true, node is read-only.
   */
  void setNodeReadOnly (in sbIServicePaneNode aNode,
                        in boolean aReadOnly);
};
