/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
#include "nsISupports.idl"

/**       
 * \file IGlobalHotkeys.idl
 * \brief Global Hotkeys Interface file
 * This file contains interfaces used to implement global hotkey support. The main interface 
 * is sbIGlobalHotkeys, which lets you specify a key code and a combination of modifiers,
 * as well as an id string, and register these with a callback object. When the key is pressed
 * anywhere in the system (not just when the application is focused), the callback is called
 * and is given the id string.
 */

/**
 * \interface sbIGlobalHotkeyCallback IGlobalHotkeys.h
 * \brief Global hotkeys callback interface
 * This interface is used by callback objects to receive a notification when a 
 * registered hotkey is pressed anywhere in the system (not just when the application
 * is focused)
 * \sa sbIGlobalHotkeys
 */
[scriptable, uuid(6AFCACC5-9D63-499d-B8D0-B40C66859818)]
interface sbIGlobalHotkeyCallback : nsISupports
{
  /**
   * \brief Global hotkey callback method
   * This method is called when a registered global hotkey has been pressed anywhere in the system
   * (not just when the application is focused)
   * \param key_id The id for the hotkey, specified when the hotkey was registered
   * \sa sbIGlobalHotkeys, sbIGlobalHotkeys::addHotkey()
   */
  void onHotkey( in AString key_id );
};

/**
 * \interface sbIGlobalHotkeys IGlobalHotkeys.h
 * \brief Global hotkey registration/unregistration interface
 * This interface is used to register or unregister hotkey callbacks
 * \sa sbIGlobalHotkeyCallback
 */
[scriptable, uuid(284E14BF-5CE4-4434-A733-4379D27D799E)]
interface sbIGlobalHotkeys : nsISupports
{
  /**
   * \brief Global hotkey registration method
   * This method is used to register a hotkey.
   *
   * Hotkeys are specified via key code and modifiers, and an arbitrary id string is given 
   * back to the callback method.
   *
   * \param keyCode The keyboard code for the hotkey
   * \param altKey The state of the Alt key in combination with the keyboard code
   * \param ctrlKey The state of the Control key in combination with the keyboard code
   * \param shiftKey The state of the Shift key in combination with the keyboard code
   * \param metaKey The state of the Meta key in combination with the keyboard code
   * \param key_id The arbitrary id associated with this hotkey
   * \param cb The callback object to call when the hotkey is pressed
   * \sa removeHotkey, sbIGlobalHotkeyCallback, sbIGlobalHotkeyCallback::onHotkey()
   */
  void addHotkey( in PRInt32 keyCode, in PRBool altKey, in PRBool ctrlKey, in PRBool shiftKey, in PRBool metaKey, in AString key_id, in sbIGlobalHotkeyCallback cb );

  /**
   * \brief Global hotkey unregistration method
   * This method is used to unregister a hotkey that has been previously registered with AddHotkey.
   * \param key_id The id of the key to unregister
   * \sa addHotkey, removeAllHotkeys
   */
  void removeHotkey( in AString key_id );

  /**
   * \brief Global hotkeys unregistration method
   * This method is used to unregister all hotkeys that have been previously registered with addHotkey.
   * \sa addHotkey, removeHotkey
   */
  void removeAllHotkeys();
};

