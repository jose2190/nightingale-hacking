/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2009 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file sbITranscodeProfile.idl
 * \brief An interface for defining transcoding profiles
 */
#include "nsISupports.idl"

interface nsIArray;
interface nsIVariant;
interface nsIFile;

/**
 * \interface sbITranscodeProfile sbITranscodeProfile.h
 * \brief An object defining a transcoding profile.
 *       
 * \sa sbITranscodeJob
 */
[scriptable, uuid(497ccd50-ebb4-11de-8a39-0800200c9a66)]
interface sbITranscodeProfile : nsISupports
{
  /*
   * Types of transcode profile.
   *
   * Const: TRANSCODE_TYPE_UNKNOWN
   *
   * Const: TRANSCODE_TYPE_AUDIO
   *        Audio transcoding profile.
   *
   * Const: TRANSCODE_TYPE_IMAGE
   *        Image transcoding profile.
   *
   * Const: TRANSCODE_TYPE_AUDIO_VIDEO
   *        Video transcoding profile.
   */
  const unsigned long TRANSCODE_TYPE_UNKNOWN = 0;
  const unsigned long TRANSCODE_TYPE_AUDIO = 1;
  const unsigned long TRANSCODE_TYPE_IMAGE = 2;
  const unsigned long TRANSCODE_TYPE_AUDIO_VIDEO = 3;

  const unsigned long TRANSCODE_PRIORITY_LOWEST = 0;
  const unsigned long TRANSCODE_PRIORITY_LOW = 1000;
  const unsigned long TRANSCODE_PRIORITY_MEDIUM = 2000;
  const unsigned long TRANSCODE_PRIORITY_HIGH = 3000;
  const unsigned long TRANSCODE_PRIORITY_HIGHEST = 4000;

  /*
   * \brief An opaque string uniquely identifying this profile.
   *
   * Generally this would be stored in preferences, etc in order to fetch the
   * same profile later.
   */
  attribute AString id;

  /*
   * \brief A value representing how desirable using this profile is.
   *
   * When a user has not explicitly selected a profile to encode with,
   * encoding will use the highest-priority profile available.
   * 
   * The priority MAY be one of the constants defined here, but can also
   * use intermediate values if desired.
   */
  attribute unsigned long priority;

  /* \brief A human-readable description of what this profile is for 
   *
   * Example: "MP3 Audio"
   */
  attribute AString description;

  /* \brief Type of transcoding profile; should be one of the TRANSCODE_TYPE_*
     constants
   */
  attribute unsigned long type;

  /**
   * \brief The file extension to use for this profile
   * May be empty to indicate no extension is to be used.
   *
   * Examples:
   *   "ogg", "mp3", "avi"
   */
  attribute ACString fileExtension;

  /* \brief The container format to put the transcoded media in (if any).

     Examples:
       "appliction/ogg", "audio/mpeg", "video/mp4", "video/x-ms-asf",
       "audio/x-wav"

     May be an empty string to indicate that no container is desired.

     Note that 'tag' formats such as id3 are considered as container formats
     here for simplicity.
   */
  attribute AString containerFormat;

  /* \brief The audio codec to use (if any).
     
     Examples:
       "audio/x-vorbis", "audio/aac", "audio/mpeg", "audio/x-ms-wma",
   
     May be an empty string to indicate that raw audio should be stored.
   */
  attribute AString audioCodec;

  /* \brief The video codec to use (if any). e.g "video/x-ms-wmv", "video/h264",
            "video/theora"
   */
  attribute AString videoCodec;

  attribute nsIArray audioProperties;
  attribute nsIArray videoProperties;

  attribute nsIArray containerProperties;

  /* Additional attributes on the format type (sbITranscodeProfileAttribute) */
  attribute nsIArray containerAttributes;
  /* Additional attributes on the video type (sbITranscodeProfileAttribute) */
  attribute nsIArray videoAttributes;
  /* Additional attributes on the audio type (sbITranscodeProfileAttribute) */
  attribute nsIArray audioAttributes;
};

/**
 * Transcoding profile data for the configurator algorithm v1
 */
[scriptable, uuid(43E0BD54-33F1-4C6F-9826-5E70BE6D6280)]
interface sbITranscodeEncoderProfile : sbITranscodeProfile {
  /**
   * Get the priority of this encoder profile, when used at a given priority
   * (some profiles may not be suitable for high quality encoding, for example)
   *
   * Priorities of zero will not be considered.
   * It is recommended to return a (small) positive value even for unsuitable
   * quality settings, as being able to transcode is better than not.
   *
   * @param aQuality the desired output quality, in the range 0 to 1 (inclusive)
   *
   * @return The priority for this encoder; zero indicates that the given
   * profile must not be used at this quality.
   */
  unsigned long getEncoderProfilePriority(in double aQuality);

%{COMMENT
  /* these live on sbITranscodeProfile for now */
  /**
   * \brief The container format to put the transcoded media in (if any).
   *
   * Examples:
   *   "application/ogg", "audio/mpeg", "video/mp4"
   *
   * May be an empty string to indicate that no container is desired.
   *
   * Note that 'tag' formats such as id3 are considered as container formats
   * here for simplicity.
   */
  attribute AString containerFormat;

  /**
   * \brief The audio codec to use (if any).
   *
   * Examples:
   *   "audio/x-vorbis", "audio/mpeg", "audio/x-raw-int"
   *
   * May be an empty string to indicate that no audio should be stored.
   */
  attribute AString audioCodec;

  /**
   * \brief The video codec to use (if any).
   *
   * Examples:
   *  "video/mpeg", "video/x-theora", "video/x-yuv"
   *
   * May be an empty string to indicate that no video should be stored.
   */
  attribute AString videoCodec;
%}COMMENT

  /**
   * Get the desired audio bitrate for a given quality setting
   *
   * @param aQuality the desired quality, in the range 0 to 1 (inclusive)
   * @return the desired bitrate, in bits per second
   */
  double getAudioBitrate(in double aQuality);

  /**
   * Get the desired video bits per pixel for a given quality setting
   *
   * @param aQuality the desired quality, in the range 0 to 1 (inclusive)
   * @return the desired bits per pixel; this value may be less than 1
   */
  double getVideoBitsPerPixel(in double aQuality);
}; 


%{C++
#define SONGBIRD_TRANSCODEPROFILE_DESCRIPTION             \
  "Songbird Transcode Profile Component"
#define SONGBIRD_TRANSCODEPROFILE_CONTRACTID              \
  "@songbirdnest.com/Songbird/Transcode/Profile;1"
#define SONGBIRD_TRANSCODEPROFILE_CLASSNAME               \
  "Songbird Transcode Profile"
#define SONGBIRD_TRANSCODEPROFILE_CID                     \
  {0xdc50c9ab, 0x63ec, 0x4d6a, {0xa9, 0xd1, 0x79, 0x07, 0xbc, 0xe3, 0x33, 0x24}}

%}

[scriptable, uuid(2747feca-25af-4509-8ec5-800b10817d0b)]
interface sbITranscodeProfileAttribute : nsISupports
{
  /* \brief The attribute's name */
  readonly attribute AString name;

  /* \brief The attribute's value */
  readonly attribute nsIVariant value;
};

[scriptable, uuid(22bd3898-1dd2-11b2-821f-9742fbc125a7)]
interface sbITranscodeProfileProperty : nsISupports
{
  /* \brief The name of the property */
  readonly attribute AString propertyName;

  /* \brief The minimum value this property may have, if any */
  readonly attribute nsIVariant valueMin;
  /* \brief The maximum value this property may have, if any */
  readonly attribute nsIVariant valueMax;

  /* \brief The current value of this property (initially the default) */
  attribute nsIVariant value;
  
  /**
   * \brief If true, this property should not be output (instead it should
   * be used for calcuating a different property)
   */
  readonly attribute boolean hidden;
  
  /**
   * If set, this property should be set based on another property
   * Values beginning with @ indicate a special mapping; for example,
   * "@bitrate" on a video property might read from sbIMediaFormatVideo::bitrate
   */
  readonly attribute ACString mapping;
  
  /**
   * A scale value (expressed as a fraction) for the mapping
   */
  readonly attribute ACString scale;
};


/**
 * \interface sbITranscodeImageProfile sbITranscodeImageProfile.h
 * \brief An object defining the format to transcode a still image to.
 */
[scriptable, uuid(8e37f4a4-3ced-427e-9aa3-c9fd8c7509f1)]
interface sbITranscodeImageProfile : nsISupports
{
  /* Initialise a profile for image encoding */
  void Init(in AString mimetype, in unsigned long width, in unsigned long height);

  /* Mime type of the image (image/jpeg, image/png, etc.) */
  readonly attribute AString mimetype;

  /* Width of the image in pixels */
  readonly attribute unsigned long width;

  /* Height of the image in pixels */
  readonly attribute unsigned long height;
};

/**
 * \interface sbITranscodeProfileLoader
 * \brief An object that can create an sbITranscodeProfile from an XML
 *        description file.
 *       
 * \sa sbITranscodeJob
 */
[scriptable, uuid(18950502-f9e6-49e6-be38-d454dfd6cb81)]
interface sbITranscodeProfileLoader : nsISupports
{
  /* \brief Load a profile from the given XML profile description */
  sbITranscodeProfile loadProfile(in nsIFile aFile);
};

