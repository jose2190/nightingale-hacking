/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2010 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"

interface nsIVariant;

[scriptable, uuid(da597872-f2dd-43c3-8e0c-af0fd263ec28)]
interface sbIMediacoreAudioProcessorListener : nsISupports
{
  /* One of the following two functions will be called when a chunk of
   * decoded audio is available. This function will be called repeatedly
   * for every chunk of audio in the input media item.
   * 
   * If the format to use is constrained, only one of these functions will
   * be called. If not, either might be called depending on the source format
   * of the data.
   *
   * As this function will be called from the application's main thread, it is
   * important that the listener not block for an extended period of time.
   * If the analysis being done is expected to take more than a millisecond or
   * so, it's recommended that the work be moved to a background thread.
   *
   * 'sampleNumber' Is the number of the first sample in the data array.
   *                This is convertible to a timestamp (if desired) by dividing
   *                by the audio sample rate.
   * 'numSamples'   is the total number of samples (NOT samples per channel)
   *                in the data array.
   *                For example, if numSamples is 2048, and the audio is stereo,
   *                then there will be 2048 (sample-interleaved) float samples
   *                of audio in 'data', or 1024 frames of audio.
   *                The number of samples provided will usually be equal to
   *                the sbiMediacoreAudioProcessor's constraintBlockSize
   *                attribute, unless that attribute is set to zero (in which
   *                case the size is arbitrary). However, at the end of the
   *                stream, or before a gap (due to missing or corrupt data in
   *                the source file) it may be shorter.
   *                numSamples is guaranteed to be a multiple of the number of
   *                channels.
   * 'data'         The actual sample data. The format here is different for the
   *                two processing functions; see the documentation on each for
   *                details.
   */
   
   
  /* Receive floating point sample data. See above for detailed documentation.
   * 
   * Each value will typically be between -1 and 1, though minor excursions
   * from this range are possible, so if you wish to convert to integer values,
   * clamping is required. However, if you want integer values, it will generally
   * be easiest to constraint the output format to integer, and use the
   * onIntegerAudioDecoded() function instead.
   */
  void onFloatAudioDecoded(in unsigned long aSampleNumber,
                           in unsigned long aNumSamples,
                           [array, size_is(aNumSamples)] in float aSampleData);

  /* Receive signed 16 bit integer sample data. See above for detailed
   * documentation.
   *
   * Use this if your underlying processing functionality is designed to
   * operate on 16 bit integer samples.
   */
  void onIntegerAudioDecoded(in unsigned long aSampleNumber,
                             in unsigned long aNumSamples,
                             [array, size_is(aNumSamples)] in short aSampleData);

  /* Called when an event happens.
   *
   * See the event constants defined below for further information.
   */
  void onEvent(in unsigned long aEventType, in nsIVariant aDetails);

  /* Start event. Sent before any other events, and before any audio.
   *
   * When this is called, the audio format will be available on the
   * processor, so the listener can configure itself appropriately at
   * this time.
   *
   * The 'details' argument will be an sbIMediaFormatAudio object
   * describing the format of the audio to be delivered. The sample
   * rate and number of channels can be queried from this.
   */
  const unsigned long EVENT_START = 0x1;

  /* End Of Stream event. Sent after all audio has been decoded.
   * 
   * Audio processing will, unless processing is stopped beforehand by
   * calling stop() on the processor, always end with EITHER an EOS event,
   * or (if something goes wrong) an ERROR event.
   * Note that if no audio is present in the stream, then even though there's
   * nothing actually invalid about the file, the listener will receive an
   * ERROR event.
   *
   * The 'details' argument will be null.
   */
  const unsigned long EVENT_EOS = 0x2;

  /* Error event.
   * 
   * This event is sent if there is a fatal decoding error.
   * After this, processing will be halted and no further events
   * will be received.
   *
   * The 'details' argument will be an sbIMediacoreError containing
   * detailed information about what error occurred.
   *
   * Note: audio processing will ALWAYS end with either an EOS
   *       event or an ERROR event (unless stopped explicitly).
   */
  const unsigned long EVENT_ERROR = 0x3;

  /* Gap event.
   *
   * A gap event is sent whenever there is a discontinuity in decoded
   * audio. For example, if part of a file is corrupt, then that section
   * will be skipped over, and there will be a gap in the audio produced.
   *
   * Usually, this would be detectable by a discontinuity in the sample
   * numbers supplied with each buffer. However, with some formats, there
   * are no intrinsic timestamps, so after a gap event the provided
   * sampleNumbers will simply continue from where they were prior to the gap.
   * The gap event will still indicate that an error was found in the stream,
   * however.
   *
   * The 'details' argument will be null.
   */
  const unsigned long EVENT_GAP = 0x4;

  /* Format change event.
   *
   * This event will be sent if the format of the audio changes
   * in any way - the sample rate changing mid-stream, for example.
   *
   * The 'details' argument will be an sbIMediaFormatAudio object
   * describing the format of the audio to be delivered. The sample
   * rate and number of channels can be queried from this.
   */
  const unsigned long EVENT_FORMAT_CHANGE = 0x5;
};

