/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

#include "nsISupports.idl"

interface nsIVariant;

interface sbIMediacore;
interface sbIMediacoreError;
interface sbIMediacoreEvent;
interface sbIMediacoreMultibandEqualizer;
interface sbIMediacoreBalanceControl;

interface sbIMediacorePlaybackControl;
interface sbIMediacoreVolumeControl;

interface sbIMediacoreCapabilities;
interface sbIMediacoreStatus;

interface sbIMediacoreSequencer;

interface sbIMediacoreVideoWindow;

[scriptable, uuid(404c03dc-6553-4cf5-a356-fcee07ee0ab3)]
interface sbIMediacoreManager : nsISupports
{
  /**
   * The primary core is always used to play user content. 
   * 
   * If you need a mediacore for background tasks of any kind, it is 
   * preferable to create a new instance.
   */
  readonly attribute sbIMediacore primaryCore;

  readonly attribute sbIMediacoreBalanceControl  balanceControl;
  readonly attribute sbIMediacoreVolumeControl   volumeControl;

  readonly attribute sbIMediacoreMultibandEqualizer equalizer;
  readonly attribute sbIMediacorePlaybackControl    playbackControl;

  readonly attribute sbIMediacoreCapabilities    capabilities;
  readonly attribute sbIMediacoreStatus          status;
  
  readonly attribute sbIMediacoreVideoWindow     video;

  /**
   * The current sequencer used to generate and manage playback sequences.
   *
   * Setting the sequencer will have the following effect:
   *
   * 1. Current sequences remain unaffected.
   * 2. When playback of current sequences is complete, the new sequencer
   *    is used to generate the next sequence.
   */
  attribute sbIMediacoreSequencer sequencer;

  /**
   * Get (or create) the primary video window
   *
   * @param aCreate Create the window if it does not exist.
   * @param aWidthHint (Optional) Width of the video that will be shown
   * @param aHeightHint (Optional) Height of the video that will be shown
   * @note Both width and height hints have to be non-zero if you wish them to 
   *       be used to size the video window upon creation. If you do not use
   *       the hints, the video window will rely on a VIDEO_SIZE_CHANGED event
   *       to size itself properly.
   * @note This method will return null if aCreate is false and there is no
   *       video window available.
   */
  sbIMediacoreVideoWindow 
      getPrimaryVideoWindow(in boolean aCreate,
                            [optional] in unsigned long aWidthHint,
                            [optional] in unsigned long aHeightHint);

  /**
   * Create a new event
   * 
   * @param aType The type of the event; should be one of the COMMAND_* or
   *              EVENT_* constants on the sbIMediacoreEvent.
   *
   * @param aData (Optional) The data to pass to any listeners that would
   *              receive this event.
   *
   * @param aOrigin (Optional) Some indication of the source of the event.
   *
   * @param aError (Optional) An error associated with the event
   * 
   * @see sbIMediacoreEvent
   * @see sbIMediacoreEventTarget
   * @see sbIMediacoreEventListener
   */
  sbIMediacoreEvent createEvent(in unsigned long aType,
                                in sbIMediacore aOrigin,
                                [optional] in nsIVariant aData,
                                [optional] in sbIMediacoreError aError);
};

[uuid(f1a8315a-d745-49e4-bea7-01d66e914f43)]
interface sbPIMediacoreManager : nsISupports
{
  void setPrimaryCore(in sbIMediacore aMediacore);
};

%{C++

#define SB_MEDIACOREMANAGER_DESCRIPTION    \
  "Songbird Mediacore Manager"
#define SB_MEDIACOREMANAGER_CONTRACTID     \
  "@songbirdnest.com/Songbird/Mediacore/Manager;1"
#define SB_MEDIACOREMANAGER_CLASSNAME      \
  "sbMediacoreManager"
#define SB_MEDIACOREMANAGER_CID               \
{ /*{47bb93c8-dba7-464b-8f93-8d71659ab127}*/  \
  0x47bb93c8,                                 \
  0xdba7,                                     \
  0x464b,                                     \
  { 0x8f, 0x93, 0x8d, 0x71, 0x65, 0x9a, 0xb1, 0x27 } \
}

%}