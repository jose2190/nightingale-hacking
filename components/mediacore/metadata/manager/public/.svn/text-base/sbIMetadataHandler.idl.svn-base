/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
 * \file sbIMetadataHandler.idl
 * \brief An interface for reading/writing file metadata tags
 */
#include "nsISupports.idl"
#include "nsIChannel.idl"
#include "sbIPropertyArray.idl"

/**
 * \interface sbIMetadataHandler sbIMetadataHandler.h
 * \brief An object capable of manipulating the metadata tags for a media file
 *
 * User code requests a handler by calling 
 * sbIMetadataManager::getHandlerForMediaURL that then returns one of these.
 *
 * \sa sbIMetadataManager
 */
[scriptable, uuid(068500d6-0678-46f5-b69d-49dc02453a40)]
interface sbIMetadataHandler : nsISupports
{
  /**
   * \brief Constant for the type of image in the metadata, these are pulled
   *        from the taglib/attachedpictureframe.h
   */
  const PRUint32 METADATA_IMAGE_TYPE_OTHER              = 0x00;
  const PRUint32 METADATA_IMAGE_TYPE_FILEICON           = 0x01;
  const PRUint32 METADATA_IMAGE_TYPE_OTHERFILEICON      = 0x02;
  const PRUint32 METADATA_IMAGE_TYPE_FRONTCOVER         = 0x03;
  const PRUint32 METADATA_IMAGE_TYPE_BACKCOVER          = 0x04;
  const PRUint32 METADATA_IMAGE_TYPE_LEAFLETPAGE        = 0x05;
  const PRUint32 METADATA_IMAGE_TYPE_MEDIA              = 0x06;
  const PRUint32 METADATA_IMAGE_TYPE_LEADARTIST         = 0x07;
  const PRUint32 METADATA_IMAGE_TYPE_ARTIST             = 0x08;
  const PRUint32 METADATA_IMAGE_TYPE_CONDUCTOR          = 0x09;
  const PRUint32 METADATA_IMAGE_TYPE_BAND               = 0x0A;
  const PRUint32 METADATA_IMAGE_TYPE_COMPOSER           = 0x0B;
  const PRUint32 METADATA_IMAGE_TYPE_LYRICIST           = 0x0C;
  const PRUint32 METADATA_IMAGE_TYPE_RECORDINGLOCATION  = 0x0D;
  const PRUint32 METADATA_IMAGE_TYPE_DURINGRECORDING    = 0x0E;
  const PRUint32 METADATA_IMAGE_TYPE_DURINGPERFORMANCE  = 0x0F;
  const PRUint32 METADATA_IMAGE_TYPE_MOVIESCREENCAPTURE = 0x10;
  const PRUint32 METADATA_IMAGE_TYPE_COLOUREDFISH       = 0x11;
  const PRUint32 METADATA_IMAGE_TYPE_ILLUSTRATION       = 0x12;
  const PRUint32 METADATA_IMAGE_TYPE_BANDLOGO           = 0x13;
  const PRUint32 METADATA_IMAGE_TYPE_PUBLISHERLOGO      = 0x14;
  
  /**
   * \brief The Contract ID for the metadata handler.
   */
  readonly attribute ACString contractID;

  /**
   * \brief An array of metadata properties
   *
   * Metadata properties read from or to be written to the file.
   *
   * When the handler has successfully completed its read() operation, the
   * values attribute will be filled with the metadata from the url.
   */
  attribute sbIMutablePropertyArray props;

  /**
   * \brief Whether or not the object has completed its read/write operation
   *
   * This value is false until the handler completes its read/write operation.
   *
   * It is up to the implementor to determine if read/write calls should operate
   * asynchronously or by blocking.  The user of the handler should not attempt
   * to get the sbIPropertyArray object before the operation is completed.
   */
  readonly attribute PRBool completed;
  
  /**
   * \brief Whether or not this handler MUST be run on the main thread.
   *
   * Since nsIChannel and other dependencies are not thread safe, some 
   * sbIMetadataHandler implementations can not be run on background threads.
   */
  readonly attribute PRBool requiresMainThread;

  /**
   * \brief The object's nsIChannel
   *
   * The object is assigned an nsIChannel from the sbIMetadataManager after it
   * has successfully voted for an url.  In the Read call, the implementor may
   * choose to pull the url from the channel and use that directly, or open the
   * channel (either itself or using an sbIMetadataChannel as a helper) and
   * stream the data to be parsed.
   *
   * In general, for local files, it is faster to pull the url and handle the
   * metadata read immediately rather than open the channel.  For remote files,
   * it's far easier to just use the channel infrastructure already setup.
   */
  attribute nsIChannel channel;

  /**
   * \brief Vote to be the handler returned for the given url
   *
   * The sbIMetadataManager will instantiate one of every sbIMetadataHandler
   * subclass and ask it to vote on the given url.  Whichever handler returns
   * the highest vote will be used as the handler for the url.
   *
   * Values less than zero cause that handler to be ignored.
   *
   * At the moment, our handlers return -1, 0, or 1 (for "no," "maybe," and
   * "yes").
   *
   * \param aUrl The url upon which one should vote
   * \return The vote
   * \sa sbIMetadataManager
  */
  PRInt32 vote( in AString aUrl );

  /**
   * \brief Start the read operation
   *
   * After getting a handler from the sbIMetadataManager, the user code usually
   * calls read upon it, immediately.  The implementor may choose to handle the
   * request immediately or asynchronously.
   *
   * \return -1 if operating asynchronously, otherwise the number of metadata values read (0 on failure)
   */
  PRInt32 read();

  /**
   * \brief Start the write operation
   *
   * After getting a handler from the sbIMetadataManager, the user code may set
   * an sbIPropertyArray object into the handler and then call write to write
   * the abstract metadata map into the specific metadata requirements of the
   * file format supported by the handler.
   *
   * Note that the number of items written may not always equal the number of
   * items in the sbIPropertyArray object if the underlying file format does
   * not support the given keys.
   *
   * \return -1 if operating asynchronously, otherwise the number of metadata values written (0 on failure)
   */
  PRInt32 write();

  /**
   * \brief Reads an image from the metadata if any are available
   *
   * \param aType const type for the image to retrieve (see METADATA_IMAGE_TYPE*)
   * \param aMimeType Output parameter for mimetype of the image
   * \param aDataLen Output parameter for length of image data
   * \param aData Output parameter for binary data of image
   *
   * \example
   *   var handler = metadataManager.getHandlerForMediaURL(localPathURI.spec);
   *   var mimeTypeOutparam = {};
   *   var outSize = {};
   *   var imageData = handler.getImageData(Ci.sbIMetadataHandler
   *                                         .METADATA_IMAGE_TYPE_FRONTCOVER,
   *                                         mimeTypeOutparam,
   *                                         outSize);
   */
  void getImageData(in PRInt32 aType,
                    out AUTF8String aMimeType,
                    out unsigned long aDataLen,
                    [array,retval,size_is(aDataLen)] out octet aData);

  /**
   * \brief Writes an image to the metadata
   *
   * \param aType const type for the image to write (see METADATA_IMAGE_TYPE*)
   * \param aUrl is the file spec of the image to save to the metadata, use ""
   *             if you wish to remove all images of imageType from the metadata.
   *
   * \example
   *   var myNewImageFile = "file://home/user/test.png";
   *   var handler = metadataManager.getHandlerForMediaURL(localPathURI.spec);
   *   handler.setImageData(Ci.sbIMetadataHandler.METADATA_IMAGE_TYPE_FRONTCOVER,
   *                        myNewImageFile);
   */
  void setImageData(in PRInt32 aType, in AString aUrl);

  /**
   * \brief Be thou informst that one's sbIMetadataChannel has just received data
   *
   * Every time the underlying nsIChannel dumps data on the sbIMetadataChannel,
   * plus once more for when the nsIChannel reports a stop condition.
   *
   * This is a chance for the handler code to attempt to parse the datastream.
   *
   * \param aChannel The sbIMetadataChannel delivering data.  You'll have to QI for it.
   * \TODO consider removing.  sbIMetadataChannel appears to be unused.
   */
  void onChannelData( in nsISupports aChannel );

  /**
   * \brief Close down the internals of the handler, stop any asynchronous operations, free any allocations
   */
  void close();
};
