/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
* \file sbIMetadataChannel.idl
* \brief A wrapper for an nsIChannel that buffers the incoming data
*/
#include "nsISupports.idl"
#include "nsIStreamListener.idl"
#include "sbIMetadataHandler.idl"

interface nsIChannel;

/**
* \interface sbIMetadataChannel sbIMetadataChannel.h
* \brief A wrapper for an nsIChannel that buffers the incoming data
*
* Every time the channel reports it has data available (or a change in state)
* it will call the given sbIMetadataHandler::onChannelData method.
*
* This class provides buffered read methods for the handler to retrieve data.
*
* \sa sbIMetadataHandler
*/
[uuid(6CB7F8A0-29ED-424b-AEF6-B491A8784AF4)]
interface sbIMetadataChannel : nsIStreamListener
{
  /**
  * \brief The current read position (for the read methods)
  * \todo Make "SetPos()" work past the end of the buffer.  Right now, nothing is seekable.
  */
  attribute PRUInt64 pos;
  /**
  * \brief The current internal buffer position (everything the channel has sent)
  */
  readonly attribute PRUInt64 buf;
  /**
  * \brief The size of the file targeted by the nsIChannel
  */
  readonly attribute PRUInt64 size;
  /**
  * \brief If the datastream is seekable
  * \todo Make "GetSeekable()" work.  Right now, nothing is seekable.
  */
  readonly attribute PRBool seekable;
  /**
  * \brief If the nsIChannel has finished (by completion or error)
  */
  readonly attribute PRBool completed;
  /**
  * \brief Open the channel and start downloading the file
  *
  * An instance of sbIMetadataHandler passes itself and an nsIChannel into
  * this method in order to start transferring data across the channel.
  *
  * Every time the channel reports it has data available (or a change in state)
  * it will call the given sbIMetadataHandler::onChannelData method.
  *
  * \param aChannel The channel from which to download
  * \param aHandler The handler to be informed of the download progress
  */
  void open( in nsIChannel aChannel, in sbIMetadataHandler aHandler );
  /**
  * \brief Close the channel and free all references
  */
  void close();
  /**
  * \brief Skip forward in the read buffer
  * \param aDistance The number of bytes to skip forward in the buffer (you can pass negative numbers)
  */
  void skip( in PRUint64 aDistance );
  /**
  * \brief Read from the buffer
  * \param aBuffer The buffer into which to read
  * \param aSize The size of the buffer in bytes
  * \return The number of bytes read
  */
  PRUint32 read( in charPtr aBuffer, in PRUint32 aSize );
  /**
  * \brief Read a byte from the buffer
  * \return The byte read
  */
  char readChar();
  /**
  * \brief Read a 32bit int from the buffer
  * \return The value read
  */
  PRInt32 readInt32();
  /**
  * \brief Read a 32bit int from the buffer
  * \return The value read
  */
  PRInt64 readInt64();
};