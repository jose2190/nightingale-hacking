/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
* \file  sbISeekableChannel.idl
* \brief A seekable wrapper for an nsIChannel.
*/

#include "nsISupports.idl"

interface nsIChannel;
interface sbISeekableChannel;

/**
* \interface sbISeekableChannelListener sbISeekableChannel.h
* \brief A listener interface for sbISeekableChannel
*
* \sa sbISeekableChannel
*/

[uuid(873ABEF5-AEE5-468E-8896-7768A13DC9A7)]

interface sbISeekableChannelListener : nsISupports
{
  /**
  * \brief Be thou informst that one's sbISeekableChannel has just received data
  *
  * Every time the underlying nsIChannel dumps data on the sbISeekableChannel.
  *
  * This is a chance for the handler code to attempt to parse the datastream.
  *
  * \param aChannel The sbISeekableChannel delivering data.  You'll have to QI for it.
  */
  void onChannelDataAvailable( in sbISeekableChannel aChannel );
};


/**
* \interface sbISeekableChannel sbISeekableChannel.h
* \brief A seekable wrapper for an nsIChannel
*
* \sa sbISeekableChannel
*/

[uuid(873E0403-B0B1-4E6D-BD32-E4ED51492109)]

interface sbISeekableChannel : nsISupports
{
  /**
  * \brief The current read position (for the read methods)
  */
  attribute PRUInt64 pos;
  /**
  * \brief The size of the file targeted by the nsIChannel
  */
  readonly attribute PRUInt64 size;
  /**
  * \brief If the nsIChannel has finished (by completion or error)
  */
  readonly attribute PRBool completed;
  /**
  * \brief Open the channel and start downloading the file
  *
  * \param aChannel The channel from which to download
  * \param aListener The listener to be informed of the channel progress
  */
  void open( in nsIChannel aChannel, in sbISeekableChannelListener aListener );
  /**
  * \brief Close the channel and free all references
  */
  void close();
  /**
  * \brief Skip forward in the read buffer
  * \param aDistance The number of bytes to skip forward in the buffer (you can pass negative numbers)
  */
  void skip( in PRUint64 aDistance );
  /**
  * \brief Read from the buffer
  * \param aBuffer The buffer into which to read
  * \param aSize The size of the buffer in bytes
  * \return The number of bytes read
  */
  PRUint32 read( in charPtr aBuffer, in PRUint32 aSize );
  /**
  * \brief Read a byte from the buffer
  * \return The byte read
  */
  char readChar();
  /**
  * \brief Read a 32bit int from the buffer
  * \return The value read
  */
  PRInt32 readInt32();
  /**
  * \brief Read a 64bit int from the buffer
  * \return The value read
  */
  PRInt64 readInt64();
};