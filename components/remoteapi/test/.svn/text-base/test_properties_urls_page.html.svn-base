<!--
/*
 //
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->
<html>
  <head>
    <script>
function runTest(tester) {
  const SB_NS = "http://songbirdnest.com/data/1.0#";
  try {
    // All the standard properties
    var props = tester.props;

    // must have a uri-valid value
    var uriPropNames = [
      "primaryImageURL",
      "copyrightURL",
      "originURL",
      "contentURL"
    ];

    var library = songbird.mainLibrary;
    var list = library.createSimpleMediaList("TestList");
    var item = library.createMediaItem("http://example.com/foo");

    var sitelibrary = songbird.siteLibrary;
    var sitelist = sitelibrary.createSimpleMediaList("TestSiteList");
    var siteitem = sitelibrary.createMediaItem("http://example.com/foo");

    var testObjs = { sitelibrary: sitelibrary,
                     sitelist: sitelist,
                     siteitem: siteitem,
                     library: library,
                     list: list,
                     item: item };

    // should not be able to write to originURL or contentURL
    for ( var obj in testObjs ) {
      var foo = testObjs[obj];

      tester.log("");
      tester.log("---------------------------------------------------");
      tester.log("                  " + obj);
      tester.log("---------------------------------------------------");

      tester.log("");
      tester.log("Writing to the properties");
      tester.log("");

      // we're never allowed to write to originURL through wpapi
      try {
        foo.setProperty( SB_NS + "originURL", "http://example.com/FAIL" );
        tester.failNoThrow( "property (!w)\t originURL ERR: Able to write.");
      } catch (e) {
        tester.log( "property (!w)\t originURL" );
      }

      // we're never allowed to write to contentURL through wpapi
      try {
        foo.setProperty( SB_NS + "contentURL", "http://example.com/FAIL" );
        tester.failNoThrow( "property (!w)\t contentURL ERR: Able to write." );
      } catch (e) {
        tester.log( "property (!w)\t contentURL" );
      }

      tester.log("");
      tester.log("Reading the properties");
      tester.log("");

      // This assumes the values are not file:// urls. The default
      // values for each are:
      //   library/siteLibrary : null
      //   list/siteList       : null
      //   item/siteItem       : http://www.example.com/foo
      //
      try {
        var val = foo.getProperty( SB_NS + "originURL");
        tester.log( "property (ro)\t originURL is: " + val );
      } catch (e) {
        tester.failNoThrow( "property (!r)\t originURL " +
                            " ERR: Not able to read originURL" );
      }

      try {
        // for non-file siteitems and sitelists
        var val = foo.getProperty( SB_NS + "contentURL");
        if ( obj == "sitelist" || obj == "siteitem" ) {
          tester.log( "property (ro)\t contentURL is: " + val );
        } else {
          tester.failNoThrow( "property (!r)\t contentURL ERR: Able to read: " + val );
        }
      } catch (e) {
        // for sitelibraries - their contentURL is file:
        // all other mainlib stuff can't access contentURL
        if ( obj == "sitelibrary" ||
             obj == "library" ||
             obj == "list" ||
             obj == "item" ) {
          tester.log( "property (!r)\t contentURL" );
        } else {
          tester.failNoThrow( "property (ro)\t contentURL " +
                       " ERR: Not able to read site list/item contentURL" );
        }
      }

    }
  } catch (e) {
    tester.endRemoteAPITest(e);
  }

  songbird.downloadMediaList.clear();

  tester.endRemoteAPITest();
}

function runPageTest(tester) {
  setTimeout( function runPageTest_setTimeout() { runTest(tester) }, 0 );
}
    </script>
  </head>
  <body>test_properties_urls_page.html</body>
</html>

