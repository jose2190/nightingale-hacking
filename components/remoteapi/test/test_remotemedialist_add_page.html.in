<!--
/*
 //
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->
#filter substitution

<html>
  <head>
  <script>
function runTest(tester) {
  try {

    var dlList = songbird.downloadMediaList;
    var mainLib = songbird.mainLibrary;
    var mainList = mainLib.createSimpleMediaList("testRemoteMediaList");

    dlList.clear();
    mainList.clear();

    // Test addition by string with and without downloading
    tester.log("");
    tester.log("--------------------------------------------------");
    tester.log("          Testing addition by string");
    tester.log("");

    tester.log("    With download == true:");
    mainList.add( "http://localhost:@SONGBIRD_TEST_SERVER_PORT@/DJBLUE_-_Hear_Me.mp3", true );

    tester.assertEqual(mainList.length, 1);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    tester.log("    With download == false:");
    mainList.add("http://localhost:@SONGBIRD_TEST_SERVER_PORT@/jaspertine_-_Introvert.mp3", false);

    tester.assertEqual(mainList.length, 2);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    tester.log("    With default download:");
    mainList.add("http://localhost:@SONGBIRD_TEST_SERVER_PORT@/nyx_-_Undercover.mp3");

    tester.assertEqual(mainList.length, 3);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    tester.log("    With extra args:");
    mainList.add("http://localhost:@SONGBIRD_TEST_SERVER_PORT@/absent.mp3", true, "extra");

    tester.assertEqual(mainList.length, 4);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 2);
    tester.log("      dlList length is correct:   " + dlList.length);

    dlList.clear();
    mainList.clear();

    tester.assertEqual(mainList.length, 0);
    tester.assertEqual(dlList.length, 0);

    tester.log("--------------------------------------------------");
    tester.log("");

    tester.log("--------------------------------------------------");
    tester.log("          Testing addition by item");
    tester.log("");

    // Test addition by item with and without downloading
    var item = mainLib.createMediaItem("http://localhost:@SONGBIRD_TEST_SERVER_PORT@/DJBLUE_-_Hear_Me.mp3");
    tester.log("    With download == true:");
    mainList.add(item, true);

    tester.assertEqual(mainList.length, 1);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    item = mainLib.createMediaItem("http://localhost:@SONGBIRD_TEST_SERVER_PORT@/jaspertine_-_Introvert.mp3");

    tester.log("    Without download == false:");
    mainList.add(item, false);

    tester.assertEqual(mainList.length, 2);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    item = mainLib.createMediaItem("http://localhost:@SONGBIRD_TEST_SERVER_PORT@/nyx_-_Undercover.mp3");
    tester.log("    With default download:");
    mainList.add(item);

    tester.assertEqual(mainList.length, 3);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    item = mainLib.createMediaItem("http://localhost:@SONGBIRD_TEST_SERVER_PORT@/absent.mp3");
    tester.log("    With extra args:");
    mainList.add(item, true, "extra");

    tester.assertEqual(mainList.length, 4);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 2);
    tester.log("      dlList length is correct:   " + dlList.length);

    dlList.clear();
    mainList.clear();

    tester.assertEqual(mainList.length, 0);
    tester.assertEqual(dlList.length, 0);
    tester.log("--------------------------------------------------");
    tester.log("");

    tester.log("--------------------------------------------------");
    tester.log("          Testing addition by array");
    tester.log("");

    // Test addition by item with and without downloading
    var urls1 = ["http://localhost:@SONGBIRD_TEST_SERVER_PORT@/DJBLUE_-_Hear_Me.mp3"];
    var urls2 = ["http://localhost:@SONGBIRD_TEST_SERVER_PORT@/jaspertine_-_Introvert.mp3"];
    var urls3 = ["http://localhost:@SONGBIRD_TEST_SERVER_PORT@/nyx_-_Undercover.mp3"];
    var urls4 = ["http://localhost:@SONGBIRD_TEST_SERVER_PORT@/absent.mp3"];

    tester.log("    With download == true:");
    mainList.add(urls1, true);

    tester.assertEqual(mainList.length, 1);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);


    tester.log("    With download == false:");
    mainList.add(urls2, false);

    tester.assertEqual(mainList.length, 2);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    tester.log("    With default download:");
    mainList.add(urls3);

    tester.assertEqual(mainList.length, 3);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 1);
    tester.log("      dlList length is correct:   " + dlList.length);

    tester.log("    With extra args:");
    mainList.add(urls4, true, "extra");

    tester.assertEqual(mainList.length, 4);
    tester.log("      mainlist length is correct: " + mainList.length);
    tester.assertEqual(dlList.length, 2);
    tester.log("      dlList length is correct:   " + dlList.length);


    dlList.clear();
    mainList.clear();

    tester.assertEqual(mainList.length, 0);
    tester.assertEqual(dlList.length, 0);
    tester.log("--------------------------------------------------");
    tester.log("");

    // More, thorough failure cases in test_batchCalls_page.html
    tester.log("--------------------------------------------------");
    tester.log("          Testing failure cases");
    tester.log("");

    try {
      mainList.add();
      tester.failNoThrow("     FAIL: add() didn't throw.");
    } catch (e) {
      tester.log("    SUCCESS: add() failed: " + e);
    }

    try {
      mainList.add( "http://localhost:@SONGBIRD_TEST_SERVER_PORT@/nyx_-_Undercover.mp3", item );
      tester.failNoThrow("     FAIL: add(string, item) didn't throw.");
    } catch (e) {
      tester.log("    SUCCESS: add(string, item) failed: " + e);
    }

    try {
      mainList.add(item, item);
      tester.failNoThrow("     FAIL: add(item, item) didn't throw.");
    } catch (e) {
      tester.log("    SUCCESS: add(item, item) failed: " + e);
    }

    try {
      mainList.add( [item, item] );
      tester.failNoThrow("     FAIL: add( [item, item] ) didn't throw.");
    } catch (e) {
      tester.log("    SUCCESS: add( [item, item] ) failed: " + e);
    }

    tester.log("--------------------------------------------------");
    tester.log("");
  }
  catch(e) {
    tester.endRemoteAPITest(e);
  }
  tester.endRemoteAPITest();
}

function runPageTest(tester) {
  setTimeout(function runPageTest_setTimeout() { runTest(tester) }, 0);
}

</script>
  </head>
  <body>test_remotemedialist_add_page.html</body>
</html>
