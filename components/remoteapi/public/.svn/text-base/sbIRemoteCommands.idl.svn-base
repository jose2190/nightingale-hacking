/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */

/**
 * \file sbIRemoteCommands.idl
 * \brief 
 */

#include "nsISupports.idl"

interface sbIRemotePlayer;

/*
Class: Commands
The Commands Object allows remote web pages to add and remove commands.

The Commands Object is associated with a <MediaList>. This means that 
when <Commands> are modified, the modifications are scoped to the media list.
*/
/**
 * \interface sbIRemoteCommands
 * \brief An interface to specify playlist commands from remote web pages.
 *
 * TODO: Write this documentation
 *
 */
[scriptable, uuid(cff760df-5fe0-4657-8eb5-1d5d3ca12369)]
interface sbIRemoteCommands : nsISupports
{
  /*
  Group: Command Methods
  */

  /*
  Method: addCommand
  Add a command.
  
  Arguments:
    type - The type of the command.  This can be any one of
           "action", "separator", "value", or "submenu".
    id - The id of the command.
    name - The name of the command.
    tooltip - The tooltip for the command.
  */
  void addCommand(in AString aType, in AString aID, in AString aName, in AString aTooltip);

  /*
  Method: removeCommand
  Remove a command.
  
  Arguments:
    id - The id of the command.
  
  See Also:
    <addCommand>
  */
  void removeCommand(in AString aID);

  // Ew. this is so ugly. I'm hoping to be able to clean this up with nsIXPCScriptable
  void setCommandData( in unsigned long aNumCommands,
                       [const, array, size_is(aNumCommands)] in wstring aTypeArray,
                       [const, array, size_is(aNumCommands)] in wstring aIDArray,
                       [const, array, size_is(aNumCommands)] in wstring aNameArray,
                       [const, array, size_is(aNumCommands)] in wstring aTooltipArray);

  // the remotePlayer sets this after it creates it.
  [noscript] attribute sbIRemotePlayer owner;
};

