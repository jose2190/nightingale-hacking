/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

/**
 * \file sbIFileScan.idl
 * \brief Filesystem Scanning interfaces.
 *
 * sbIFileScanCallback
 *
 * sbIFileScanQuery
 *
 * sbIFileScan
 *
 */

#include "nsISupports.idl"
interface nsIArray;

/**
 * \interface sbIFileScanCallback 
 * \brief The callback to the sbIFileScanQuery interface
 *
 * This interface is meant to be implemented by user code.
 *
 * Create one of these objects to be informed of the progress of the media
 * scan.
 *
 * NOTE: This object's methods are called from the media scan thread.  Not
 * necessarily safe for javascript!
 *
 * \sa sbIFileScanQuery, sbIFileScan, FileScan.h
 */
[scriptable, uuid(e1cf5762-1dd1-11b2-bc1c-a0de92947c7a)]
interface sbIFileScanCallback : nsISupports
{
  /**
   * \brief The media scan is starting
   *
   * \sa onFileScanFile, onFileScanEnd, sbIFileScanQuery, sbIFileScan
   */
  void onFileScanStart(); /**/

  /**
   * \brief The media scan has found (yet another) file
   *
   * \param filePath The path to the file
   * \param fileCount The number of files found so far
   * \sa onFileScanStart, onFileScanEnd, sbIFileScanQuery, sbIFileScan
   */
  void onFileScanFile(in AString filePath, 
    in PRInt32 fileCount); /**/

  /**
   * \brief The media scan is complete
   *
   * \sa onFileScanStart, onFileScanFile, sbIFileScanQuery, sbIFileScan
   */
  void onFileScanEnd(); /**/
};

/**
 * \interface sbIFileScanQuery 
 * \brief An object to scan through the files of a folder (and optionally subfolders)
 *
 * This object is used to rapidly gather a list of all the files found under a
 * given directory path.  It runs from a separate thread.
 *
 * User code may call getCurrentScanPath() and getLastFileFound() from the main 
 * thread to get a periodic snapshot of the current progress of the scan.
 *
 * Execute a scan by creating a scan query, filling it out, and passing it to
 * the sbIFileScan interface for processing:
\verbatim
function ScanBeneathADirectory(aPath) {
  // Create the objects
  var aFileScan = Components.classes["@songbirdnest.com/Songbird/FileScan;1"]
    .createInstance(Components.interfaces.sbIFileScan);
  var aFileScanQuery = Components.classes["@songbirdnest.com/Songbird/FileScanQuery;1"]
    .createInstance(Components.interfaces.sbIFileScanQuery);

  // Setup the query
  aFileScanQuery.setDirectory(aPath);
  aFileScanQuery.setRecurse(true);
          
  // Execute the query
  aFileScan.submitQuery(aFileScanQuery);
  return aFileScanQuery;
}
\endverbatim
 *
 * \sa sbIFileScanCallback, sbIFileScan, FileScan.h
 */
[scriptable, uuid(E53F7F77-9576-46FC-9F25-0A5A05A7E9CA)]
interface sbIFileScanQuery : nsISupports
{
  attribute boolean searchHidden;

  /**
   * \brief Set the directory to scan
   *
   * \param strDirectory The directory to scan
   * \sa getDirectory, setRecurse, getRecurse
   */
  void setDirectory(in AString strDirectory); /**/

  /**
   * \brief Get the directory to scan
   *
   * \return The directory to scan
   * \sa setDirectory, setRecurse, getRecurse
   */
  AString getDirectory(); /**/

  /**
   * \brief Set the scan to run recursively under the given directory
   *
   * \param bRecurse If true, scan subdirectories
   * \sa setDirectory, getDirectory, getRecurse
   */
  void setRecurse(in PRBool bRecurse); /**/

  /**
   * \brief Whether or not the scan will run recursively
   *
   * \return If true, scan subdirectories
   * \sa setDirectory, getDirectory, setRecurse
   */
  PRBool getRecurse(); /**/

  void addFileExtension(in AString strExtension);

  /**
   * \brief Add an extension that will not be added to the final discovered
   *        paths but will set the |flaggedExtensionsFound| attribute to true
   *        if a file with the specified extension is found during the scan.
   */
  void addFlaggedFileExtension(in AString strExtension);

  /**
   * \brief Returns true if a flagged file extension set in
   *        |addFlaggedFileExtension()| was found during the file scan.
   */
  readonly attribute boolean flaggedExtensionsFound;

  /**
   * \brief Set the callback object for the scan
   *
   * \param pCallback The callback object
   * \sa sbIFileScanCallback, getCallback
   */
  void setCallback(in sbIFileScanCallback pCallback); /**/

  /**
   * \brief Get the callback object for the scan
   *
   * \return The callback object
   * \sa sbIFileScanCallback, setCallback
   */
  sbIFileScanCallback getCallback(); /**/

  /**
   * \brief Get the number of files found
   *
   * \return The number of files found
   * \sa getFilePath
   */
  PRUint32 getFileCount(); /**/

  /**
   * \brief Get the number of flagged files found.
   */
  PRUint32 getFlaggedFileCount();

  /**
   * \brief USER CODE SHOULD NOT REFERENCE THIS METHOD
   */
  void addFilePath(in AString strFilePath); /**/

  /**
   * \brief Get the N'th file from the results of the scan
   *
   * Don't call this while isScanning() is true.
   *
   * \param nIndex The index of the files array to retrieve
   * \sa getFileCount
   */
  AString getFilePath(in PRUint32 nIndex); /**/

  /**
   * \brief Get the N'th flagged file from the results of the scan.
   *
   * NOTE: Don't call this while |isScanning()| is true.
   *
   * \param nIndex the Index of the files array to retrieve
   * \sa getFlaggedFileCount
   */
  AString getFlaggedFilePath(in PRUint32 nIndex);

  /**
   * \brief Whether or not the scan operation is executing
   *
   * \return True, if the scan is executing
   * \sa sbIDatabaseQuery
   */
  PRBool isScanning();

  /**
   * \brief USER CODE SHOULD NOT REFERENCE THIS METHOD
   */
  void setIsScanning(in PRBool bIsScanning);

  /**
   * \brief Returns the most recent file found by the scan
   *
   * This method may be called while the scan is executing to provide a 
   * periodic snapshot of the scan results.
   *
   * \return The path to the last file found
   * \sa getCurrentScanPath
   */
  AString getLastFileFound();

  /**
   * \brief Returns the most recent directory scanned
   *
   * This method may be called while the scan is executing to provide a 
   * periodic snapshot of the scan results.
   *
   * \return The path to the last file found
   * \sa getLastFileFound, setCurrentScanPath
   */
  AString getCurrentScanPath();

  /**
   * \brief USER CODE SHOULD NOT REFERENCE THIS METHOD
   */
  void setCurrentScanPath(in AString strScanPath);

  /**
   * \brief Cancel the current scanning loop
   */
  void cancel();

  /**
   * \brief
   */
  nsIArray getResultRangeAsURIStrings(in unsigned long aStartIndex,
                                      in unsigned long aEndIndex);

  /**
   * \brief USER CODE SHOULD NOT REFERENCE THIS METHOD
   */
  PRBool isCancelled();

  /**
   * If true, URLs are preprocessed to become library content URIs (ie,
   * lowercase on win32). Default is TRUE.
   */
  attribute boolean wantLibraryContentURIs;

};

/**
 * \interface sbIFileScan
 * \brief The engine in which to execute sbIFileScanQuery objects
 *
 * Create a sbIFileScanQuery object, fill out its methods, create one of
 * these and pass the query to the scanner to begin executing.
 *
 * Optionally, you may skip the use of a sbIFileScanQuery object and just
 * handle the scan directly by calling scanDirectory() with your own
 * sbIFileScanCallback object.
 *
 * \sa sbIFileScanCallback, sbIFileScanQuery
 */
[scriptable, uuid(27431e35-b060-486e-ba58-76c5ae7f8c24)]
interface sbIFileScan : nsISupports
{ 
  /**
   * \brief Execute a sbIFileScanQuery object
   *
   * \param pQuery The query object to execute
   * \sa scanDirectory
   */
  void submitQuery(in sbIFileScanQuery pQuery);
  
  /**
   * Cleans up after ourselves. If you're using sbIFileScan in GC environment
   * please explicitly cleanup
   */
  void finalize();
};
