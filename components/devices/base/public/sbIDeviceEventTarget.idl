/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright© 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface sbIDeviceEvent;
interface sbIDeviceEventListener;

/**
 * \interface sbIDeviceEventTarget
 * \note Implementations of this interface must be threadsafe.
 */
[scriptable, uuid(877c03e8-b834-44de-b7c1-bcb5dd62d693)]
interface sbIDeviceEventTarget : nsISupports
{
  /**
   * Dispatch a given event.
   * The event will always be synchronously dispatched on the main (UI) thread.
   *
   * An event may only be dispatched once; it may not be re-used.
   *
   * @param aEvent the event to dispatch
   * @param aSync dispatch the event asynchronously (default false)
   * @return Undefined if the event was dispatched asynchronously
   *         True if the event has been dispatched (false if no listeners)
   */
  boolean dispatchEvent(in sbIDeviceEvent aEvent, [optional] in PRBool aAsync);

  /**
   * Add a event listener
   * 
   * If the event listener is added while an event is being dispatched, the new
   * listener will not be triggered until the next event is dispatched. (This is
   * true even if the new event is dispatched before the current listener
   * finishes; the new listener will see any nested events.)
   */
  void addEventListener(in sbIDeviceEventListener aListener);

  /**
   * Remove a event listener
   * 
   * If an event is currently being dispatched, the listener will not be
   * triggered for the event if it has not already done so.
   */
  void removeEventListener(in sbIDeviceEventListener aListener);
};
