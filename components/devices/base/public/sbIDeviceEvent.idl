/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set sw=2 :miv */
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

#include "nsISupports.idl"

interface nsIVariant;

interface sbIDeviceEventTarget;

/**
 * \interface sbIDeviceEvent
 * \note Implementations of this interface must be threadsafe.
 */
[scriptable, uuid(e2b7a9e0-1dd1-11b2-a9a7-89a1ae00953e)]
interface sbIDeviceEvent : nsISupports
{
  /**
   *
   */
  const unsigned long COMMAND_DEVICE_BASE         = 0x00000000;
  const unsigned long COMMAND_DEVICE_RESET        = COMMAND_DEVICE_BASE + 1;
  const unsigned long COMMAND_DEVICE_POWER_DOWN   = COMMAND_DEVICE_BASE + 2;
  const unsigned long COMMAND_DEVICE_POWER_UP     = COMMAND_DEVICE_BASE + 3;
  const unsigned long COMMAND_DEVICE_MEDIA_EJECT  = COMMAND_DEVICE_BASE + 4;
  const unsigned long COMMAND_DEVICE_MEDIA_FORMAT = COMMAND_DEVICE_BASE + 5;

  /**
   *
   */
  const unsigned long COMMAND_CONTROLLER_BASE  = 0x00020000;
  const unsigned long COMMAND_CONTROLLER_RESET = COMMAND_CONTROLLER_BASE + 1;

  /**
   *
   */
  const unsigned long COMMAND_MARSHALL_BASE  = 0x00040000;
  const unsigned long COMMAND_MARSHALL_RESET = COMMAND_MARSHALL_BASE + 1;

  /**
   *
   */
  const unsigned long COMMAND_MANAGER_BASE    = 0x00060000;
  const unsigned long COMMAND_MANAGER_REFRESH = COMMAND_MANAGER_BASE + 1;

  /**
   *
   */
  const unsigned long COMMAND_CLIENT_DEFINED = 0x20000000;

  /**
   * Device events
   */
  const unsigned long EVENT_DEVICE_BASE               = 0x40000000;

  // the device was connected
  const unsigned long EVENT_DEVICE_ADDED              = EVENT_DEVICE_BASE + 1;
  // the device was disconnected
  const unsigned long EVENT_DEVICE_REMOVED            = EVENT_DEVICE_BASE + 2;
  // the device was reset
  const unsigned long EVENT_DEVICE_RESET              = EVENT_DEVICE_BASE + 3;

  // some sort of storage media was inserted into the device
  const unsigned long EVENT_DEVICE_MEDIA_INSERTED     = EVENT_DEVICE_BASE + 4;
  // some sort of storage media was removed from the device
  // (note that there may be more than one, and some may still be in the device)
  const unsigned long EVENT_DEVICE_MEDIA_REMOVED      = EVENT_DEVICE_BASE + 5;

  const unsigned long EVENT_DEVICE_TRANSFER_START     = EVENT_DEVICE_BASE + 6;
  const unsigned long EVENT_DEVICE_TRANSFER_PROGRESS  = EVENT_DEVICE_BASE + 7;
  const unsigned long EVENT_DEVICE_TRANSFER_END       = EVENT_DEVICE_BASE + 8;

  // device state changes
  const unsigned long EVENT_DEVICE_MOUNTING_START      = EVENT_DEVICE_BASE + 9;
  const unsigned long EVENT_DEVICE_MOUNTING_PROGRESS   = EVENT_DEVICE_BASE + 10;
  const unsigned long EVENT_DEVICE_MOUNTING_END        = EVENT_DEVICE_BASE + 11;

  const unsigned long EVENT_DEVICE_READY               = EVENT_DEVICE_BASE + 12;

  const unsigned long EVENT_DEVICE_MEDIA_READ_START   = EVENT_DEVICE_BASE + 13;
  const unsigned long EVENT_DEVICE_MEDIA_READ_END     = EVENT_DEVICE_BASE + 14;
  const unsigned long EVENT_DEVICE_MEDIA_READ_FAILED  = EVENT_DEVICE_BASE + 15;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_START  = EVENT_DEVICE_BASE + 16;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_END    = EVENT_DEVICE_BASE + 17;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_FAILED = EVENT_DEVICE_BASE + 18;

  const unsigned long EVENT_DEVICE_INFO_CHANGED       = EVENT_DEVICE_BASE + 19;

  // device transfer errors
  const unsigned long EVENT_DEVICE_MEDIA_READ_UNSUPPORTED_TYPE  = EVENT_DEVICE_BASE + 20;
  const unsigned long EVENT_DEVICE_MEDIA_WRITE_UNSUPPORTED_TYPE = EVENT_DEVICE_BASE + 21;

  // device general errors
  const unsigned long EVENT_DEVICE_ACCESS_DENIED        = EVENT_DEVICE_BASE + 22;
  const unsigned long EVENT_DEVICE_NOT_ENOUGH_FREESPACE = EVENT_DEVICE_BASE + 23;
  const unsigned long EVENT_DEVICE_NOT_AVAILABLE        = EVENT_DEVICE_BASE + 24;

  // device generic catch-all error
  const unsigned long EVENT_DEVICE_ERROR_UNEXPECTED     = EVENT_DEVICE_BASE + 25;

  // device generic state changed
  const unsigned long EVENT_DEVICE_STATE_CHANGED        = EVENT_DEVICE_BASE + 26;

  // device preferences changed
  const unsigned long EVENT_DEVICE_PREFS_CHANGED        = EVENT_DEVICE_BASE + 27;

  // device transcoding states
  const unsigned long EVENT_DEVICE_TRANSCODE_START      = EVENT_DEVICE_BASE + 28;
  const unsigned long EVENT_DEVICE_TRANSCODE_PROGRESS   = EVENT_DEVICE_BASE + 29;
  const unsigned long EVENT_DEVICE_TRANSCODE_END        = EVENT_DEVICE_BASE + 30;

  // device transcoding errors
  // the .data should be a nsIPropertyBag, with the optional properties:
  // "mediacore-error": the sbIMediacoreError
  // "message": a message to display to the user
  // "item": associated sbIMediaItem
  const unsigned long EVENT_DEVICE_TRANSCODE_ERROR      = EVENT_DEVICE_BASE + 31;

  // device library events
  const unsigned long EVENT_DEVICE_LIBRARY_ADDED       = EVENT_DEVICE_BASE + 32;
  const unsigned long EVENT_DEVICE_LIBRARY_REMOVED     = EVENT_DEVICE_BASE + 33;
  const unsigned long
    EVENT_DEVICE_DEFAULT_LIBRARY_CHANGED               = EVENT_DEVICE_BASE + 34;

  // device formatting events
  const unsigned long EVENT_DEVICE_FORMATTING_START    = EVENT_DEVICE_BASE + 35;
  const unsigned long EVENT_DEVICE_FORMATTING_PROGRESS = EVENT_DEVICE_BASE + 36;
  const unsigned long EVENT_DEVICE_FORMATTING_END      = EVENT_DEVICE_BASE + 37;

  // file that you were trying to transfer is missing
  const unsigned long EVENT_DEVICE_FILE_MISSING        = EVENT_DEVICE_BASE + 38;

  // events for device scans
  const unsigned long EVENT_DEVICE_SCAN_START          = EVENT_DEVICE_BASE + 39;
  const unsigned long EVENT_DEVICE_SCAN_END            = EVENT_DEVICE_BASE + 40;

  // special before device added event.
  const unsigned long EVENT_DEVICE_BEFORE_ADDED        = EVENT_DEVICE_BASE + 41;

  // Sync management change events
  const unsigned long EVENT_DEVICE_SYNC_TEMP_MODIFIED   = EVENT_DEVICE_BASE + 42;
  const unsigned long EVENT_DEVICE_SYNC_SETTINGS_CHANGED= EVENT_DEVICE_BASE + 43;
  const unsigned long EVENT_DEVICE_SYNC_SETTINGS_RESET  = EVENT_DEVICE_BASE + 44;

  // device downloading events
  const unsigned long EVENT_DEVICE_DOWNLOAD_START      = EVENT_DEVICE_BASE + 45;
  const unsigned long EVENT_DEVICE_DOWNLOAD_PROGRESS   = EVENT_DEVICE_BASE + 46;
  const unsigned long EVENT_DEVICE_DOWNLOAD_END        = EVENT_DEVICE_BASE + 47;

  // device download errors
  // the .data should be a nsIPropertyBag, with the optional properties:
  // "message": a message to display to the user
  // "item": associated sbIMediaItem
  const unsigned long EVENT_DEVICE_DOWNLOAD_ERROR      = EVENT_DEVICE_BASE + 48;

  /**
   *
   */
  const unsigned long EVENT_CONTROLLER_BASE = 0x40020000;

  /**
   *
   */
  const unsigned long EVENT_MARSHALL_BASE = 0x40040000;

  /**
   *
   */
  const unsigned long EVENT_MANAGER_BASE = 0x40060000;

  /**
   * \brief Base Firmware Event Value, this event is never sent.
   */
  const unsigned long EVENT_FIRMWARE_BASE = 0x40080000;

  /**
   * \brief Check for update start
   * \note <code>data</code> is null for this event.
   */
  const unsigned long EVENT_FIRMWARE_CFU_START  = EVENT_FIRMWARE_BASE + 1;
  /**
   * \brief Check for update end
   * \note <code>data</code> is a boolean indicating if there is an update
   *       available for download (true) or not (false).
   */
  const unsigned long EVENT_FIRMWARE_CFU_END    = EVENT_FIRMWARE_BASE + 2;
  /**
   * \brief Firmware download start
   * \note <code>data</code> is null for this event.
   */
  const unsigned long EVENT_FIRMWARE_DOWNLOAD_START     = EVENT_FIRMWARE_BASE + 3;
  /**
   * \brief Firmware download progress
   * \note <code>data</code> is the progress in percent (0 to 100).
   */
  const unsigned long EVENT_FIRMWARE_DOWNLOAD_PROGRESS  = EVENT_FIRMWARE_BASE + 4;
  /**
   * \brief Firmware download end
   * \note <code>data</code> is an sbIDeviceFirmwareUpdate object upon success.
   *       If there is an error during the download, the data will be null.
   */
  const unsigned long EVENT_FIRMWARE_DOWNLOAD_END       = EVENT_FIRMWARE_BASE + 5;
  /**
   * \brief Firmware update start
   */
  const unsigned long EVENT_FIRMWARE_UPDATE_START     = EVENT_FIRMWARE_BASE + 6;
  /**
   * \brief Firmware update end
   */
  const unsigned long EVENT_FIRMWARE_UPDATE_END       = EVENT_FIRMWARE_BASE + 7;
  /**
   * \brief Firmware write to device start
   */
  const unsigned long EVENT_FIRMWARE_WRITE_START    = EVENT_FIRMWARE_BASE + 8;
  /**
   * \brief Firmware write to device start
   */
  const unsigned long EVENT_FIRMWARE_WRITE_PROGRESS = EVENT_FIRMWARE_BASE + 9;
  /**
   * \brief Firmware write to device start
   */
  const unsigned long EVENT_FIRMWARE_WRITE_END      = EVENT_FIRMWARE_BASE + 10;

  /**
   * \brief Firmware verify device start
   */
  const unsigned long EVENT_FIRMWARE_VERIFY_START    = EVENT_FIRMWARE_BASE + 11;
  /**
   * \brief Firmware verify device progress
   */
  const unsigned long EVENT_FIRMWARE_VERIFY_PROGRESS = EVENT_FIRMWARE_BASE + 12;
  /**
   * \brief Firmware verify device end
   */
  const unsigned long EVENT_FIRMWARE_VERIFY_END      = EVENT_FIRMWARE_BASE + 13;

  /**
   * \brief Base value for firmware errors, this event is never sent.
   */
  const unsigned long EVENT_FIRMWARE_ERROR_BASE      = 0x40100000;
  /**
   * \brief Generic error
   * \note <code>data> is null for this event.
   */
  const unsigned long EVENT_FIRMWARE_ERROR_UNKNOWN  = EVENT_FIRMWARE_ERROR_BASE + 1;
  /**
   * \brief Check for update error.
   * \note <code>data</code> is null for this event.
   * \note The <code>data</code> for this event is likely to change in the future.
   */
  const unsigned long EVENT_FIRMWARE_CFU_ERROR      = EVENT_FIRMWARE_ERROR_BASE + 2;
  /**
   * \brief Firmware download error.
   * \note <code>data</code> is null for this event.
   * \note The <code>data</code> for this event is likely to change in the future.
   */
  const unsigned long EVENT_FIRMWARE_DOWNLOAD_ERROR = EVENT_FIRMWARE_ERROR_BASE + 3;
  /**
   * \brief Firmware update error.
   * \note <code>data</code> is null for this event.
   * \note The <code>data</code> for this event is likely to change in the future.
   */
  const unsigned long EVENT_FIRMWARE_UPDATE_ERROR   = EVENT_FIRMWARE_ERROR_BASE + 4;
  /**
   * \brief Firmware write error.
   * \note <code>data</code> is null for this event.
   * \note The <code>data</code> for this event is likely to change in the future.
   */
  const unsigned long EVENT_FIRMWARE_WRITE_ERROR    = EVENT_FIRMWARE_ERROR_BASE + 5;
  /**
   * \brief Firmware update requires recovery mode to be put on the device.
   * \note <code>data</code> is null for this event.
   * \note The <code>data</code> for this event is likely to change in the future.
   */
  const unsigned long EVENT_FIRMWARE_NEEDREC_ERROR = EVENT_FIRMWARE_ERROR_BASE + 6;

  /**
   *
   */
  const unsigned long EVENT_CLIENT_DEFINED = 0x60000000;

  /**
   * The type of the event
   */
  readonly attribute PRUint32 type;

  /**
   * The data being passed through the event
   */
  readonly attribute nsIVariant data;

  /**
   * The event target this event is happening on
   */
  readonly attribute sbIDeviceEventTarget target;

  /**
   * Something that invoked this event
   */
  readonly attribute nsISupports origin;

  /**
   * The device state at the time of the event
   */
   readonly attribute unsigned long deviceState;

  /**
   * The device substate at the time of the event
   */
   readonly attribute unsigned long deviceSubState;
};
