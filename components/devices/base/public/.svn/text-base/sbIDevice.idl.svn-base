/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file sbIDevice.idl
 */

#include "nsISupports.idl"

interface nsIInputStream;
interface nsIPropertyBag2;
interface nsIURI;
interface nsIVariant;

interface sbIDeviceCapabilities;
interface sbIDeviceContent;
interface sbIDeviceLibrary;
interface sbIDeviceProperties;
interface sbIDeviceParameters;
interface sbIDeviceStatus;
interface sbILibrary;
interface sbILibraryChangeset;
interface sbIMediaItem;

%{C++

#include <nsError.h>

// Device related errors
#define SB_ERROR_MEDIA_TYPE_NOT_SUPPORTED \
  NS_ERROR_GENERATE_FAILURE( NS_ERROR_MODULE_GENERAL, 1 )
#define SB_ERROR_DOWNLOAD_SIZE_UNAVAILABLE \
  NS_ERROR_GENERATE_FAILURE( NS_ERROR_MODULE_GENERAL, 2 )
#define SB_ERROR_DEVICE_DRM_FAILURE \
  NS_ERROR_GENERATE_FAILURE( NS_ERROR_MODULE_GENERAL, 3 )
#define SB_ERROR_DEVICE_DRM_CERT_FAIL \
  NS_ERROR_GENERATE_FAILURE( NS_ERROR_MODULE_GENERAL, 4 )

%}

/**
 * \interface sbIDeviceSupportsMediaItemCallback
 *
 * A callback interface for sbIDevice::supportsMediaItem
 */
[scriptable, function, uuid(cf163566-24b2-4ecd-4b9f-2a69725e22ad)]
interface sbIDeviceSupportsItemCallback : nsISupports
{
  void onSupportsMediaItem(in sbIMediaItem aMediaItem, in boolean aIsSupported);
};

/**
 * \interface sbIDevice
 * \note Implementations of this interface must be threadsafe.
 *
 * The main interface to all device objects
 */
[scriptable, uuid(fd0d4015-20e1-45b1-bd8a-a8f81d2bdfd2)]
interface sbIDevice : nsISupports
{
  /**
   * A human-readable name identifying the device. Optional.
   */
  readonly attribute AString name;

  /**
   * A human-readable name identifying the device product (e.g., vendor and
   * model number). Optional.
   */
  readonly attribute AString productName;

  /**
   * The id of the controller that created the device.
   */
  readonly attribute nsIDPtr controllerId;

  /**
   * The id of the device
   */
  readonly attribute nsIDPtr id;

  /**
   * Called when the device should initialize.
   */
  void connect();

  /**
   * Called when the device is to finalize.
   *
   * Device implementations must call sbIDeviceContent::Finalize
   */
  void disconnect();

  /**
   * Whether or not the device is currently connected.
   */
  readonly attribute boolean connected;

  /**
   * Whether or not the device's events are being processed in additional threads
   * (i.e. off the main UI thread).
   */
  readonly attribute boolean threaded;

  /**
   * Get a preference stored on the device.
   */
  nsIVariant getPreference(in AString aPrefName);

  /**
   * Sets a preference stored on the device.
   */
  void setPreference(in AString aPrefName,
                     in nsIVariant aPrefValue);

  /**
   * Get the capabilities of the device.
   */
  readonly attribute sbIDeviceCapabilities capabilities;

  /**
   * All the device's content.
   */
  readonly attribute sbIDeviceContent content;

  /**
   * The default library to use for device operations when no library is
   * specified.
   */
  attribute sbIDeviceLibrary defaultLibrary;

  /**
   * The library representing the primary device storage volume.  This is the
   * volume that stores device configuration and information (e.g., device icon,
   * .SBSettings.xml file).
   */
  readonly attribute sbIDeviceLibrary primaryLibrary;

  /**
   * The parameters with which the device was created
   */
  readonly attribute nsIPropertyBag2 parameters;

  /**
   * The device's properties.
   */
  readonly attribute sbIDeviceProperties properties;

  /**
   * Whether the media item is transcoded to the device directly.
   */
  readonly attribute boolean isDirectTranscoding;

  /**
   * Whether the device is currently performing a busy operation, like copying
   * or deleting. This is defined by the device as to what states determine the
   * device is busy.
   */
  readonly attribute boolean isBusy;

  /**
   * Whether it is safe to disconnect the device, generally this is when it
   * is not performing a critical operation like copying a file to/from the
   * device. This is also defined by the device as to what states determine the
   * device can be disconnected. Usefull for when the user wants to shutdown
   * the application.
   */
  readonly attribute boolean canDisconnect;

  /**
   * A more detailed state of the device, with information on what item/list it
   * is currently being worked on and includes possible substates for more
   * complicated states.
   * @see sbIDeviceStatus
   */
  readonly attribute sbIDeviceStatus currentStatus;

  /**
   * Does the implementation of this sbIDevice provide support for
   * reformatting the current device?
   */
  readonly attribute boolean supportsReformat;

  /**
   * Whether the device is busy, idle, syncing, mounting, etc.
   *
   * The state attribute is RW so that the sbDeviceRequestThreadQueue
   * can manage the device's state appropriately should a request be cancelled.
   * Careful consideration should be made before writing to the device's state
   * in other areas.
   *
   * @see sbIDeviceEvent::EVENT_DEVICE_MEDIA_READ_*
   * @see sbIDeviceEvent::EVENT_DEVICE_MEDIA_WRITE_*
   * @see STATE_*
   */
  attribute unsigned long state;
  readonly attribute unsigned long previousState;

  const unsigned long STATE_IDLE            = 0;  // Not doing anything
  const unsigned long STATE_SYNCING         = 1;  // Performing a sync
  // These are not related to syncing (used for manual mode)
  const unsigned long STATE_COPYING         = 2;  // Copying a single file
  const unsigned long STATE_DELETING        = 3;  // Deleting a single file
  const unsigned long STATE_UPDATING        = 4;  // Updating a single file
  const unsigned long STATE_MOUNTING        = 5;  // (un)Mounting the device
  const unsigned long STATE_DOWNLOADING     = 6;
  const unsigned long STATE_UPLOADING       = 7;
  const unsigned long STATE_DOWNLOAD_PAUSED = 8;
  const unsigned long STATE_UPLOAD_PAUSED   = 9;
  const unsigned long STATE_DISCONNECTED    = 10; // Device is disconnected
  const unsigned long STATE_BUSY            = 11; // Busy with unspecified
                                                  // operation
  const unsigned long STATE_CANCEL          = 12; // In process of canceling operation
  const unsigned long STATE_TRANSCODE       = 13; // Transcoding a file.
  const unsigned long STATE_FORMATTING      = 14; // Formatting the device.
  const unsigned long STATE_SYNC_PREPARING  = 15; // Preparing to sync
  const unsigned long STATE_SYNC_PLAYLIST   = 16; // Sync playlist
  const unsigned long STATE_COPY_PREPARING  = 17; // Preparing to copy
  const unsigned long STATE_SYNCING_TYPE    = 18; // Syncing types
  const unsigned long STATE_COPYING_MUSIC   = 19; // Copying music
  const unsigned long STATE_COPYING_VIDEO   = 20; // Copying video
  const unsigned long STATE_IMAGESYNC_PREPARING  = 21; // Preparing to sync
  const unsigned long STATE_COPYING_IMAGE        = 22; // Copying image

  const unsigned long STATE_USER            = 0x20000000;

  /**
   * Requests below 0x2000000 are reserved by the sbRequestThreadQueue for
   * internal use
   */
  const unsigned long REQUEST_FLAG_USER  = 0x80000000;
  const unsigned long REQUEST_FLAG_WRITE = 0x40000000;
  const unsigned long REQUEST_FLAG_READ  = 0x20000000;

  /* read requests */
  const unsigned long REQUEST_MOUNT        = REQUEST_FLAG_READ + 1;
  const unsigned long REQUEST_READ         = REQUEST_FLAG_READ + 2;
  const unsigned long REQUEST_EJECT        = REQUEST_FLAG_READ + 3;
  const unsigned long REQUEST_SUSPEND      = REQUEST_FLAG_READ + 4;

  /* write requests */
  const unsigned long REQUEST_WRITE         = REQUEST_FLAG_WRITE + 1;
  const unsigned long REQUEST_DELETE        = REQUEST_FLAG_WRITE + 2;
  const unsigned long REQUEST_SYNC          = REQUEST_FLAG_WRITE + 3;
  /* delete all files on the device */
  const unsigned long REQUEST_WIPE          = REQUEST_FLAG_WRITE + 4;
  /* move an item inside one playlist */
  const unsigned long REQUEST_MOVE          = REQUEST_FLAG_WRITE + 5;
  const unsigned long REQUEST_UPDATE        = REQUEST_FLAG_WRITE + 6;
  const unsigned long REQUEST_NEW_PLAYLIST  = REQUEST_FLAG_WRITE + 7;

  /* reset the device to its factory state */
  const unsigned long REQUEST_FACTORY_RESET = REQUEST_FLAG_WRITE + 8;

  /* format the device media */
  const unsigned long REQUEST_FORMAT        = REQUEST_FLAG_WRITE + 9;

  /* perform image sync */
  const unsigned long REQUEST_IMAGESYNC     = REQUEST_FLAG_WRITE + 10;

  /* update raw files on the device */
  const unsigned long REQUEST_WRITE_FILE    = REQUEST_FLAG_WRITE + 11;
  const unsigned long REQUEST_DELETE_FILE   = REQUEST_FLAG_WRITE + 12;

  /* Request indicating that a sync request has completed */
  const unsigned long REQUEST_SYNC_COMPLETE = REQUEST_FLAG_WRITE + 13;

  /**
   *
   */
  void submitRequest(in unsigned long aRequest, in nsIPropertyBag2 aRequestParameters);
  /**
   * Cancel all current pending requests
   */
  void cancelRequests();

  /**
   * Call sync() on all libraries attached to this device
   */
  void syncLibraries();

  /**
   * Can this media item be stored on this device?
   *
   * A supported file is either
   *   a) natively supported, or
   *   b) transcodable into one,
   * and is either
   *   a) not DRM protected, or
   *   b) is DRM protected and supported by the device
   *
   * \param aMediaItem the item to check
   * \param aCallback the callback to report to
   *
   * \note This method is asynchronous; the callback will be invoked on the
   *       main thread.
   */
  void supportsMediaItem(in sbIMediaItem aMediaItem,
                         in sbIDeviceSupportsItemCallback aCallback);

  /**
   * Eject device.
   */
  void eject();

  /**
   * Format device.
   */
  void format();

  /* Set the enabled state on a named warning dialog */
  void setWarningDialogEnabled(in AString aWarning, in boolean aEnabled);
  /* Get the enabled state on a named warning dialog */
  boolean getWarningDialogEnabled(in AString aWarning);
  /* Reset the enabled state of all warning dialogs */
  void resetWarningDialogs();

  /**
   * \brief Open an input stream for the URI specified by aURI.  The URI may be
   *        a generic device URI of the form
   *        "x-device:///<device-guid>/<device-library-guid>/path/to/file".
   *        Such URI's specify the target device with <device-guid> and the
   *        storage volume using the volume's device library with the guid
   *        <device-library-guid>.  Different device types may also accept
   *        device type specific URI's.
   *
   * \param aURI                URI for which to open input stream.
   *
   * \returns                   Opened input stream.
   * \throws NS_ERROR_NOT_AVAILABLE
   *                            No file exists for URI.
   */
  nsIInputStream openInputStream(in nsIURI aURI);

  /**
   * Imports changes from the device as specified in aImportChangeset
   *
   * \param aImportToLibrary The library to import the changes to
   * \param aImportChangeset The changes that are to be imported
   */
  void importFromDevice(in sbILibrary aImportToLibrary,
                        in sbILibraryChangeset aImportChangeset);

  /**
   * Exports the changes to a device as specified in aExportChangeset
   *
   * \param aDevLibrary The device library of the device to export changes to
   * \param aExportChangeset The changes to export
   */
  void exportToDevice(in sbIDeviceLibrary aDevLibrary,
                      in sbILibraryChangeset aExportChangeset);

};

