/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

#include "nsISupports.idl"

interface nsIArray;

interface sbIDevice;
interface sbIDeviceCapabilities;
interface sbIMediaItem;
interface sbITranscodeProfile;

/**
 * This interface is used to allow device manufacturers to specify various
 * information about their devices. Each implementation will register with the
 * category manager. The registrar types gives us a way to allow overriding
 * registrars.
 *
 * Implementations are to be thread safe.
 */
[scriptable, uuid(280ea825-00bd-4e02-910b-5fd7291903c2)]
interface sbIDeviceInfoRegistrar : nsISupports
{
  /* Types of registrars */
  /**
   * Not a registrar or not set
   */
  const PRUint32 NONE = 0;

  /**
   * Songbird provided registrars
   */
  const PRUint32 DEFAULT = 1;

  /**
   * General purpose third party registrars
   */
  const PRUint32 GENERIC = 2;

  /**
   * Device specific registrars
   */
  const PRUint32 DEVICE_SPECIFIC = 3;

  readonly attribute PRUint32 type;

  /**
   * \brief Allows a third party to augment the device capabilities.
   *
   * \param aDevice the device that the capabilities belong to
   * \param aDeviceCapabilities the capabilities to augment.
   * \return Returns true if handled
   */
  void addCapabilities(in sbIDevice aDevice,
                       in sbIDeviceCapabilities aDeviceCapabilities);

  /**
   * \brief Return the default name for the device.
   *
   * \param aDevice             Device for which to get default name.
   *
   * \return                    Device default name.
   */
  AString getDefaultName(in sbIDevice aDevice);

  /**
   * \brief Return the device folder URL for the device and content type
   *        specified by aDevice and aContentType.
   *
   * \param aDevice             Device for which to get folder.
   * \param aContentType        Requested folder content type.
   *
   * \return                    Device folder URL.
   */
  AString getDeviceFolder(in sbIDevice     aDevice,
                          in unsigned long aContentType);

  /**
   * \brief Return a list of "rules" to apply to files imported from aDevice.
   *        Each rule is itself an nsIArray of two nsISupportsStrings: a path
   *        and an "import type" of files residing (recursively) within that
   *        path.  The import type is a symbolic value that determines how to
   *        set the media item properties when importing items of that type
   *        from aDevice.
   *
   * \return  the list of import rules for aDevice.  This array can be stored
   *          with aDevice under SB_DEVICE_PROPERTY_IMPORT_RULES.
   */
  nsIArray getImportRules(in sbIDevice   aDevice);

  /**
   * \brief Return the mount timeout value in seconds for the device specified
   *        by aDevice.
   *
   * \param aDevice             Device for which to get mount timeout.
   *
   * \return                    Device mount timeout value in seconds.
   *
   * \throws NS_ERROR_NOT_AVAILABLE
   *                            Device mount timeout value not available.
   */
  unsigned long getMountTimeout(in sbIDevice aDevice);

  /**
   * \brief Return the excluded folder list as a comma separate string
   *
   * \return                    A comma separate list of relative folder paths
   */
  AString getExcludedFolders(in sbIDevice aDevice);

  /**
   * \brief Returns true if the device supports reformat.
   */
  boolean getDoesDeviceSupportReformat(in sbIDevice aDevice);

  /**
   * \brief Return true if only the media folders should be mounted rather than
   *        the entire storage volume.
   *
   * \return                    True if only the media folders should be
   *                            mounted.
   */
  boolean getOnlyMountMediaFolders(in sbIDevice aDevice);

  /**
   * \brief Return the storage device info list as an nsIArray of nsIPropertyBag
   *        elements.
   *
   * The following properties may be specified for each storage device:
   *
   *   lun                      Logical unit number (e.g., for USB MSC).
   *   scsiVendorID             SCSI vendor ID.
   *   scsiProductID            SCSI product ID.
   *   removable                "true" if storage is removable (e.g., SD-Card).
   *   primary                  "true" if storage device is primary storage.
   *
   * \param aDevice             Device for which to get storage info list.
   *
   * \return                    An nsIArray of nsIPropertyBag elements.
   */
  nsIArray getStorageDeviceInfoList(in sbIDevice aDevice);

  /**
   * \brief Return the device icon file URL for the device specified by aDevice.
   *
   * \param aDevice             Device for which to get icon file.
   *
   * \return                    Device icon file URL.
   */
  AString getDeviceIcon(in sbIDevice aDevice);

  /**
   * \brief Determines if the registrar is interested in this device
   * \param aDevice The device to check if the registrar is interested in
   */
  boolean interestedInDevice(in sbIDevice aDevice);
};

%{C++
#include "nsCOMPtr.h"
#include "nsIComponentManager.h"
#include "nsICategoryManager.h"
#include "nsIServiceManager.h"
#include "nsStringGlue.h"
#include "nsXPCOMCID.h"

class nsIFile;
struct nsModuleComponentInfo;

#define SB_DEVICE_INFO_REGISTRAR_CATEGORY "songbird-device-info-registrar"

/**
 * Put this in your module definition file. Give your class name. Then your
 * moduleInfo should look something like this:
 *
 *   NS_GENERIC_FACTORY_CONSTRUCTOR(sbSampleInfoRegistrar);
 *   SB_DEVICE_INFO_REGISTRAR_REGISTERSELF(sbSampleInfoRegistrar);
 *
 *   static nsModuleComponentInfo components[] =
 *   {
 *     {
 *       CLASSNAME,
 *       CID,
 *       CONTRACTID,
 *       sbSampleInfoRegistrarConstructor,
 *       sbSampleInfoRegistrarRegisterSelf,
 *       sbSampleInfoRegistrarUnregisterSelf
 *     }
 *   };
 *
 *   NS_IMPL_NSGETMODULE(SampleController, components)
 */

#define SB_DEVICE_INFO_REGISTRAR_REGISTERSELF(_name)                           \
                                                                               \
  NS_METHOD _name##RegisterSelf(nsIComponentManager* aCompMgr,                 \
                                nsIFile* aPath,                                \
                                const char* registryLocation,                  \
                                const char* componentType,                     \
                                const nsModuleComponentInfo* info);            \
                                                                               \
  NS_METHOD _name##UnregisterSelf(nsIComponentManager* aCompMgr,               \
                                  nsIFile* aPath,                              \
                                  const char* registryLocation,                \
                                  const nsModuleComponentInfo* info)

/**
 * Stick this in your implementation file. Give your class name.
 */
#define SB_DEVICE_INFO_REGISTRAR_REGISTERSELF_IMPL(_name, _desc)               \
                                                                               \
  NS_METHOD                                                                    \
  _name##RegisterSelf(nsIComponentManager* aCompMgr,                           \
                      nsIFile* aPath,                                          \
                      const char* registryLocation,                            \
                      const char* componentType,                               \
                      const nsModuleComponentInfo* info)                       \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    nsCAutoString prevEntry;                                                   \
    rv = catMan->AddCategoryEntry(SB_DEVICE_INFO_REGISTRAR_CATEGORY,           \
                                  _desc,                                       \
                                  info->mContractID,                           \
                                  PR_TRUE, PR_TRUE,                            \
                                  getter_Copies(prevEntry));                   \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    NS_WARN_IF_FALSE(prevEntry.IsEmpty(),                                      \
                     "Another controller was registered with that id!");       \
    return NS_OK;                                                              \
  }                                                                            \
                                                                               \
  NS_METHOD                                                                    \
  _name##UnregisterSelf(nsIComponentManager* aCompMgr,                         \
                        nsIFile* aPath,                                        \
                        const char* registryLocation,                          \
                        const nsModuleComponentInfo* info)                     \
  {                                                                            \
    nsresult rv;                                                               \
    nsCOMPtr<nsICategoryManager> catMan =                                      \
      do_GetService(NS_CATEGORYMANAGER_CONTRACTID, &rv);                       \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    rv = catMan->DeleteCategoryEntry(SB_DEVICE_INFO_REGISTRAR_CATEGORY,        \
                                     _desc,                                    \
                                     PR_TRUE);                                 \
    NS_ENSURE_SUCCESS(rv, rv);                                                 \
    return NS_OK;                                                              \
  }
%}

