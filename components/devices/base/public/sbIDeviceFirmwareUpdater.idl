/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2009 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

interface sbIDevice;
interface sbIDeviceEventListener;
interface sbIDeviceFirmwareHandler;
interface sbIDeviceFirmwareUpdate;

/**
 * \interface sbIDeviceFirmwareUpdater
 * \note The default implementation of this interface is threadsafe. 
 * \note The default implementation is a service and should
 *       Only be used as such.
 * \note The methods which take an sbIDeviceEventListener will also
 *       send events to the registered device listeners. You only need
 *       to use your own listener if you do not have a listener registered
 *       with the device.
 */
[scriptable, uuid(f6ad23c7-bd65-4fee-8536-0b47b493109e)]
interface sbIDeviceFirmwareUpdater : nsISupports
{
  /**
   * \brief Check for an update
   * \param aDevice - Device for which to check for an update
   * \param aDeviceVendorID [optional] - The device vendor ID. Set to 0 to fetch
   *                                     from device instance or if not available.
   * \param aDeviceProductID [optional] - The device product ID. Set to 0 to fetch
   *                                      from device instance or if not available.
   * \param aListener [optional] - Device listener to recieve events
   * \note The flow of events for this method is the following: 
   *       firmware check for update start, firmware check for update end. 
   * \note The end event will contain an boolean as it's data, it will either
   *       be true (update available) or false (no update for you).
   * \note Any error event that occurs will cancel this operation.
   */
  void checkForUpdate(in sbIDevice aDevice, 
                      in unsigned long aDeviceVendorID,
                      in unsigned long aDeviceProductID,
                      in sbIDeviceEventListener aListener);

  /**
   * \brief Download an update for a device.
   * \param aDevice - Device for which to download an update
   * \param aVerifyFirmwareUpdate - Verify firmware update after it's downloaded
   * \param aListener [optional] - Device listener to recieve events
   * \note The flow of events for this method is the following: 
   *       firmware download start, N * firmware download progress, 
   *       firmware download end. 
   * \note The end event will contain an sbIDeviceFirmwareUpdate, or null if there
   *       is no update available.
   * \note Any error event that occurs will cancel this operation.
   */
  void downloadUpdate(in sbIDevice aDevice, 
                      in boolean aVerifyFirmwareUpdate,
                      in sbIDeviceEventListener aListener);

  /**
   * \brief Verify a firmware update that was previously downloaded.
   * \param aDevice - The device associated with the firmware update
   * \param aFirmwareUpdate - The firmware update to verify
   * \param aListener [optional] - Device listener to recieve events
   * \note The flow of events for this method is the following: 
   *       firmware image verify start, N * firmware image verify progress,
   *       firmware image verify end.
   * \note Any error event that occurs will cancel this operation.
   */
  void verifyUpdate(in sbIDevice aDevice,
                    in sbIDeviceFirmwareUpdate aFirmwareUpdate,
                    in sbIDeviceEventListener aListener);

  /**
   * \brief Apply firmware update to device
   * \param aDevice - The device to update
   * \param aFirmwareUpdate - The firmware update to apply
   * \param aListener [optional] - Device listener to receive events
   * \note The flow of events for this method is the following: 
   *       firmware update start, firmware write start, N * firmware write progress,
   *       firmware write end, firmware verify start, N * firmware verify progress,
   *       firmware verify end, firmware update finished.
   * \note Any error event that occurs will cancel this operation.
   */
  void applyUpdate(in sbIDevice aDevice,
                   in sbIDeviceFirmwareUpdate aFirmwareUpdate,
                   in sbIDeviceEventListener aListener);

  /**
   * \brief Recover the device restoring it to factory state
   * \param aDevice - The device to restore to factory state
   * \param aFirmwareUpdate [optional] - The firmware update to apply to the device
   *                                     when recovering.
   * \param aDeviceVendorID [optional] - The device vendor ID. Set to 0 to fetch
   *                                     from device instance or if not available.
   * \param aDeviceProductID [optional] - The device product ID. Set to 0 to fetch
   *                                      from device instance or if not available.
   * \param aListener [optional] - Device listener to receive events
   */
  void recoveryUpdate(in sbIDevice aDevice,
                      in sbIDeviceFirmwareUpdate aFirmwareUpdate,
                      in unsigned long aDeviceVendorID,
                      in unsigned long aDeviceProductID,
                      in sbIDeviceEventListener aListener);

  /**
   * \brief Continue the auto-update process.
   * \param aDevice - The device to update
   * \param aListener [optional] - Device listener to recieve events
   */
  boolean continueUpdate(in sbIDevice aDevice, 
                         in sbIDeviceEventListener aListener);

  /**
   * \brief Finalize the auto-update process
   * \note This method needs to be called regardless
   *       of if the update process succeeds or not.
   *       If you do not call this method you will 
   *       leak the firmware handler associated with the device.
   */
  void finalizeUpdate(in sbIDevice aDevice);

  /**
   * \brief Verify the firmware on the specified device
   * \param aDevice - The device to verify
   * \param aListener [optional] - Device listener to recieve events
   * \note The flow of events for this method is the following: 
   *       firmware verify start, N * firmware verify start,
   *       firmware verify end.
   * \note Any error event that occurs will cancel this operation.
   */
  void verifyDevice(in sbIDevice aDevice,
                    in sbIDeviceEventListener aListener);
  
  /**
   * \brief Register a firmware update handler
   * \param aFirmwareHandler - The firmware handler to register
   * \note This is only necessary if you wish to register a handler at runtime.
   */
  void registerHandler(in sbIDeviceFirmwareHandler aFirmwareHandler);

  /**
   * \brief Unregister a firmware update handler
   * \param aFirmwareHandler - The firmware handler to unregister
   * \note This is only necessary if you wish to unregister a handler at runtime.
   */
  void unregisterHandler(in sbIDeviceFirmwareHandler aFirmwareHandler);

  /** 
   * \brief Is there a handler available for the specified device
   * \param aDevice - The device
   * \param aDeviceVendorID [optional] - The device vendor ID. Set to 0 to fetch
   *                                     from device instance or if not available.
   * \param aDeviceProductID [optional] - The device product ID. Set to 0 to fetch
   *                                      from device instance or if not available.
   * \retval True - Firmware Handler is available for specified device
   * \retval False - No firmware handler available for specified device
   */
  boolean hasHandler(in sbIDevice aDevice, 
                     in unsigned long aDeviceVendorID,
                     in unsigned long aDeviceProductID);

  /**
   * \brief Get the firmware handler for the specified device
   * \param aDevice - The device
   * \param aDeviceVendorID [optional] - The device vendor ID. Set to 0 to fetch
   *                                     from device instance or if not available.
   * \param aDeviceProductID [optional] - The device product ID. Set to 0 to fetch
   *                                      from device instance or if not available.
   * \return The device firmware handler
   * \throw NS_ERROR_NOT_AVAILABLE when there is no firmware handler available
   *        for the specified device
   * \note This returns a new instance of a handler.
   */
  sbIDeviceFirmwareHandler getHandler(in sbIDevice aDevice, 
                                      in unsigned long aDeviceVendorID,
                                      in unsigned long aDeviceProductID);

  /**
   * \brief Get the running firmware handler for the specified device
   */
  sbIDeviceFirmwareHandler getActiveHandler(in sbIDevice aDevice);

  /**
   * \brief Cancel the current operation
   */
  void cancel(in sbIDevice aDevice);

  /**
   * \brief Force a device to go through recovery mode.
   */
  void requireRecovery(in sbIDevice aDevice);
};
