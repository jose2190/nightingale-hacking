/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2009 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"


//
// @brief This IDL file defines a generic "export" agent service that is used
//        by the media-export service at shutdown. When the media-export 
//        service has finished writing the changes that happened inside of
//        Songbird to a task file, this service is requested to begin 
//        background processing of the task file.
//
// NOTE: The task files are saved in |NS_APP_APPLICATION_REGISTRY_DIR|.
//

%{C++

#define SB_MEDIAEXPORTAGENTSERVICE_CONTRACTID  \
  "@songbirdnest.com/media-export-agent-service;1"
#define SB_MEDIAEXPORTAGENTSERVICE_CLASSNAME        \
  "Songbird Media Export iTunes Agent Service" 
%}

[scriptable, uuid(DDA49DAF-C9AF-4A36-B377-33D8C1895A7B)]
interface sbIMediaExportAgentService : nsISupports
{
  //
  // @brief This method will be called by the media-export service when 
  //        the background agent should start itself.
  //
  void startExportAgent();

  //
  // @brief This method will be called when the media-export service is no
  //        longer exporting data. At this time, any startup OS hooks should
  //        be removed.
  //
  void unregisterExportAgent();

  //
  // @brief Return true if the agent is currently running, false if not.
  //
  readonly attribute boolean isAgentRunning;

  //
  // @brief This method will find and kill all the active agent processes that
  //        the user has running. This method should block until all active
  //        processes have been terminated.
  //
  void killActiveAgents();
};

