/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

#include "nsISupports.idl"

interface nsIDOMDocument;
interface nsIDOMNode;
interface nsIDOMWindow;
interface sbIPlaylistCommandsContext;
interface sbIPlaylistCommandsListener;
interface sbIPlaylistCommandsBuilderPCCallback;
interface sbIMediaItem;
interface sbIMediaList;
interface sbILibrary;
interface nsISimpleEnumerator;

/** \addtogroup playlistcommands Playlist Commands
 * @{
 */

/**
* \interface sbIPlaylistCommands sbIPlaylistCommands.h
* \brief An interface that represents the set of command buttons and context
* menu items available on a displayed playlist.
*
* This interface is meant to be implemented by user code.
*
* Implementors that create their own specific database libraries and playlists
* (eg: sbIDeviceBase) may also specify a commands object to be shown when the
* tables are displayed in a <sb-playlist> element.  This object's purpose is to
* return abstract information that can be used by the playlist element to
* autogenerate its xul button and menuitem elements.
*
* These objects ought to be created in javascript.  When a new playlist is
* created, it will query sbIPlaylistCommandsManager for command objects, and the
* playlist source will call duplicate() on the objects it has stored and
* return the newly duplicated objects.
*
* See documentation on duplicate() for more information.
*
* \sa playlist.xml, sbLibraryPage.xul, duplicate
*/
[scriptable, uuid(1f068d94-1dd2-11b2-825d-8f815e64b75d)]
interface sbIPlaylistCommands : nsISupports
{
  /**
  * \brief An identifier for the command object, unique for each playlist type or
  * guid.  Must be set with the init method before a playlist command can be
  * registered.
  */
  readonly attribute AString id;

  /**
   * \brief Flags of the form specified in sbIPlaylistCommandsHelper.idl
   * to indicate the current location of this command object.  These flags are
   * only set by the functions of sbIPlaylistCommandsHelper currently, so
   * may not be present in sbIPlaylistCommands created and added through other
   * means.
   * If these flags are not present, or equal 0, then the sbIPlaylistCommands
   * object is not informed of its current location.
   * As well, because of issues removing objects with the sbIPlaylistCommandsHelper
   * functions that were not created or added in through that service, these flags
   * can, in that situation, inaccurately report that an object is somewhere
   * that it is actually not present (namely one of the mediaitem context menu
   * or toolbar).  These flags will always, however, accurately report where
   * this playlist command is _not_.
   */
  attribute PRUint16 targetFlags;

  /**
  * \brief The parent sbIPlaylistCommands of this object.  The parentCommandObject
  * is set by sbIPlaylistCommands.addCommandObject and is primarily used
  * to bubble listener notifications up the sbIPlaylistCommands hierarchy.
  */
  attribute sbIPlaylistCommands parentCommandObject;

  /**
  * \brief Adds a command object as a child of this sbIPlaylistCommands object
  *
  * \param aCommandObjectAction The command object to be added as a child
  */
  void addCommandObject( in sbIPlaylistCommands aCommandObjectAction );

  /**
  * \brief Removes a child command object from this sbIPlaylistCommands object
  *
  * \param aCommandObject The child command object to be removed
  */
  void removeCommandObject( in sbIPlaylistCommands aCommandObject );

  /**
  * \brief Adds a listener to this command object to detect child additions or
  * removals and other changes to the command object
  *
  * \param aListener The listener to be added
  */
  void addListener( in sbIPlaylistCommandsListener aListener );

  /**
  * \brief Removes a listener from this command object
  *
  * \param aListener The listener to be removed
  */
  void removeListener( in sbIPlaylistCommandsListener aListener );

  /**
  * \brief Notifies the listeners added to this command object.  aTriggerFunction
  * can be onCommandAdded, onCommandRemoved, or onCommandChanged and the param
  * aCommandObject is expected to be the added, removed, or changed
  * sbIPlaylistCommands object
  *
  * \param aTriggerFunction The function to trigger in the listeners, one of
  *                         onCommandAdded, onCommandRemoved, or onCommandChanged.
  * \param aCommandObject The added, removed, or changed sbIPlaylistCommands
   *                      object
  */
  void notifyListeners( in AString aTriggerFunction,
                        in sbIPlaylistCommands aCommandObject );

  /**
  * \brief Return the visible state for the entire command object.
  *
  * Returning false from this method removes the entire set of commands
  * from the specified host.
  *
  * \param aHost The type of object hosting the command
  * \return Whether to instantiate the commands for this host or not
  */
  PRBool getVisible( in AString aHost );

  /**
  * \brief Return the current visibility callback method that determines where
  * this object will be visible.
  *
  * \return The sbIPlaylistCommandsBuilderPCCallback visibility callback
  * of this object
  */
  readonly attribute sbIPlaylistCommandsBuilderPCCallback visibleCallback;

  /**
  * \brief Be informed when a set of commands are attached to a playlist element.
  *
  * When a playlist element is about to use an sbIPlaylistCommands instance,
  * after it has been duplicated, the element will pass a context to this method.
  * The implementor may save the context information (for instance, a reference to
  * the playlist on which the commands are to act) for later reference and use.
  *
  * \param node The context object
  */
  void setContext( in sbIPlaylistCommandsContext aContext );

  /**
  * \brief Return the number of command elements to be displayed.
  *
  * The implementor should return the number of commands to be created
  *
  * The other functions will be called in turn with the index value that
  * represents each specific command element
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The number of commands to be created
  */
  PRInt32 getNumCommands( in AString aSubMenu, in AString aHost );

  /**
  * \brief Return the type of the requested command element index
  *
  * Each command id has a type, these can be 'action', 'separator',
  * 'value', and 'submenu'.
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the command id
  */
  AString getCommandType( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the id string for the requested command element index
  *
  * Each command id should be unique within this commands object.  The
  * visual style of the command can be set in the CSS.
  *
  * Some id strings are parsed to create different objects:
  *
  * "*separator*" - Create a menuseparator or an empty box
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the command id
  */
  AString getCommandId( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the human readable text for the requested command element index
  *
  * If the string begins with an "&" character, the remaining portion of the
  * string will be used as an index into the current localization's properties
  * file.
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the displayed text
  */
  AString getCommandText( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the flex value for the requested command element index
  *
  * For instance, you can make your "*separator*" element have a flex of 1 and
  * then right-justify all the command buttons after it.  By default, command
  * buttons will adjust their width to the width of their human readable text.
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The value for the flex
  */
  PRInt32 getCommandFlex( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the human readable text for the requested command element's tooltip
  *
  * If the string begins with an "&" character, the remaining portion of the
  * string will be used as an index into the current localization's properties
  * file.
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \todo The tooltip functionality is disabled because mozilla will crash if
  * you delete an element currently displaying a tooltip.
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The string for the tooltip
  */
  AString getCommandToolTipText(in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the enabled state for the requested command element index
  *
  * When the selection of the playlist changes state, or the tree is rebuilt,
  * this method will be called to allow the code to enable or disable commands
  * based upon the state of the playlist.
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return True if the command should display as enabled
  */
  PRBool getCommandEnabled(in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the visible state for the requested command element index
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return True if the command should be visible
  */
  PRBool getCommandVisible(in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the value of the flag for the requested command element index
  *
  * The requested elements are always of type 'flag'

  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The value for the flag
  */
  PRBool getCommandFlag( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the value of the requested command element index
  *
  * The requested elements are always of type 'value'
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The value for the command
  */
  AString getCommandValue( in AString aSubMenu, in PRInt32 aIndex, in AString aHost );

  /**
  * \brief Return the selected item for choice list of the requested command element index
  *
  * The requested elements are always of type 'choice'
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The id of the choice item
  */
  AString getCommandChoiceItem( in AString aChoiceMenu, in AString aHost );

  /**
  * \brief Return the shortcut modifiers of the requested command element index
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The shortcut modifiers for the command
  */
  AString getCommandShortcutModifiers( in AString aSubMenu,
                                       in PRInt32 aIndex,
                                       in AString aHost );

  /**
  * \brief Return the shortcut key of the requested command element index
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The shortcut key for the command
  */
  AString getCommandShortcutKey( in AString aSubMenu,
                                 in PRInt32 aIndex,
                                 in AString aHost );

  /**
  * \brief Return the shortcut keycode of the requested command element index
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return The shortcut keycode for the command
  */
  AString getCommandShortcutKeycode( in AString aSubMenu,
                                     in PRInt32 aIndex,
                                     in AString aHost );

  /**
  * \brief Return a boolean reflecting the local vs window-wide behavior of the shortcut
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return Whether the shortcut is local or not
  */
  PRBool getCommandShortcutLocal( in AString aSubMenu,
                                  in PRInt32 aIndex,
                                  in AString aHost );

  /**
  * \brief Return an sbIPlaylistCommands secondary object.
  *
  * If this method returns a valid interface, all other callbacks for this
  * command item are bypassed.
  *
  * \param aSubMenu The submenu for which the data is being requested
  * \param aIndex The index of the element for which the data is being requested
  * \param aHost The type of object hosting the command
  * \return An sbIPlaylistCommands interface to a secondary command object
  */
  sbIPlaylistCommands getCommandSubObject( in AString aSubMenu,
                                           in PRInt32 aIndex,
                                           in AString aHost );

  /**
  * \brief Returns all sbIPlaylistCommands that are children of this
  * command object (returns the originals)
  *
  * \return A nsISimpleEnumerator of the children playlist commands
  */
  nsISimpleEnumerator getChildrenCommandObjects();

  /**
  * \brief Instantiate the custom element associated with the requested command
  *
  * \param aSubMenu The submenu for which the item needs to be instantiated
  * \param aIndex The index if the command whose instantiation is being requested
  * \param aHost The type of object hosting the command
  * \param aID The id of the custom command whose instantiation is being requested
  * \param aDocument Document in which to instantate element
  * \return The custom element that has been instantiated
  */
  nsIDOMNode instantiateCustomCommand( in AString aSubMenu,
                                       in PRInt32 aIndex,
                                       in AString aHost,
                                       in AString aID,
                                       in nsIDOMDocument aDocument );

  /**
  * \brief Refresh the custom element associated with the requested command
  *
  * \param aSubMenu The submenu for which the item needs to be refreshed
  * \param aIndex The index if the command whose refresh is being requested
  * \param aHost The command host type that made the request
  * \param aID The id of the custom command element whose refresh is being requested
  * \param aCustomCommandElement The element that needs to be refreshed
  */
  void refreshCustomCommand( in AString aSubMenu,
                             in PRInt32 aIndex,
                             in AString aHost,
                             in AString aID,
                             in nsIDOMNode aCustomCommandElement );

  /**
  * \brief Handle the fact that a command was activated
  *
  * When the user activates the command button or menuitem, this method will
  * be called with the event generated.
  *
  * \param aSubMenu The submenu for which the command was triggered
  * \param aIndex The index of the command that was triggered
  * \param aHost The type of object hosting the command
  * \param aId The id of the command that was triggered
  * \param aValue The optional value associated with the triggering of the
  * command, or an empty string.
  */
  void onCommand( in AString aSubMenu,
                  in PRInt32 aIndex,
                  in AString aHost,
                  in AString aId,
                  in AString aValue );

  /**
  * \brief Duplicate the command object
  *
  * When a command object is to be given to a playlist, the object registered
  * with sbIPlaylistCommandsManager will have this method called.  The method should be
  * implemented like this:
  *
  * \code
  duplicate: function() {
    var obj = {};
    for ( var i in this )
      obj[ i ] = this[ i ];
    return obj;
  },
  * \endcode
  *
  * It creates a new object instance and copies the methods and data over to it.
  *
  * In addition, if your object contains more objects whose data should not be shared
  * between command instantiation contexts, then these objects should be duplicated
  * as well (otherwise, their data will be shared between duplicated instances).
  * In this case, the duplicate method should be implemented something like this:
  *
  * \code
  _dupObject: function() {
    var r = {};
    for ( var i in obj )
      r[ i ] = obj[ i ];
    return r;
  },
  duplicate: function() {
    var obj = this._dupObject(this);
    obj.myObjectWithProperties = this.dupObject(this.myObjectWithProperties);
    return obj;
  },
  * \endcode
  *
  * In case of more complex objects, you may need to create a recursive duplication method.
  *
  * \return A new copy of this object
  */
  sbIPlaylistCommands duplicate( );

  /**
  * \brief Initialization function
  *
  * When a command object is duplicated and about to be used by a command instantiator,
  * the instatiator first calls the init() method on it.
  *
  * \param aHost The instantiator's host type (menu, toolbar, ...)
  */
  void initCommands( in AString aHost );

  /**
  * \brief Shutdown function
  *
  * When a command instantiator is done with a command object, it calls its shutdown() method
  * before removing it from its internal lists.
  */
  void shutdownCommands( );
};

/**
* \interface sbIPlaylistCommandsContext sbIPlaylistCommandsContext.h
* \brief The interface for giving context to a playlistcommands object
*/
[scriptable, uuid(f08d76b6-cbe6-4cad-945e-1b1eea10a16c)]
interface sbIPlaylistCommandsContext : nsISupports
{
  /**
  * \brief The playlist against which the commands are acting.
  */
  readonly attribute nsIDOMNode playlist;

  /**
  * \brief The medialist against which the commands are acting.
  */
  readonly attribute sbIMediaItem medialist;

  /**
  * \brief The outer window containing the playlist against which the commands are acting.
  */
  readonly attribute nsIDOMWindow window;

  /**
  * \brief The commands object itself.
  */
  readonly attribute sbIPlaylistCommands commands;
};

/**
* \interface sbIPlaylistCommandsListener sbIPlaylistCommandsListener.h
* \brief The interface for receiving notices when a Command Object is added to
*  or removed from another Command Object
*/
[scriptable, uuid(5ff1f576-1dd2-11b2-ae11-9f40001e5dbb)]
interface sbIPlaylistCommandsListener : nsISupports
{
 /**
  * \brief Callback method when a Command Object is added
  *
  * \param aCommandObject The Command Object that has been added.
  */
  void onCommandAdded(in sbIPlaylistCommands aCommandObject);

 /**
  * \brief Callback method when a Command Object is removed.
  *
  * \param aCommandObject The Command Object that has been removed.
  */
  void onCommandRemoved(in sbIPlaylistCommands aCommandObject);

 /**
  * \brief Callback method when a Command Object is modified.
  *
  * \param aCommandObject The Command Object that has been modified.
  */
  void onCommandChanged(in sbIPlaylistCommands aCommandObject);
};

/**
* \interface sbIPlaylistCommandsManager sbIPlaylistCommandsManager.h
* \brief The service used to register, unregister, and list playlist
*  commands for a particular playlist guid or type
*/
[scriptable, uuid(385a86c4-1dd2-11b2-a945-f6f41c562fe9)]
interface sbIPlaylistCommandsManager : nsISupports
{
 /**
  * \brief Register sbIPlaylistCommands objects to be shown for aLibrary
  * and all mediaLists in that library. A listener will be created to
  * detect if a medialist is added or removed from the specified library
  * and aCommandObj will be automatically registered or unregistered
  * from that list.
  *
  * \param aTargetServicePane  True if aCommandObj should appear in the
  *                            servicepane context menu.  False if it should
  *                            appear elsewhere. (The mediaitem context menu
  *                            or toolbar currently)
  * \param aLibrary      The library for which aCommandObj should be registered
  * \param aCommandObj   The command object instance to be registered
  * \sa sbIPlaylistCommands, unregisterPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L154
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L627
  */
  void registerPlaylistCommandsForLibrary(in PRBool          aTargetServicePane,
                                          in sbiLibrary      aLibrary,
                                          in sbIPlaylistCommands aCommandObj);

 /**
  * \brief Unregister an sbIPlaylistCommands object from aLibrary.
  *        This will only successfully unregister commands that were
  *        registered by registerPlaylistCommandsForLibrary. The command
  *        will be removed from the list that represents the library
  *        and from all medialists in that library.
  *
  * \param aTargetServicePane  True if aCommandObj appears in the servicepane
  *                            context menu.  False if it appears elsewhere.
  *                            (The mediaitem context menu or toolbar currently.
  *                            The desired location is specified through
  *                            aCommandObj's visibility callback)
  * \param aLibrary     The library for which aCommandObj should be unregistered
  * \param aCommandObj  The command object instance to be unregistered
  * \sa sbIPlaylistCommands, unregisterPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L154
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L627
  */
  void unregisterPlaylistCommandsForLibrary(in PRBool        aTargetServicePane,
                                            in sbiLibrary      aLibrary,
                                            in sbIPlaylistCommands aCommandObj);
 /**
  * \brief Register sbIPlaylistCommands objects to be shown for specific playlists in
  * order to let the user perform actions on a playlist's items.
  *
  * The sbIPlaylistCommands interface is used to algorithmically define a set
  * of commands to be rendered arbitrarily by a playlist ui object (currently,
  * playlist.xml).
  *
  * Commands can be registered for a specific playlist, or for any "type" characteristic.
  * If both are specified, the same command will be registered to both.
  *
  * \param aContextGUID The guid string for the database to register against
  * \param aPlaylistType The arbitrary type string to register against
  * \param aCommandObj The command object instance to be used for these playlists
  * \sa sbIPlaylistCommands, unregisterPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L154
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L627
  */
  void registerPlaylistCommandsMediaItem( in AString aContextGUID,
                                          in AString aPlaylistType,
                                          in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Unregister a sbIPlaylistCommands object that was previously registered to registerPlaylistCommandsMediaItem
  *
  * Commands can be registered for a specific playlist, or for any "type" characteristic.
  * If both are specified, the command will be unregistered from both.
  *
  * \param aContextGUID The guid that was used to register the sbIPlaylistCommand
  * \param aPlaylistType The type string that was used to register the sbIPlaylistCommand
  * \param aCommandObj The command object that was registered
  * \sa sbIPlaylistCommands, registerPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L194
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L736
  */
  void unregisterPlaylistCommandsMediaItem( in AString aContextGUID,
                                            in AString aPlaylistType,
                                            in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Retrieve the root sbIPlaylistCommands object registered to a specific
  * medialist guid or type
  *
  * The "guid" has precedence over the "type" string.
  *
  * \param aContextGUID The guid string for the playlist
  * \param aPlaylistType The type of the playlist
  * \return The root sbIPlaylistCommands object for the specified medialist
  * guid or type.  Displayed sbIPlaylistCommands are children of this root command
  * \sa sbIPlaylistCommands, playlist.xml
  */
  sbIPlaylistCommands getPlaylistCommandsMediaItem( in AString aContextGUID,
                                                    in AString aPlaylistType );

 /**
  * \brief Register sbIPlaylistCommands objects to be shown for specific playlists in
  * order to let the user perform actions on the playlist itself.
  *
  * The sbIPlaylistCommands interface is used to algorithmically define a set
  * of commands to be rendered arbitrarily by a service tree ui object (currently,
  * servicePane.xml).
  *
  * Commands can be registered for a specific playlist, or for any "type" characteristic.
  *
  * \param aContextGUID The guid string for the database to register against
  * \param aPlaylistType The arbitrary type string to register against
  * \param aCommandObj The command object instance to be used for these playlists
  * \sa sbIPlaylistCommands, unregisterPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L681
  */
  void registerPlaylistCommandsMediaList( in AString aContextGUID,
                                          in AString aPlaylistType,
                                          in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Unregister a sbIPlaylistCommands object that was previously registered to registerPlaylistCommandsMediaList
  *
  * \param aContextGUID The guid that was used to register the sbIPlaylistCommand
  * \param aPlaylistType The type string that was used to register the sbIPlaylistCommand
  * \param aCommandObj The command object that was registered
  * \sa sbIPlaylistCommands, registerPlaylistCommands, playlist.xml
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L741
  */
  void unregisterPlaylistCommandsMediaList( in AString aContextGUID,
                                            in AString aPlaylistType,
                                            in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Retrieve the root sbIPlaylistCommands object for a specific playlist
  *
  * The "guid" has precedence over the "type" string.
  *
  * This method is only called by the servicepane UI object, in servicePane.xml
  *
  * \param aContextGUID The guid string for the playlist
  * \param aPlaylistType The type of the playlist
  * \return A simple enumerator of the command object instances used for this playlist
  * \sa sbIPlaylistCommands, servicePane.xml
  */
  sbIPlaylistCommands getPlaylistCommandsMediaList( in AString aContextGUID,
                                                    in AString aPlaylistType );

  /**
  * \brief Adds the param listener to the root sbIPlaylistCommands for the param
  * medialist. Every medialist can have two root commands, one for the medialist
  * guid and one for its type, but these root commands are not instantiated until
  * a playlist command is specifically added for that guid or type. This method
  * adds the param listener for both root commands and, if a root command  does
  * not exist when this method is called, it guarantees that the param listener
  * will be added immediately when the root command is created and the listener
  * will receive all notifications sent by the root command.
  *
  * \param aMediaList The medialist whose two root commands, for guid and type,
  * will receive the param listener
  * \param aListener The listener to be added
  */
  void addListenerForMediaList( in sbIMediaList aMediaList,
                                in sbIPlaylistCommandsListener aListener );

  /**
  * \brief Removes listeners for the param medialist
  *
  * \param aMediaList The medialist for which listeners should be removed
  */
  void removeListenerForMediaList( in sbIMediaList aMediaList,
                                   in sbIPlaylistCommandsListener aListener  );

  /**
  * \brief Publish an sbIPlaylistCommands interface for public consumption
  *
  * An sbIPlaylistCommands interface may be published so that third party code
  * may reuse them in their own command sets.
  *
  * \param aCommandGUID The GUID identifying this command interface
  * \param aCommandObj The interface to publish
  * \sa request, withdraw, kPlaylistCommands.jsm, sbIPlaylistCommands
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L539
  */
  void publish( in AString aCommandGUID, in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Withdraw a previously published sbIPlaylistCommands interface
  *
  * Note that the original interface must be passed to this function for the
  * call to succeed. Since calling request() returns a copy of the interface
  * rather than the original interface itself, it means that you cannot withdraw
  * someone else's interface unless you have access to it directly.
  *
  * \param aCommandGUID The GUID identifying this command interface
  * \param aCommandObj The interface to withdraw
  * \sa publish, request, kPlaylistCommands.jsm, sbIPlaylistCommands
  * \sa http://publicsvn.songbirdnest.com/browser/trunk/components/playlistcommands/src/sbPublicPlaylistCommands.js#L694
  */
  void withdraw( in AString aCommandGUID, in sbIPlaylistCommands aCommandObj );

  /**
  * \brief Request a copy of a published sbIPlaylistCommands interface
  *
  * \param aCommandGUID The GUID identifying this command interface
  * \return A copy of the requested interface, or null if that interface is not
  * in the manager's repository.
  * \sa publish, withdraw, kPlaylistCommands.jsm, sbIPlaylistCommands
  * \sa http://publicsvn.songbirdnest.com/browser/extensions/commandsexample/chrome/content/scripts/CommandsExample.js#L130
  */
  sbIPlaylistCommands request( in AString aContextGUID );
};

/*! @} */ // end of playlistcommands group


