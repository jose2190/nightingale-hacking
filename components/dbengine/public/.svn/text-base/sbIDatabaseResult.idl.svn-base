/*
 //
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
/**
 * \file sbIDatabaseResult.idl
 * \brief An object containing the results of a database query. 
 * 
 * \sa sbIDatabaseQuery.idl
 */
#include "nsISupports.idl"

/**
 * \interface sbIDatabaseResult
 * \brief An object containing the results of a database SELECT query.
 *
 * User code retrieves one of these objects from sbIDatabaseQuery::getResultObject()
 *
 * \sa sbIDatabaseQuery
 */
[scriptable, uuid(9a5fcaf6-4441-11db-9651-00e08161165f)]
interface sbIDatabaseResult : nsISupports
{
  /**
   * \brief The number of columns in the result.
   *
   * \return The number of columns in the result. 
   * \sa sbIDatabaseQuery
   */
  unsigned long getColumnCount();

  /**
   * \brief The name of a particular column.
   *
   * \param aColumnIndex The index of the column to access.
   * \return The name of the column.
   * \sa sbIDatabaseQuery
   */
  AString getColumnName(in unsigned long aColumnIndex);

  /**
   * \brief The index of a particular column.
   *
   * \param aColumnName The name of the column to access.
   * \return The index of the column.
   * \sa sbIDatabaseQuery
   */
  unsigned long getColumnIndex(in AString aColumnName);

  /**
   * \brief The number of rows in the result.
   *
   * \return The number of rows in the result.
   * \sa sbIDatabaseQuery
   */
  unsigned long getRowCount();

  /**
   * \brief Retrieve the value of a cell at a particular row and column.
   *
   * \param aRowIndex The row index of the cell to retrieve.
   * \param aColumnIndex The column index of the cell to retrieve.
   * \return The cell value.
   * \sa sbIDatabaseQuery
   */
  AString getRowCell(in unsigned long aRowIndex, in unsigned long aColumnIndex);

  /**
   * \brief Retrieve the value of a cell at a particular row for a named column.
   *
   * \param aRowIndex The row index of the cell to retrieve.
   * \param aColumnName The column name of the cell to retrieve.
   * \return The cell value.
   * \sa sbIDatabaseQuery
   */
  AString getRowCellByColumn(in unsigned long aRowIndex, in AString aColumnName);

  /**
   * \brief [noscript] Get the internal pointer to the column name.
   *
   * This method is not available from script.  It returns the internal
   * pointer to the value, to reduce unnecessary memory copies.
   *
   * \param aColumnIndex The index of the column to access.
   * \return The name of the column.
   * \sa sbIDatabaseQuery
   */
  [noscript] wstring getColumnNamePtr(in unsigned long aColumnIndex);

  /**
   * \brief [noscript] Get the internal pointer to the cell value.
   *
   * This method is not available from script.  It returns the internal
   * pointer to the value, to reduce unnecessary memory copies.
   *
   * \param aRowIndex The row index of the cell to retrieve.
   * \param aColumnIndex The column index of the cell to retrieve.
   * \return The cell value.
   * \sa sbIDatabaseQuery
   */
  [noscript] wstring getRowCellPtr(in unsigned long aRowIndex, in unsigned long aColumnIndex);

  /**
   * \brief [noscript] Get the internal pointer to the cell value (by named column).
   *
   * This method is not available from script.  It returns the internal
   * pointer to the value, to reduce unnecessary memory copies.
   *
   * \param aRowIndex The row index of the cell to retrieve.
   * \param aColumnName The column name of the cell to retrieve.
   * \return The cell value.
   * \sa sbIDatabaseQuery
   */
  [noscript] wstring getRowCellByColumnPtr(in unsigned long aRowIndex, in AString aColumnName);

  /**
   * \brief [noscript] Free the internally allocated resources of this results object.
   *
   * This method is not available from script.  It deallocates the internal
   * memory used to contain the results data.  This allows code to free most
   * of the used memory long before the garbage collector would.
   *
   * \sa sbIDatabaseQuery
   */
  [noscript] void clearResultSet();
};
