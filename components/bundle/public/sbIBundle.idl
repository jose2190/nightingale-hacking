/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

#include "nsISupports.idl"

/**       
 * \file sbIBundle.idl
 * \brief Songbird Bundle Interface file
 * This file contains interfaces used by the bundle management, whose purpose is to offer 
 * the user to install pre-bundled extensions.
 * \sa sbBundle.js
 */
  
interface sbIBundleDataListener;
interface sbIBundleInstallListener;
interface nsIDOMDocument;
interface nsIDOMWindow;
/**
 * \interface sbIBundle sbIBundle.h
 * \brief Songbird Bundle Interface
 * This is the main bundle management interface, used to get the bundle data, perform and
 * observe the download process, list the bundle content and install bundled extensions.
 * \sa sbIBundleDataListener, sbIBundleInstallListener
 */
      
[scriptable, uuid(656eda3e-aeff-11db-96e1-005056c00008)]
interface sbIBundle : nsISupports
{
  /**
   * \brief Bundle channel ID
   * Sets the bundle channel ID. This is used to construct the bundle data url. 
   * Use sbIBundleDataListener to monitor progress.
   * \sa addBundleDataListener, removeBundleDataListener, sbIBundleDataListener
   */
  attribute AString bundleId;

  /**
   * \brief Bundle URL
   * Sets the bundle URL. This is the location of the bundle.
   * Use sbIBundleDataListener to monitor progress.
   * \sa addBundleDataListener, removeBundleDataListener, sbIBundleDataListener
   */
  attribute AString bundleURL;

  /**
   * \brief Begin downloading the bundle data asynchronously
   * This method begins the asynchronous download of bundle data. 
   * Use sbIBundleDataListener to monitor progress.
   * \param timeout Maximum time in milliseconds to wait for the server response.  Specify 0 to use the system socket timeout.
   * \sa addBundleDataListener, removeBundleDataListener, sbIBundleDataListener
   */
  void retrieveBundleData(in long aTimeout);

  /**
   * \brief Download the bundle data synchronously from a local file.
   */
  void retrieveLocalBundleData();

  /**
   * \brief Add a bundle data listener
   * This method registers a bundle observer object associated with the download
   * of bundle data in order to get error and completion callbacks
   * \param observer The observer object to register
   * \sa sbIBundleDataListener
   */
  void addBundleDataListener(in sbIBundleDataListener aListener);

  /**
   * \brief Remove a bundle data listener
   * This method unregisters a bundle observer object from the list of bundle callbacks
   * \param observer The observer object to unregister
   * \sa sbIBundleDataListener
   */
  void removeBundleDataListener(in sbIBundleDataListener aListener);

  /**
   * \brief Status of the bundle download
   *
   * const long BUNDLE_DATA_STATUS_ERROR       = -1;
   * const long BUNDLE_DATA_STATUS_DOWNLOADING = 0;
   * const long BUNDLE_DATA_STATUS_SUCCESS     = 1;
   */
  readonly attribute long bundleDataStatus;
  const long BUNDLE_DATA_STATUS_ERROR       = -1;
  const long BUNDLE_DATA_STATUS_DOWNLOADING = 0;
  const long BUNDLE_DATA_STATUS_SUCCESS     = 1;

  /**
   * \brief DOM document for the bundle data.
   * The interface to the bundle DOM document describing the bundled extensions.
   */
  readonly attribute nsIDOMDocument bundleDataDocument;

  /**
   * \brief Bundle document xml in text format.
   * The XML for the bundle document describing the bundled extension, in raw text format
   */
  readonly attribute AString bundleDataText;

  /**
   * \brief Version of the downloaded bundle data.
   * The Version of the downloaded bundle, as extracted from the document's data
   */
  readonly attribute AString bundleDataVersion;
  
  /**
   * \brief Number of extensions in the bundle document
   * \sa bundleDataDocument, getExtensionAttribute
   */
  readonly attribute long bundleExtensionCount; 

  /**
   * \brief Remove an extension from the bundle extension list.
   * \param aIndex The index of the extension to remove
   */
  void removeExtension(in long aIndex);

  /**
   * \brief Gets an extension's attribute from its xml document source
   * This method returns the corresponding attribute for a specified extension entry in the XML bundle document
   * \param aIndex The index of the extension within the bundle document (zero based)
   * \param aAttribute The name of the attribute to retrieve
   * \return value of the attribute
   * \sa bundleDataDocument
   */
  AString getExtensionAttribute(in long aIndex, in AString aAttributeName);

  /**
   * \brief Gets the installation flag for a bundled extension
   * This method returns the installation flag associated with a particular bundled extension.
   * The flag is then used by installFlaggedExtensions to determine which, extension should 
   * be installed.
   * \param idx Index of the extension whose flag you wish to retrieve
   * \return The extension's installation flag
   * \sa setExtensionInstallFlag, installFlaggedExtensions
   */
  boolean getExtensionInstallFlag(in long aIndex);
  
  /**
   * \brief Sets the installation flag for a bundled extension
   * This method sets the installation flag associated with a particular bundled extension
   * \param idx Index of the extension whose flag you wish to set or clear
   * \sa getExtensionInstallFlag, installFlaggedExtensions
   */
  void setExtensionInstallFlag(in long aIndex, in boolean aInstallFlag);
  
  /**
   * \brief Add a bundle install listener
   * This method registers a bundle install listener in order to get error and completion callbacks
   * \param listener The listener object to register
   * \sa sbIBundleInstallListener
   */
  void addBundleInstallListener(in sbIBundleInstallListener aListener);

  /**
   * \brief Remove a bundle install listener
   * This method unregisters a bundle install listener object from the list of callbacks
   * \param listener The listener object to unregister
   * \sa sbIBundleInstallListener
   */
  void removeBundleInstallListener(in sbIBundleInstallListener aListener);

  /**
   * \brief Install specified bundled extensions
   * This method installs the extensions whose install flags are set to true. A dialog box showing 
   * the installer's progress will be spawned.
   *
   * const long BUNDLE_INSTALL_ERROR = 0;
   * const long BUNDLE_INSTALL_SUCCESS = 1;
   *
   * \param window The parent for the progress dialog box
   * \sa setExtensionInstallFlag, getExtensionInstallFlag
   * \return The result of the download and installation attempt
   */
  long installFlaggedExtensions(in nsIDOMWindow aWindow);
  const long BUNDLE_INSTALL_ERROR = 0;
  const long BUNDLE_INSTALL_SUCCESS = 1;

  /**
   * \brief Gets the flag indicating that a restart is needed
   * This method gets the flag indicating whether a restart of the application is 
   * needed or not, in order for installed extensions to take effect.
   * \return Value of the flag
   */
  readonly attribute boolean restartRequired;
};


