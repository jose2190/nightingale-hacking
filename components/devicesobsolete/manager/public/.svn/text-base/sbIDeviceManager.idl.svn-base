/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
*/

#include "nsIObserver.idl"

interface sbIDeviceBase;

/**
 * This is the DeviceManager service.
 * Make sure to use getService rather than createInstance when using.
 */
[scriptable, uuid(d0b017c4-f388-4e78-abf3-5f48ca616a94)]
interface sbIDeviceManager : nsIObserver
{
  /**
   * The number of devices currently registered
   */
	readonly attribute PRUint32 deviceCount;

  /**
   * Gets the category of the device at the specified index
   *
   * @param aIndex - the index of the device
   * @throws NS_ERROR_INVALID_INDEX if the index is > deviceCount
   */
	AString getCategoryByIndex(in PRUint32 aIndex);

  /**
   * Returns a registered and initialized device at the specified index
   *
   * @param aIndex - the index of the device
   * @throws NS_ERROR_INVALID_INDEX if the index is > deviceCount
   */
	sbIDeviceBase getDeviceByIndex(in PRUint32 aIndex);

  /**
   * Determines whether or not a device exists for the given category.
   *
   * @param aCategory - a category string to test
   */
  PRBool hasDeviceForCategory(in AString aCategory);

  /**
   * Returns a registered and initialized device.
   *
   * @param aCategory - a category string identifying the device
   * @throws NS_ERROR_NOT_AVAILABLE if no device exists to handle the category.
   * @throws NS_ERROR_UNEXPECTED if the internal array returns garbage
   */
	sbIDeviceBase getDeviceByCategory(in AString aCategory);
};

%{C++

// The Device Manager will use this topic to notify interested components that
// supported devices have all been loaded.
#define SB_DEVICE_MANAGER_READY_TOPIC "songbird-device-manager-ready"

%}