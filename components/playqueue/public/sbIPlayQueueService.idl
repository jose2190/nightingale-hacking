/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file sbIPlayQueueService.idl
 * \brief Interface to Play Queue service
 */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface sbIMediaItem;
interface sbIMediaList;

/**
 * \interface sbIPlayQueueServiceListener
 * \brief Listener for the Play Queue service
 *
 * Listener to receive updates when the current index in the queue changes
 */
[scriptable, uuid(abbeaac0-dc53-11df-937b-0800200c9a66)]
interface sbIPlayQueueServiceListener : nsISupports
{
  /**
   * \brief
   *
   * \param aToIndex new index in the queue
   * \sa sbIPlayQueueService
   */
  void onIndexUpdated(in unsigned long aToIndex);

  /**
   * \brief fired when queue operation is started.
   *
   * \sa sbIPlayQueueService
   */
  void onQueueOperationStarted();

  /**
   * \brief fired when queue operation is completed.
   *
   * \sa sbIPlayQueueService
   */
  void onQueueOperationCompleted();
};

/**
 * \interface sbIPlayQueueService
 * \brief Service for interacting with the Play Queue
 *
 * Service to allow queueing items and visibility into the persistent current
 * index.
 */
[scriptable, uuid(88849800-ddbe-11df-85ca-0800200c9a66)]
interface sbIPlayQueueService : nsISupports
{
  /**
   * \brief The underlying MediaList for the Play Queue
   *
   * mediaList should not be used to add items to the play queue. Items should
   * always be added using the queue methods provided by this interface.
   */
  readonly attribute sbIMediaList mediaList;

  /**
   * \brief Index of the current track in the Play Queue
   */
  attribute unsigned long index;

  /**
   * \brief Whether a queue operation is in progress.
   */
  readonly attribute boolean operationInProgress;

  /**
   * \brief Adds a media item to the next slot in the Play Queue
   *
   * Inserts a media item (could be a list) into the Play Queue so that it is
   * played next.

   * If the current media item is playing or has been played, the new item will
   * be inserted after the current item.  Otherwise, the new item will be
   * inserted before the current item. If the current item is not playing, the
   * current index will be updated to correspond to the new item.
   *
   * A track is considered "played" if it has been played for at least 240
   * seconds or 1/2 its duration (matching Audioscrobbler).  See
   * sbPlaybackHistoryService.cpp#1633.
   *
   * \param aMediaItem media item to add
   * \sa queueLast()
   */
  void queueNext(in sbIMediaItem aMediaItem);

  /**
   * \brief Adds a media item to the end of the Play Queue.
   *
   * \param aMediaItem media item to add
   * \sa queueNext()
   */
  void queueLast(in sbIMediaItem aMediaItem);

  /**
   * \brief Adds an enumerator of media items before the slot specified by
   *        aIndex in the Play Queue asynchronously. Items are not actually in
   *        the queue until the onQueueOperationCompleted notification is sent,
   *        and callers should not attempt to add or remove items from the queue
   *        while the operation is in progress.
   *
   * \param aIndex Index of the item before which to add media items.
   * \param aMediaItems enumerator of media items to add
   * \sa queueSomeLast() queueSomeNext()
   */
  void queueSomeBefore(in unsigned long aIndex,
                       in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Adds an enumerator of media items to the next slot in the Play Queue
   *        asynchronously. Items are not actually in the queue until the
   *        onQueueOperationCompleted notification is sent, and callers should
   *        not attempt to add or remove items from the queue while the
   *        operation is in progress.
   *
   * Inserts all media items in aMediaItems into the play queue so that the
   * first enumerated item is played next and the remaining enumerated items are
   * played before any remaining future tracks that were already in the queue.
   *
   * \param aMediaItems enumerator of media items to add
   * \sa queueSomeBefore() queueSomeLast()
   */
  void queueSomeNext(in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Adds an enumerator of media items to the end of the Play Queue
   *        asynchronously. Items are not actually in the queue until the
   *        onQueueOperationCompleted notification is sent, and callers should
   *        not attempt to add or remove items from the queue while the
   *        operation is in progress.
   *
   * \param aMediaItems enumerator of media items to add
   * \sa queueSomeBefore() queueSomeNext()
   */
  void queueSomeLast(in nsISimpleEnumerator aMediaItems);

  /**
   * \brief Clear the Play Queue's history
   *
   * \note  Please be aware that mediaItems exist only in the context of
   *        a library (of which the play queue has its own, apart from
   *        the mainLibrary where most mediaitems reside). Thus, when mediaitems
   *        are removed with this function, they functionally cease to exist and
   *        it is unsafe to continue using them.  The mediaitems in the
   *        play queue's library, however, likely have counterparts in the
   *        mainLibrary that can be retrieved and used after the clear.
   *
   * Remove all media items before index.
   *
   * \sa clearAll()
   */
  void clearHistory();

  /**
   * \brief Clear the Play Queue's contents.
   *
   * \note  Please be aware that mediaItems exist only in the context of
   *        a library (of which the play queue has its own, apart from
   *        the mainLibrary where most mediaitems reside). Thus, when mediaitems
   *        are removed with this function, they functionally cease to exist and
   *        it is unsafe to continue using them.  The mediaitems in the
   *        play queue's library, however, likely have counterparts in the
   *        mainLibrary that can be retrieved and used after the clear.
   *
   * Remove all media items from the queue.
   *
   * \sa clearHistory()
   */
  void clearAll();

  /**
   * \brief Add a listener for the service
   *
   * Adds a listener to receive updates when the current index in the queue
   * changes.
   *
   * \sa removeListener()
   */
  void addListener(in sbIPlayQueueServiceListener aListener);

  /**
   * \brief Remove a listener for the service
   *
   * \sa addListener()
   */
  void removeListener(in sbIPlayQueueServiceListener aListener);
};
