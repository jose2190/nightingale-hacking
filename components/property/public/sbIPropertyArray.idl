/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file  sbIPropertyArray.idl
 * \brief Definition of the sbIPropertyArray interface
 */

#include "nsIArray.idl"
#include "nsIMutableArray.idl"

[scriptable, uuid(478c1474-92c4-4fc4-8743-3f9f372b814d)]
interface sbIProperty : nsISupports
{
  /**
   * Get the id of the property.
   */
  readonly attribute AString id;

  /**
   * Get the value of the property.
   */
  readonly attribute AString value;
};

/**
 * \interface sbIPropertyArray
 * \brief An interface to carry around arrays of nsIProperty instances.  Users
 *        of this interface should only QI it to a sbIMutablePropertyArray if
 *        they are the owners of the instance. 
 */
[scriptable, uuid(cc75d9ac-cb61-4f6d-afda-1cba8a090b6f)]
interface sbIPropertyArray : nsIArray
{
  /**
   * Gets the property at the specified index
   *
   * \param aIndex The index of the property to retrieve
   */
  sbIProperty getPropertyAt(in unsigned long aIndex);

  /**
   * Gets the value for a property in the array
   *
   * \param aID ID of the property to get the value for
   * \return Value of the property
   * \throws NS_ERROR_NOT_AVAILABLE if the property is not in the array
   */
  AString getPropertyValue(in AString aID);

  /**
   * Return the contents of the property array as a string
   */
  AString toString();

  /**
   * Determines whether or not the items in the array have been validated prior
   * to insertion.
   */
  readonly attribute boolean validated;
};

/**
 * \interface sbIMutablePropertyArray
 * \brief An interface to carry around arrays of nsIProperty instances
 * Note that implementations of the interface should also provide 
 * nsIMutableArray.  QI to nsIMutableArray to access add/remove/clear methods.
 */
[scriptable, uuid(d13954dc-1dd1-11b2-ba41-cfc220cadb50)]
interface sbIMutablePropertyArray : sbIPropertyArray
{
  /**
   * Adds a new property to the array
   *
   * \param aName  The id of the property
   * \param aValue The value of the property
   *
   * \throws NS_ERROR_ILLEGAL_VALUE if the 'strict' attribute is true and aValue
   *         fails the 'validate' method of the sbIPropertyInfo represented by
   *         aName fails.
   */
  void appendProperty(in AString aID,
                      in AString aValue);

  /**
   * Adds the properties specified by aPropertyArray to the array.  If
   * aSkipDuplicates is true, don't add properties that are already present.
   *
   * \param aPropertyArray  Array of properties to add.
   * \param aSkipDuplicates If true, skip duplicate properties.
   */
  void appendProperties(in sbIPropertyArray aPropertyArray,
                        in boolean          aSkipDuplicates);

  /**
   * Determines whether or not the appendProperty method will throw on invalid
   * input (i.e. setting a value on a property whose sbIPropertyInfo 'validate'
   * method fails on that input). Defaults to true.
   *
   * An example of improper usage is setting non-numeric text in a property
   * whose parent sbIPropertyInfo is actually sbINumberPropertyInfo.
   *
   * Note that this property can only be set if the implementing array is empty.
   * Any attempt to set this property after 'appendProperty' has been called
   * will throw NS_ERROR_FAILURE.
   */
  attribute boolean strict;
};
