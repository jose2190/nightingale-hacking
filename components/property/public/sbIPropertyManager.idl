/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
*/

/**
 * \file sbIPropertiesManager.idl
 * \brief Definition of the sbIPropertiesManager interface
 * \sa List of "see also" files
 */

#include "nsISupports.idl"

interface nsISimpleEnumerator;
interface nsIStringEnumerator;
interface nsIStringBundle;
interface nsIURI;
interface sbIPropertyInfo;
interface sbIPropertyArray;
interface sbIPropertyUnitConverter;

/**
* \interface sbIPropertyManager
* \brief Manager for system wide metadata properties
*
* Components should register properties with this service at startup.
*
* \sa sbIPropertyInfo
*/
[scriptable, uuid(ed260380-8c1b-11dd-ad8b-0800200c9a66)]
interface sbIPropertyManager : nsISupports
{
  /**
   * \brief An enumerator containing the ids of all
   * registered properties.
   */
  readonly attribute nsIStringEnumerator propertyIDs;

  /**
   * \brief Get a property object from its id
   * \param aID ID of the property
   * \return Property object for the given property, null if not found
   */
  sbIPropertyInfo getPropertyInfo(in AString aID);

  /**
   * \brief Add a property into the system
   * \param aPropertyInfo Property to add into the system.  An exception is
   *        thrown if the property's ID is not unique
   */
  void addPropertyInfo(in sbIPropertyInfo aPropertyInfo);

  /**
   * \brief Check for a property in the system by ID
   * \param aID ID of the property
   * \return true if property is in system
   * \return false if property is not in system
   */
  boolean hasProperty(in AString aID);

  /**
   * \brief Helper to get a string bundle.
   */
  nsIStringBundle createBundle(in string aURLSpec);

  /**
   * \brief Helper to get a display value, using a string name, from a bundle.
   */
  AString getStringFromName(in nsIStringBundle aBundle, in AString aName);

  /**
   * \brief Get all the properties that in any way depend on 
   * the given property.  For example, the secondary sort 
   * of property A may include property B.
   */
  sbIPropertyArray getDependentProperties(in AString aID);
};

/**
 * Components can be registered with the category manager with this category
 * to be notified of the property manager being ready.  The name is ignored,
 * but the value should be the contract id of the component - possibly preceeded
 * by "service," to be created as a service instead of a new instance.  The
 * component should implement nsIObserver and will be notified with the
 * category name as the topic.
 *
 * Alternatively, components can be registered with the observer service with
 * the category name as the topic instead; they will also be notified at the
 * same time.
 *
 * It is recommended that this only be used to register property info entries,
 * and other work should be done in different notifications.
 */
%{C++
  #define SB_PROPERTY_MANAGER_READY_CATEGORY "songbird-property-manager-ready"
%}C++

/**
 * \interface sbIPropertyOperator
 * \brief An interface to represent an operator that may act upon a property
 */
[scriptable, uuid(2C334049-EFCD-40ed-99F8-A96D541569E5)]
interface sbIPropertyOperator : nsISupports
{
  /**
   * \brief The operator.
   */
  readonly attribute AString operator;

  /**
   * \brief The operator readable string or
   * language property name.
   */
  readonly attribute AString operatorReadable;

  /**
   * \brief Initialize the operator.
   * \note This method may not be called more than once.
   */
  void Init(in AString aOperator, in aString aOperatorReadable);
};
