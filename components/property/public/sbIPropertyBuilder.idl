/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file sbIPropertyBuilder.idl
 * \brief Definition of the sbIPropertyBuilder interfaces
 * \sa List of "see also" files
 */

#include "nsISupports.idl"

interface sbIClickablePropertyCallback;
interface sbIPropertyArray;
interface sbIPropertyInfo;
interface nsIStringBundle;

/**
* \interface sbIPropertyBuilder
* \sa sbIPropertyInfo
*/
[scriptable, uuid(9b1026c6-3896-49c6-a72f-4f4a2b21a6be)]
interface sbIPropertyBuilder : nsISupports
{
  attribute AString propertyID;

  attribute AString displayName;

  attribute AString displayNameKey;

  attribute boolean userViewable;

  attribute boolean userEditable;

  attribute boolean remoteReadable;

  attribute boolean remoteWritable;
  
  sbIPropertyInfo get();
};

/**
* \interface sbISimpleButtonPropertyBuilder
* \sa sbIPropertyBuilder
*/
[scriptable, uuid(bd71935f-697f-424d-9721-6477f4e34556)]
interface sbISimpleButtonPropertyBuilder : sbIPropertyBuilder
{
  attribute AString label;

  attribute AString labelKey;
};

/**
* \interface sbIDownloadButtonPropertyBuilder
* \sa sbIPropertyBuilder
*/
[scriptable, uuid(c9a7b8b0-1dd1-11b2-ac2e-8a4754dfaf6f)]
interface sbIDownloadButtonPropertyBuilder : sbISimpleButtonPropertyBuilder
{
  attribute AString retryLabel;
  
  attribute AString retryLabelKey;
};


/**
* \interface sbIStatusPropertyBuilder
* \sa sbIPropertyBuilder
* used for unit testing
*/
[scriptable, uuid(d7a2ee4e-1dd1-11b2-a6bb-cc3a9b2b6557)]
interface sbIStatusPropertyBuilder : sbISimpleButtonPropertyBuilder
{
  attribute AString completedLabel;
  
  attribute AString failedLabel;

  attribute AString completedLabelKey;
    
  attribute AString failedLabelKey;
};

/**
* \interface sbIImagePropertyBuilder
* \sa sbIPropertyBuilder
*/
[scriptable, uuid(7b68af5c-3443-4c5b-9c65-44efe3781510)]
interface sbIImagePropertyBuilder : sbIPropertyBuilder
{
};

/**
* \interface sbIRatingPropertyBuilder
* \sa sbIPropertyBuilder
*/
[scriptable, uuid(10f69629-3e74-448a-b627-7ea734644715)]
interface sbIRatingPropertyBuilder : sbIPropertyBuilder
{
};

/**
 * \interface sbIImageLabelLinkPropertyBuilder
 * \sa sbIPropertyBuilder
 */
[scriptable, uuid(1495976a-1dd2-11b2-800f-c53b05574f38)]
interface sbIImageLabelLinkPropertyBuilder : sbIPropertyBuilder
{
  /**
   * Add an image mapping - items with the key as the property value will use
   * the image URL given.  If aKey is null, the image URL will be used as the
   * fallback for items with no mapping.
   */
  void addImage(in ACString aKey, in ACString aImageUrl);

  /**
   * Look up an existing image mapping
   */
  ACString getImage(in ACString aKey);

  /**
   * Add a label mapping - itmes with the key as the property value will use
   * the label string given.  If aKey is null, the label will be used as the
   * fallback for items with no mapping.
   */
  void addLabel(in ACString aKey, in AString aLabel);
  
  /**
   * Look up an existing label mapping
   */
  AString getLabel(in ACString aKey);
};

/**
 * \interface sbIClickablePropertyBuilder
 * An interface to allow a property builder to build property info objects
 * which allow custom actions on click
 * \sa sbIPropertyBuilder
 * \sa sbIClickablePropertyCallback
 */
[scriptable, uuid(758e51ee-1dd2-11b2-bd29-dc5de14cfdc1)]
interface sbIClickablePropertyBuilder : sbIPropertyBuilder
{
  void addClickHandler(in sbIClickablePropertyCallback aCallback);
  void removeClickHandler(in sbIClickablePropertyCallback aCallback);
};
