<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!-- Import external definitions. -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://global/content/commonDialog.css"
                 type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css"
                 type="text/css"?>
<?xml-stylesheet href="chrome://songbird-dialogs/skin/deviceSetup.css"
                 type="text/css"?>

<!DOCTYPE window [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
<!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
%brandDTD;
%songbirdDTD;
]>

<!-- ***************************************************************************
 *
 * Device setup dialog box.
 *
 *   This dialog box presents a dialog for specifying the initial setup of a
 * device.
 *   A single dialog box argument of type sbIDevice is passed in.
 *
 *************************************************************************** -->
<!-- Device setup dialog box. -->
<dialog
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  id="device_setup_dialog"
  hidechrome="true"
  flex="1"
  type="songbird"
  title="&device.dialog.setup.title;"
  buttons="accept"
  ondialogaccept="if (deviceSetupDialog.onAccept()) onExit();"
  onload="deviceSetupDialog.onLoad();"
  onunload="deviceSetupDialog.onUnload();">

  <!-- *************************************************************************
   *
   * Content.
   *
   ************************************************************************* -->

  <!-- Use Songbird window region. -->
  <windowregion/>

  <!-- Place notification box in its own box so that the dialog window can
       properly resize.  Not sure why this is needed.  Other variations of
       the notification box placement don't seem to work well with resizing. -->
  <vbox>
    <notificationbox id="device_setup_notification_box" flex="1"/>
  </vbox>

  <!-- Main setup container box. -->
  <vbox id="setupContainer">

    <vbox id="syncContainer">
      <hbox id="nameContainer">
        <label id="setup_name_header"/>
        <textbox id="setup_name_textbox"/>
      </hbox>

      <vbox id="selectorContainer" hidden="true">
        <description id="setup_sync_volume_selector_description">
          &device.dialog.setup.sync.volume.selector.description;
        </description>

        <!-- Device volume selector. -->
        <sb-device-volume-selector id="device_setup_volume_selector"
                                   class="indent"/>
        <separator id="selectorSeparator"/>
      </vbox>
    </vbox>

    <vbox id="ignoreContainer" hidden="true">
      <checkbox id="setup_ignore_checkbox" checked="false"
                label="&device.dialog.setup.ignore.checkbox.label;"
                oncommand="deviceSetupDialog.toggleIgnore(event);"/>
      <description id="setup_ignore_description" class="indent">
        &device.dialog.setup.ignore.checkbox.description;
      </description>
    </vbox>

  </vbox> <!-- setupContainer -->


  <!-- *************************************************************************
   *
   * Implementation.
   *
   ************************************************************************* -->

  <!-- Import the Songbird services. -->
  <script type="application/x-javascript"
          src="chrome://global/content/globalOverlay.js"/>
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/windowUtils.js" />
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />

  <!-- Device setup dialog services. -->
  <script><![CDATA[
    //
    // Defs.
    //

    if (typeof(Cc) == "undefined")
      var Cc = Components.classes;
    if (typeof(Ci) == "undefined")
      var Ci = Components.interfaces;
    if (typeof(Cr) == "undefined")
      var Cr = Components.results;
    if (typeof(Cu) == "undefined")
      var Cu = Components.utils;


    // Songbird imports.
    Cu.import("resource://app/jsmodules/StringUtils.jsm");
    Cu.import("resource://app/jsmodules/WindowUtils.jsm");


    //
    // Device setup dialog services object.
    //

    var deviceSetupDialog = {
      //
      // Object fields.
      //
      //   _device                  sbIDevice object.
      //   _notificationBoxInterval Interval used to monitor the notification
      //                            box.
      //

      _device: null,
      _notificationBoxInterval: null,


      //------------------------------------------------------------------------
      //
      // Public functions.
      //
      //------------------------------------------------------------------------

      /**
       * Handle load events.
       */

      onLoad: function deviceSetupDialog_onLoad() {
        // Get the dialog parameters.
        this._device = window.arguments[0].QueryInterface(Ci.sbIDevice);

        // Set the device name textbox header.
        var productName = SBString("device.default.product.name");
        var setupNameHeaderElem = document.getElementById("setup_name_header");
        setupNameHeaderElem.value =
          SBString("device.dialog.setup.name.label");

        // Set the default device name textbox value.
        var setupNameTextboxElem =
              document.getElementById("setup_name_textbox");
        var defaultName;

        try {
          defaultName = this._device.properties.defaultName;
        } catch (ex) {
          Cu.reportError(ex);
        }

        if (!defaultName)
          defaultName = this._device.name;

        if (defaultName) {
          setupNameTextboxElem.value = defaultName;
        }
        else {
          try { productName = this._device.productName; } catch (ex) {}
          setupNameTextboxElem.value = productName;
        }

        // Set the volume selector device ID.
        var volumeSelectorElem =
              document.getElementById("device_setup_volume_selector");
        volumeSelectorElem.setAttribute("device-id", this._device.id);

        // Listen to device events.
        var deviceEventTarget =
              this._device.QueryInterface(Ci.sbIDeviceEventTarget);
        deviceEventTarget.addEventListener(this);

        // Update the dialog.
        this._update();
      },


      /**
       * Handle unload events.
       */

      onUnload: function deviceSetupDialog_onUnload() {
        // Stop listening to notification box events.
        this._stopListeningToNotificationBoxEvents();

        // Stop listening to device events.
        if (this._device) {
          var deviceEventTarget =
                this._device.QueryInterface(Ci.sbIDeviceEventTarget);
          deviceEventTarget.removeEventListener(this);
        }
      },


      /**
       * Handle dialog accept events based on the status of the check boxes.
       *
       * \return true
       */

      onAccept: function deviceSetupDialog_onAccept() {
        var ignoreCheckboxElem =
              document.getElementById("setup_ignore_checkbox");
        var ignoreContainerElem = document.getElementById("ignoreContainer");

        if (!ignoreContainerElem.hidden && ignoreCheckboxElem.checked) {
          var ignoreList = Application.prefs.getValue(
                                            "songbird.device.ignorelist", "");
          // Append a separator if necessary.
          if (ignoreList != "") {
            ignoreList += ";";
          }
          ignoreList += this._device.id;
          Application.prefs.setValue("songbird.device.ignorelist", ignoreList);

          // Remove the device.
          var manager = Cc["@songbirdnest.com/Songbird/DeviceManager;2"]
                          .getService(Ci.sbIDeviceManager2);
          var controller = manager.getController(this._device.controllerId);
          var marshall = manager.getMarshallByID(controller.marshallId);
          this._device.cancelRequests();
          marshall.removeDevice(this._device);
        }
        else {
          // Set the device name.
          var setupNameTextboxElem =
                document.getElementById("setup_name_textbox");
          this._device.properties.friendlyName = setupNameTextboxElem.value;
        }

        return true;
      },

      /**
       * Handle ignore checkbox click event.
       */

      toggleIgnore: function deviceSetupDialog_toggleIgnore(event) {
        var ignoreCheckboxElem =
              document.getElementById("setup_ignore_checkbox");
        var nameTextboxElem = document.getElementById("setup_name_textbox");
        var syncContainerElem = document.getElementById("syncContainer");
        var dialogElem = document.getElementById("device_setup_dialog");
        var acceptButton = dialogElem.getButton("accept");

        // Add the notification hat and update the button label
        // Also disable the sync boxes.
        if (ignoreCheckboxElem.checked) {
          acceptButton.label =
            SBString("device.dialog.setup.button.ignore.label");
          syncContainerElem.setAttribute("disabled", true);
          nameTextboxElem.setAttribute("disabled", true);

          var key = "device.dialog.setup.ignoreDevice.message";
          if (getPlatformString() == "Darwin")
            key = key + ".macos";
          this.showErrorNotification(SBString(key), "PRIORITY_INFO_HIGH");
        }
        else {
          acceptButton.label =
            SBString("device.dialog.setup.button.default.label");
          syncContainerElem.removeAttribute("disabled");
          nameTextboxElem.removeAttribute("disabled");
          this.removeErrorNotifications();
        }

      },

      /**
       * Remove the notification hat.
       */
      removeErrorNotifications: function()
      {
        var oldNotif;
        var notifBox = document.getElementById("device_setup_notification_box");
        while ((oldNotif = notifBox.getNotificationWithValue(
                                      "device_setup_notice"))) {
          notifBox.removeNotification(oldNotif);
        }

        // Stop listening to notification box events.
        this._stopListeningToNotificationBoxEvents();
      },

      /**
       * Shows a notification message after removing any other ones of
       * the same class.
       */
      showErrorNotification: function(aMsg, aLevel) {
        var notifBox = document.getElementById("device_setup_notification_box");

        // show the notification, hiding any other ones of this class
        this.removeErrorNotifications();
        var level = aLevel || "PRIORITY_CRITICAL_LOW";
        notifBox.appendNotification(aMsg,
                                    "device_setup_notice",
                                    null,
                                    notifBox[level],
                                    []);

        // Start listening to notification box events.
        this._startListeningToNotificationBoxEvents();
      },


      /**
       * Update the device setup dialog.
       */

      _update: function deviceSetupDialog__update() {
        if (this._device.currentStatus.currentState ==
            Ci.sbIDevice.STATE_DISCONNECTED) {
          onExit();
        }

        // Only show volume selector if the device has multiple volumes.
        var content = this._device.content;
        var libraries = content.libraries;
        var selectorContainerElem =
              document.getElementById("selectorContainer");
        if (libraries.length > 1) {
          selectorContainerElem.removeAttribute("hidden");
        }
        else {
          selectorContainerElem.setAttribute("hidden", "true");
        }

        // Only show the ignore box for MSC device.
        var deviceType = this._device.parameters.getProperty("DeviceType");
        var dialogElem = document.getElementById("device_setup_dialog");
        var ignoreContainerElem = document.getElementById("ignoreContainer");
        if ((deviceType != "WPD") && (deviceType != "MTP")) {
          ignoreContainerElem.removeAttribute("hidden");
        }
        else {
          ignoreContainerElem.setAttribute("hidden", "true");
        }

        // Resize window to content.
        WindowUtils.sizeToContent(window);
      },


      /**
       * Start listening to notification box events.
       */

      _startListeningToNotificationBoxEvents: function
        deviceSetupDialog__startListeningToNotificationBoxEbvents() {
        // Use an interval to monitor the notification box to resize the window
        // when the notification box is presented.  Unfortunately, there does
        // not appear to be an event available that fires when the notification
        // box has been fully presented.  It would be nice to find a better way
        // to do this.
        var self = this;
        var func = function() { self._onNotificationBoxEvent(); };
        this._notificationBoxInterval = window.setInterval(func, 250);
      },


      /**
       * Stop listening to notification box events.
       */

      _stopListeningToNotificationBoxEvents: function
        deviceSetupDialog__stopListeningToNotificationBoxEbvents() {
        // Stop listening to notification box events.
        if (this._notificationBoxInterval)
          window.clearInterval(this._notificationBoxInterval);
        this._notificationBoxInterval = null;
      },


      /**
       * Handle a notification box event.
       */

      _onNotificationBoxEvent: function
        deviceSetupDialog__onNotificationBoxEvent() {
        // Resize window to content.
        WindowUtils.sizeToContent(window);
      },


      //------------------------------------------------------------------------
      //
      // Device volume selector sbIDeviceEventListener services.
      //
      //------------------------------------------------------------------------

      /**
       * Handle the device event specified by aEvent.
       *
       * \param aEvent              Device event.
       */

      onDeviceEvent: function deviceSetupDialog_onDeviceEvent(aEvent) {
        // Dispatch processing of event.
        switch (aEvent.type)
        {
          case Ci.sbIDeviceEvent.EVENT_DEVICE_LIBRARY_ADDED :
          case Ci.sbIDeviceEvent.EVENT_DEVICE_LIBRARY_REMOVED :
          case Ci.sbIDeviceEvent.EVENT_DEVICE_STATE_CHANGED :
            this._update();
            break;

          default :
            break;
        }
      }
    };
  ]]></script>

</dialog>
