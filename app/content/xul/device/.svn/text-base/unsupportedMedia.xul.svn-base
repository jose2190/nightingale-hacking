<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->

<!-- Import external definitions. -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css"
                 type="text/css"?>

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd">

<!-- ***************************************************************************
 *
 * Unsupported media dialog box.
 *
 *   This dialog box presents a list of media that is not supported by a device.
 * Dialog box arguments are passed in using an nsIDialogParamBlock with the
 * following parameters:
 *
 *   String                     String parameters.
 *     options                  Comma separated list of options.
 *       allowDisable           Allow user to disable dialog box.
 *   objects                    nsISupports parameters.
 *     nsIDevice                Device object.
 *     nsIArray                 Array of unsupported media items (sbIMediaItem).
 *
 *************************************************************************** -->

<!-- Unsupported media dialog box. -->
<dialog
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  id="unsupported_media_dialog"
  hidechrome="true"
  flex="1"
  type="songbird"
  title="&device.unsupported_media.dialog.title;"
  buttons="accept"
  ondialogaccept="onExit();"
  onload="unsupportedMediaDlg.onLoad();"
  onunload="unsupportedMediaDlg.onUnload();">

  <!-- *************************************************************************
   *
   * Content.
   *
   ************************************************************************* -->

  <!-- Use Songbird window region. -->
  <windowregion/>

  <vbox>

    <!-- Dialog box description. -->
    <description id="dialog_msg"/>

    <!-- Unsupported media list. -->
    <sb-closable-box id="media_listbox_box">
      <listbox id="media_listbox" flex="1"/>
    </sb-closable-box>

    <!-- Dialog enable checkbox. -->
    <checkbox id="dialog_enable"
              checked="true"
              label="&device.unsupported_media.dialog.enable;"
              hidden="true"/>

  </vbox>


  <!-- *************************************************************************
   *
   * Implementation.
   *
   ************************************************************************* -->

  <!-- Import the Songbird services. -->  
  <script type="application/x-javascript"
          src="chrome://global/content/globalOverlay.js"/>
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/windowUtils.js" />
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />

  <!-- Unsupported media dialog services. -->
  <script><![CDATA[

    //
    // Defs.
    //

    if (typeof(Cc) == "undefined")
      var Cc = Components.classes;
    if (typeof(Ci) == "undefined")
      var Ci = Components.interfaces;
    if (typeof(Cr) == "undefined")
      var Cr = Components.results;
    if (typeof(Cu) == "undefined")
      var Cu = Components.utils;


    //
    // Unsupported media dialog services object.
    //

    var unsupportedMediaDlg = {

      //
      // Configuration.
      //
      //   _maxRows             Maximum number of rows to show in unsupported
      //                        media listbox.
      //

      _maxRows: 9,


      //
      // Object fields.
      //
      //   _device              sbIDevice object.
      //   _options             Dialog options object.
      //   _friendlyName        Device friendly name.
      //

      _device: null,
      _options: null,
      _friendlyName: null,


      //------------------------------------------------------------------------
      //
      // Public functions.
      //
      //------------------------------------------------------------------------

      /**
       * \brief Handle load events.
       */

      onLoad: function unsupportedMediaDlg_onLoad() {
        // Get the UI parameters.
        var dialogPB = window.arguments[0].QueryInterface
                                             (Ci.nsIDialogParamBlock);
        this._device = dialogPB.objects.queryElementAt(0, Ci.sbIDevice);
        var unsupportedItems = dialogPB.objects.queryElementAt(1, Ci.nsIArray);

        // Decode the options.
        this._options = {};
        var options = dialogPB.GetString(0);
        if (options) {
          options = options.split(",");
          for (var i = 0; i < options.length; i++) {
            this._options[options[i]] = true;
          }
        }

        // Set the dialog message.
        var dialogMsg = SBFormattedString("device.unsupported_media.dialog.msg",
                                          [ this._getDeviceFriendlyName() ]);
        var dialogMsgTextNode = document.createTextNode(dialogMsg);
        var dialogMsgElem = document.getElementById("dialog_msg");
        dialogMsgElem.appendChild(dialogMsgTextNode);

        // Set the media listbox box label.
        var listboxBoxElem = document.getElementById("media_listbox_box");
        var listboxCaption;
        if (unsupportedItems.length != 1) {
          listboxCaption =
            SBFormattedString("device.unsupported_media.dialog.listbox.caption",
                              [ unsupportedItems.length ]);
        } else {
          listboxCaption =
            SBString("device.unsupported_media.dialog.listbox.caption_1");
        }
        listboxBoxElem.setAttribute("label", listboxCaption);

        // Fill the unsupported media listbox.
        var listboxElem = document.getElementById("media_listbox");
        var itemEnum = unsupportedItems.enumerate();
        while (itemEnum.hasMoreElements()) {
          // Get the URL of the item.
          var mediaURL = itemEnum.getNext()
	                         .QueryInterface(Ci.nsIURL);

          // Add the media item file name to the listbox.
          listboxElem.appendItem(decodeURIComponent(mediaURL.fileName));
        }

        // Set the number of unsupported media listbox rows.
        var numRows = unsupportedItems.length;
        if (numRows > this._maxRows)
          numRows = this._maxRows;
        listboxElem.setAttribute("rows", numRows + 1);

        // Show the dialog enable checkbox.
        if (this._options.allowDisable) {
          var dialogEnableElem = document.getElementById("dialog_enable");
          dialogEnableElem.hidden = false;
        }
      },


      /**
       * \brief Handle unload events.
       */

      onUnload: function unsupportedMediaDlg_onUnload() {
        // Check if this dialog should be disabled.
        if (this._options.allowDisable) {
          var dialogEnableElem = document.getElementById("dialog_enable");
          if (!dialogEnableElem.checked)
            this._disableDialog();
        }
      },


      //------------------------------------------------------------------------
      //
      // Internal functions.
      //
      //------------------------------------------------------------------------

      /**
       * \brief Return the device friendly name.
       *
       * \return Device friendly name.
       */

      _getDeviceFriendlyName: function
                                unsupportedMediaDlg__getDeviceFriendlyName() {
        if (!this._friendlyName)
          this._friendlyName = this._device.properties.friendlyName;
        return this._friendlyName;
      },


      /**
       * \brief Disable this dialog from being presented for the device.
       */

      _disableDialog: function unsupportedMediaDlg__disableDialog() {
        alert("Disable dialog");
      }
    };

  ]]></script>

</dialog>
