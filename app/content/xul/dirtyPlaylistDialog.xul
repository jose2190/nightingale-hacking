<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->

<!-- Import external definitions. -->
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/skin/songbird.css" type="text/css"?>
<?xml-stylesheet href="chrome://songbird/content/bindings/bindings.css"
                 type="text/css"?>

<!DOCTYPE window [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
<!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
%brandDTD;
%songbirdDTD;
]>

<!-- ***************************************************************************
 *
 * Dirty playlist dialog box.
 *
 *   If a user imports a playlist from an external library and later modifies it
 * in Songbird, it's considered "dirty."  If the user then re-imports from the
 * external library, the dirty playlist dialog is used to query what action to
 * take.  The possible actions are to keep the Songbird playlist without any
 * modifications, merge the Songbird playlist with the external library
 * playlist, or replace the Songbird playlist with the external library
 * playlist.
 *
 *************************************************************************** -->

<dialog
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  id="dirty_playlist_dialog"
  hidechrome="true"
  flex="1"
  type="songbird"
  title="&import_library.dirty_playlist_dialog.title;"
  buttons="accept"
  onload="dirtyPlaylistDialog.onLoad();"
  onunload="dirtyPlaylistDialog.onUnload();"
>

  <!-- *************************************************************************
   *
   * Content.
   *
   ************************************************************************* -->

  <!-- Use Songbird window region. -->
  <windowregion/>

  <!-- Dialog box description. -->
  <description id="dialog_description"/>

  <!-- Action radio buttons. -->
  <radiogroup id="action_radiogroup">

    <!-- Keep playlist radio. -->
    <radio id="keep_radio"
           value="keep"
           label="&import_library.dirty_playlist_dialog.keep;"/>

    <!-- Merge playlist radio. -->
    <radio id="merge_radio"
           value="merge"
           label="&import_library.dirty_playlist_dialog.merge;"/>

    <!-- Replace playlist radio. -->
    <radio id="replace_radio"
           value="replace"
           label="&import_library.dirty_playlist_dialog.replace;"/>

  </radiogroup> <!-- action_radiogroup -->

  <!-- Dialog box note. -->
  <description>
    &import_library.dirty_playlist_dialog.note;
  </description>

  <!-- Apply all checkbox. -->
  <checkbox id="apply_all_checkbox"
            label="&import_library.dirty_playlist_dialog.apply_all;"/>


  <!-- *************************************************************************
   *
   * Implementation.
   *
   ************************************************************************* -->

  <!-- Import the Songbird services. -->
  <script type="application/x-javascript"
          src="chrome://global/content/globalOverlay.js"/>
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/windowUtils.js" />
  <script type="application/x-javascript"
          src="chrome://songbird/content/scripts/sbDataRemoteUtils.js" />

  <!-- Dirty playlist dialog services. -->
  <script><![CDATA[

    //
    // Defs.
    //

    if (typeof(Cc) == "undefined")
      var Cc = Components.classes;
    if (typeof(Ci) == "undefined")
      var Ci = Components.interfaces;
    if (typeof(Cr) == "undefined")
      var Cr = Components.results;


    //
    // Dirty playlist dialog services object.
    //

    var dirtyPlaylistDialog = {
      //
      // Object fields.
      //
      //   _dialogPB            Dialog box parameter block.
      //

      _dialogPB: null,


      //------------------------------------------------------------------------
      //
      // Public functions.
      //
      //------------------------------------------------------------------------

      /**
       * Handle load events.
       */

      onLoad: function dirtyPlaylistDialog_onLoad() {
        // Get the dialog parameters.
        this._dialogPB =
               window.arguments[0].QueryInterface(Ci.nsIDialogParamBlock);
        var playlistName = this._dialogPB.GetString(0);

        // Set default selection to "keep" and to not apply to all playlists.
        var radioGroupElem = document.getElementById("action_radiogroup");
        radioGroupElem.value = "keep";
        this._dialogPB.SetString(0, "keep");
        this._dialogPB.SetString(1, "false");

        // Set the dialog description.
        var descriptionElem = document.getElementById("dialog_description");
        var description = SBFormattedString
                            ("import_library.dirty_playlist_dialog.message",
                             [ playlistName ]);
        var descriptionTextNode = document.createTextNode(description);
        descriptionElem.appendChild(descriptionTextNode);
      },


      /**
       * Handle unload events.
       */

      onUnload: function dirtyPlaylistDialog_onUnload() {
        // Get selected action.
        var radioGroupElem = document.getElementById("action_radiogroup");
        this._dialogPB.SetString(0, radioGroupElem.value);

        // Get the apply all setting.
        var applyAllElement = document.getElementById("apply_all_checkbox");
        this._dialogPB.SetString(1, applyAllElement.getAttribute("checked"));
      }
    }

  ]]></script>

</dialog>

