<?xml version="1.0"?>
<!--
/*
//
// BEGIN SONGBIRD GPL
// 
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
// 
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
// 
// Software distributed under the License is distributed 
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either 
// express or implied. See the GPL for the specific language 
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this 
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc., 
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
// 
// END SONGBIRD GPL
//
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">


  
  
  <!-- DRAWER BASE CONTROL -->

  
  
  
  <binding id="drawer-base">

   <implementation type="application/x-javascript">

     <constructor>
       <![CDATA[
         this.boxid = "growbox."+this.getAttribute("id");
         // drawers that flex need to set the property of their flex-able hbox parent.
         // Find that element by using our hflex attribute which contains the id of
         // the flex-able hbox.
         var hflexId = this.getAttribute("hflex");
         if (hflexId) {
           this.hflex = document.getElementById(hflexId);
           if (this.hflex)
             this.hflex.setAttribute("flex", "0");
         }
         setTimeout(function(obj) { obj.start(); }, 0, this);
       ]]>
     </constructor>
     <destructor>
     </destructor>

      <field name="tracking">false</field>
      <field name="before">document.getAnonymousElementByAttribute(this, 'sbid', 'before');</field>
      <field name="parent">document.getAnonymousElementByAttribute(this, 'sbid', 'parent');</field>
      <field name="template">document.getAnonymousElementByAttribute(this, 'sbid', 'template');</field>
      <field name="header">document.getAnonymousElementByAttribute(this, 'sbid', 'header');</field>
      <field name="openclosebutton">document.getAnonymousElementByAttribute(this, 'sbid', 'drawer_openclose');</field>
      <field name="size">0</field>  <!-- height of the added content box -->
      <field name="distance">0</field>
      <field name="current">0</field>
      <field name="anim_start">0</field>
      <field name="anim_time">0.2</field>
      <field name="anim_complete">null</field>
      <field name="interval">null</field>
      <field name="first_windowsize">false</field>
      <field name="bundleInterface">null</field>
      <field name="boxid">null</field>
      <field name="hflex">null</field>
      <field name="init">0</field>
      <field name="accumsize">0</field>

      <method name="start">
        <body>
          this.init = 1;
        </body>
      </method>

      <method name="growDrawer">
        <parameter name="now"/>
        <parameter name="replacedheight"/>
        <parameter name="contentsize"/>
        <parameter name="before"/>
        <body>
          <![CDATA[
          try
          {
            // No animations until we finish
            if ( ! this.tracking )
            {
              if (!this.maxheight) {
                var maxheight1 = parseInt(this.getAttribute("maxheight"));
                var maxheight2 = -1;
                try {
                  maxheight2 = this.getMaxHeight();
                } catch (e) { }
                if (maxheight1 && maxheight2) this.maxheight = Math.min(maxheight1, maxheight2);
                else if (maxheight1) this.maxheight = maxheight1;
                else if (maxheight2) this.maxheight = maxheight2;
                else this.maxheight = -1;  
                if (!this.maxheight) {
                  try {
                    this.maxheight = this.getMaxHeight();
                  } catch (e) {
                    this.maxheight = -1;
                  }
                }
              }
              var size = Math.max(contentsize, replacedheight);
              // total size of content
              this.accumsize += size;
              // is there a max size ?
              if (this.maxheight != -1) {
                // is our content gonna be bigger ?
                var diff = this.accumsize - this.maxheight;
                if (diff > 0) {
                  // reduce growing by diff
                  size -= diff;
                  if (size < 0) size = 0;
                }
              }
              if (this.openclosebutton) this.openclosebutton.label = "-";
              if (this.hflex) this.hflex.setAttribute("flex", "1");

              // Make the growbox
              this.growbox = document.createElement( "box" );
              this.growbox.setAttribute( "flex", "1" );
              this.growbox.setAttribute( "sbid", this.boxid );
              this.parent.insertBefore( this.growbox, before );
              
              // Set our animation values
              this.tracking = true;
              this.distance = size - replacedheight;
              this.current = 0;
              this.anim_start = now ? -9999 : new Date().getTime();
              this.anim_time = 0.2;
              this.anim_complete = this.onGrowComplete;
              this.anim_complete_event = "opendrawer";

              // Start our animation loop
              if (!now && size != 0) this.interval = setInterval(function(obj) { obj.animationCallback(); }, 0, this); 
              else this.animationCallback();
            }
          }
          catch ( err )
          {
            alert( "drawer.xml - growDrawer - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="shrinkDrawer">
        <parameter name="now"/>
        <parameter name="replacedheight"/>
        <parameter name="contentsize"/>
        <parameter name="content"/>
        <body>
          <![CDATA[
          try
          {
            // No animations until we finish
            if ( ! this.tracking )
            {
              var size = Math.max(contentsize, replacedheight);
              // total size of content
              this.accumsize -= size;
              // is there a max size ?
              if (this.maxheight != -1) {
                // if we are still bigger than the max, dont change actual height
                if (this.accumsize >= this.maxheight) size = 0;
                else {
                  // otherwise shrink by as much as possible, but no more than diff with maxheight
                  var diff = this.maxheight - this.accumsize;
                  if (diff > 0) {
                    size = Math.min(size, diff);
                  }
                }
              }
              if (this.openclosebutton) this.openclosebutton.label = "+";
              if (this.hflex) this.hflex.setAttribute("flex", "1");

              // Make the growbox
              this.growbox = document.createElement( "box" );
              this.growbox.setAttribute( "flex", "1" );
              this.growbox.setAttribute( "sbid", this.boxid );
              this.parent.insertBefore( this.growbox, content );

              // Remove the content
              this.removeContent(content);

              // Set our animation values
              this.tracking = true;
              this.distance = - (size-replacedheight); // removing!
              this.current = 0;
              this.anim_start = now ? -9999 : new Date().getTime();
              this.anim_time = 0.2;
              this.anim_complete = this.onShrinkComplete;
              this.anim_complete_event = "closedrawer";
              
              // Start our animation loop
              if (!now) this.interval = setInterval(function(obj) { obj.animationCallback(); }, 0, this); 
              else this.animationCallback();
              }
          }
          catch ( err )
          {
            alert( "drawer.xml - shrinkDrawer - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="animationCallback">
        <body>
          <![CDATA[
          try
          {
            if ( this.tracking )
            {
              // Calculate size to resize window based on timer interpolation
              var elapsed = ( new Date().getTime() - this.anim_start ) / 1000;
              var interpolate = elapsed / this.anim_time;
              var size = parseInt( ( this.distance * interpolate ) - this.current + 0.5 );
              
              // We have to track a "current" because we do not resize the window via absolute values
              if ( Math.abs( this.current + size ) > Math.abs( this.distance ) )
                size = this.distance - this.current;

              if (size != 0) {
                window.resizeBy( 0, size+1 );
                this.current += size;
              }
              
              // Are we done?
              if ( this.current == this.distance )
              {
                if ( this.anim_complete )
                {
                  this.anim_complete( );
                }

                var e = document.createEvent("Events");
                e.initEvent(this.anim_complete_event, false, true);
                this.dispatchEvent(e);
                
                // Set our values back
                this.tracking = false;
                this.distance = 0;
                this.current = 0;
                clearInterval( this.interval );
                this.interval = null;
                
                if (this.maxheight != -1) {
                  if (this.accumsize >= this.maxheight) {
                    this.parent.setAttribute("style", "height: " + this.maxheight + "px;");
                  } else {
                    this.parent.removeAttribute("style");
                  }
                }
              }
            }
            else
            {
              clearInterval( this.interval );
              this.interval = null;
            }
          }
          catch ( err )
          {
            alert( "drawer.xml - animationCallback - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="onGrowComplete">
        <body>
          <![CDATA[
          try
          {
            // Replace the grow box with the content item
            if ( this.growbox )
            {
              this.insertContent( this.growbox );
              this.parent.removeChild( this.growbox );
            }
            if (this.hflex) this.hflex.setAttribute("flex", "0");
          }
          catch ( err )
          {
            alert( "drawer.xml - onGrowComplete - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="onShrinkComplete">
        <body>
          <![CDATA[
          try
          {
            // Replace the grow box with the content item
            if ( this.growbox )
            {
              this.parent.removeChild( this.growbox );
            }
            if (this.hflex) this.hflex.setAttribute("flex", "0");
          }
          catch ( err )
          {
            alert( "drawer.xml - onShrinkComplete - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="cloneBindingChildren">
        <body>
        <![CDATA[
          var box = document.createElement("hbox");
          // clone children
          var children = this.childNodes;
          for (var i=0;i<children.length;i++) {
            var object = children[i].cloneNode(true);
            box.appendChild(object);
          }
          return box;
        ]]>
        </body>
      </method>
      
      <method name="getContentSize">
        <body>
          return this.contentsize;
        </body>
      </method>

      <method name="getContent">
        <body>
          return this.content;
        </body>
      </method>

      <method name="isAnimating">
        <body>
          <![CDATA[
            return this.interval != null;
          ]]>
        </body>
      </method>

   </implementation>
 
  </binding>

  <!-- SINGLE CONTENT DRAWER BASE -->

  <binding id="drawer-single" extends="chrome://songbird/content/bindings/drawer.xml#drawer-base">

    <content>
      
      <xul:vbox class="drawer-box" sbid="parent" flex="1">
       
        <xul:hbox sbid="header">
          <xul:vbox flex="1">
            <xul:spacer flex="1"/>
            <xul:label xbl:inherits="value=title"/>
            <xul:spacer flex="1"/>
          </xul:vbox>
          <xul:spacer flex="1"/>
          <xul:button  sbid="drawer_openclose" label="+" oncommand="toggleDrawer();"/>
        </xul:hbox>
            
        <xul:vbox hidden="true" sbid="template" class="drawer-content">
          <children/>
        </xul:vbox>        

        <!-- stuff gets stuffed here -->

        <xul:spacer sbid="before" height="1"/>

      </xul:vbox>
    </content>

    <implementation>

      <constructor>
        this.state = "closed";
        if (this.getAttribute("header") == "false") {
          this.header.setAttribute("hidden", "true");
        }
      </constructor>

      <property name="state"
                onget="return this.getAttribute('state')"
                onset="this.setAttribute('state', val);" />

      <method name="toggleDrawer">
        <parameter name="now"/>
        <parameter name="replacedheight"/>
        <body>
          <![CDATA[
          try
          {
            if (this.tracking) return;
            if (!replacedheight) replacedheight = 0;
            if (this.state == "closed") {
              if (!this.drawercontent) {
                this.computeContentHeight();
                this.drawercontent = this.createDrawerContent();
                var eclass = this.drawercontent.getAttribute("class");
                if (eclass) eclass += " "; else eclass = "";
                eclass += "drawer-content";
                this.drawercontent.setAttribute("class", eclass);
                this.drawercontent.setAttribute("style", "height: " + this.getContentSize() + "px;");
              }
              this.state = "open";
              this.growDrawer(now, replacedheight, this.contentsize);
            } else {
              this.state = "closed";
              this.shrinkDrawer(now, replacedheight, this.contentsize, this.content);
              this.content = null;
              this.drawercontent = null;
              this.contentsize = 0;
            }
          }
          catch ( err )
          {
            alert( "drawer.xml - toggleDrawer - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="openDrawer">
        <parameter name="now"/>
        <parameter name="replacedheight"/>
        <body>
          if (this.state == "closed") {
            this.toggleDrawer(now, replacedheight);
          }
        </body>
      </method>

      <method name="closeDrawer">
        <parameter name="now"/>
        <parameter name="replacedheight"/>
        <body>
          if (this.state == "open") {
            this.toggleDrawer(now, replacedheight);
          }
        </body>
      </method>

      <method name="insertContent">
        <parameter name="before"/>
        <body>
          <![CDATA[
          try
          {
            try 
            {
              this.content = this.drawercontent;
              this.parent.insertBefore( this.content, before );
            }
            catch (e) { }
            try 
            {
              this.onContentInserted(this.content);
            }
            catch (e) { }
          }
          catch ( err )
          {
            dump( "drawer.xml - insertContent - " + err );
          }
          ]]>
        </body>
      </method>

      <method name="removeContent">
        <parameter name="content"/>
        <body>
          <![CDATA[
            try
            {
              this.parent.removeChild( content );
              try 
              {
                this.onContentRemoved(content);
              }
              catch (e) { }
            }
            catch ( err )
            {
              dump( "drawer.xml - insertContent - " + err );
            }
          ]]>
        </body>
      </method>

      <method name="computeContentHeight">
        <body>
        <![CDATA[
          var height;
          try {
            height = this.getContentSize();
          } catch (e) {
          }
          if (!height || height == 0) {
            if (!this.init) {
              Components.utils.reportError("sb-multi-drawer: templatized drawer cannot compute its height before binding is initialized, use setTimeout");
            }
            height = window.getComputedStyle(this.template, "").height;
            if (!height || height == "auto") {
              Components.utils.reportError("sb-drawer: no css height defined for drawer content");
              height = "25";
            }
            this.contentsize = parseInt(height);
            height = window.getComputedStyle(this.template, "").marginTop;
            if (height && height != "none") this.contentsize += parseInt(height);
            height = window.getComputedStyle(this.template, "").marginBottom;
            if (height && height != "none") this.contentsize += parseInt(height);
          } else {
            this.contentsize = height;
          }
        ]]>
        </body>
      </method>

      <method name="createDrawerContent">
        <body>
          return this.cloneBindingChildren();
        </body>
      </method>

    </implementation>

  </binding>

  <!-- MULTI CONTENT DRAWER BASE -->
  
  <!--
  
  The drawer-multi binding creates multiple items, each being a duplicate of the
  template that it is given by way of its 'children' element.
  
  - Use addItem and removeItem to add and remove items. In addition, buttons
    with sbtype="remove-drawer-item" and sbtype="add-drawer-item" in the template
    will automatically cause items to be created and removed when they are clicked.
  
  - Use .items to list all instantiated items.
  
  - Use getItemElementByAttribute to retrieve one of the item's elements based on an
    attribute. Instead of the item, you may give any of the item's children elements
    as a parameter (for instance, if you got it via an event).
  
  - Use getItem(child) to retrieve the drawer item that contains a child.
  
  - Use setState/getState to store and retrieve the state of each item. The state
    object contains one sub-object per item, each of these contains properties that
    can be mapped to any property or attribute of the templatized items such that
    setting a state property on the object used in setState will reflect that
    property onto a property or attribute of the element. To do this, use the
    following attributes on the elements:
    
    - drawer-prop-map="prop1=stateprop1,prop2=stateprop2"
    - drawer-attr-map="attr1=stateprop3,attr2=stateprop4"
    
    For instance, with the above attributes, setState({stateprop1:"hello", 
    stateprop3:"world"}) (for a single item drawer) will set element.prop1="hello" and 
    element.setAttribute("attr1", "world").
    
    Upon calling getState, the values of the element's properties and attributes are copied
    back into the state object, which is then returned.
    
    Properties and attributes may also be mapped unidirectionally, for either the
    setState or the getState phase. For setState, use drawer-prop-map-set and
    drawer-attr-map-set. For getState, use drawer-prop-map-get and drawer-attr-map-get.
    
    Note that state properties are set to the elements' properties and attributes regardless
    of visibility, but are only copied back if the element is visible.
  
  -->

  <binding id="drawer-multi" extends="chrome://songbird/content/bindings/drawer.xml#drawer-base">

    <content>
      
      <!-- Use a scrollbox so that we can scroll it manually -->
      <xul:scrollbox orient="vertical" class="drawer-box" sbid="parent" flex="1">
        
        <xul:vbox hidden="true" sbid="template" class="drawer-content-item">
          <children/>
        </xul:vbox>

        <!-- stuff gets stuffed here -->

        <xul:spacer sbid="before" height="1"/>

      </xul:scrollbox>
    </content>

    <implementation>

      <constructor>
        this.itemsize = -1;
      </constructor>

      <!-- the array of draw items -->
      <field name="items">this.parent.getElementsByAttribute( "sbtype", "drawer-item" );</field>

      <method name="start">
        <body>
          this.computeItemHeight();
          this.init = 1;
        </body>
      </method>
      
      <method name="addItem">
        <parameter name="now"/>
        <parameter name="before"/>
        <parameter name="state"/>
        <body>
          if (!this.init) {
            Components.utils.reportError("sb-multi-drawer: templatized drawer cannot compute its items height before binding is initialized, use setTimeout");
          }
          this.nextlabelstate = state ? state : this.defaultstate;
          this.growDrawer(now, 0, this.itemsize, before ? before : this.before);
        </body>
      </method>

      <method name="removeItem">
        <parameter name="now"/>
        <parameter name="item"/>
        <body>
          this.shrinkDrawer(now, 0, this.itemsize, item);
        </body>
      </method>

      <method name="removeAllItems">
        <body>
         <![CDATA[
          var item_nodes = this.parent.getElementsByAttribute( "sbtype", "drawer-item" );
          for (var i=0;i<item_nodes.length;i++) { 
            var item = item_nodes[i];
            this.shrinkDrawer( true, 0, this.itemsize, item );
          }
         ]]>
        </body>
      </method>

      <method name="setState">
        <parameter name="statearray"/>
        <parameter name="defaultstate"/>
        <body>
         <![CDATA[
          this.defaultstate = defaultstate;
          this.removeAllItems();
          var n = statearray.length;
          for (var i=0; i<n; i++)
            this.addItem(true);
          var item_nodes = this.items;
          for (i=0;i<item_nodes.length;i++) { 
            var node = item_nodes[i];
            if (node.nodeType != Node.ELEMENT_NODE) continue;
            if (i >= n) break; // should never happen
            this.setItemState(node, statearray[i]);
          }
         ]]>
        </body>
      </method>

      <method name="setItemState">
        <parameter name="item_element"/>
        <parameter name="state"/>
        <body>
         <![CDATA[
          try {
            for each (var map in ["drawer-prop-map", "drawer-prop-map-set"]) {
              var propmap_str = item_element.getAttribute(map);
              if (!propmap_str || propmap_str == "") continue;
              var propmap_array = propmap_str.split(",");
              for (var p in propmap_array) {
                var pair = propmap_array[p].split("=");
                var elementproperty = pair[0];
                var stateproperty = pair[1];
                var not = false;
                if (stateproperty.substr(0,1) == "!") {
                  not = true;
                  stateproperty = stateproperty.substr(1);
                }
                try {
                  var value = state[stateproperty];
                  if (value != null) {
                    if (not) value = !value;
                    item_element[elementproperty] = value;
                  }
                } catch (e) {
                  Components.utils.reportError(e);
                }
              }
            }
            for each (var map in ["drawer-attr-map", "drawer-attr-map-set"]) {
              var attrmap_str = item_element.getAttribute(map);
              if (!attrmap_str || attrmap_str == "") continue;
              var attrmap_array = attrmap_str.split(",");
              for (var p in attrmap_array) {
                var pair = attrmap_array[p].split("=");
                var elementattribute = pair[0];
                var stateproperty = pair[1];
                var not = false;
                if (stateproperty.substr(0,1) == "!") {
                  not = true;
                  stateproperty = stateproperty.substr(1);
                }
                try {
                  var value = state[stateproperty];
                  if (value != null) {
                    if (not) value = !value;
                    item_element.setAttribute(elementattribute, value);
                  }
                } catch (e) {
                  Components.utils.reportError(e);
                }
              }
            }
          } catch (e) {
            Components.utils.reportError(e);
          }
          for (var i=0;i<item_element.childNodes.length;i++) {
            var childnode = item_element.childNodes[i];
            if (childnode.nodeType != Node.ELEMENT_NODE) continue;
            this.setItemState(item_element.childNodes[i], state);
          }
         ]]>
        </body>
      </method>

      <method name="getState">
        <body>
         <![CDATA[
          var state = [];
          var item_nodes = this.parent.getElementsByAttribute( "sbtype", "drawer-item" );
          for (var i=0;i<item_nodes.length;i++) {
            var node = item_nodes[i];
            if (node.nodeType != Node.ELEMENT_NODE) continue;
            if (node.hidden) continue;
            var obj = {};
            this.getItemState(node, obj);
            state.push(obj);
          }
          return state;
         ]]>
        </body>
      </method>

      <method name="getItemState">
        <parameter name="item_element"/>
        <parameter name="state"/>
        <body>
         <![CDATA[
            for each (var map in ["drawer-prop-map", "drawer-prop-map-get"]) {
              try {
                var propmap_str = item_element.getAttribute(map);
                if (!propmap_str || propmap_str == "") continue;
                var propmap_array = propmap_str.split(",");
                for (var p in propmap_array) {
                  var pair = propmap_array[p].split("=");
                  var elementproperty = pair[0];
                  var stateproperty = pair[1];
                  var not = false;
                  if (stateproperty.substr(0,1) == "!") {
                    not = true;
                    stateproperty = stateproperty.substr(1);
                  }
                  var value = item_element[elementproperty];
                  if (not) value = !value;
                  state[stateproperty] = value;
                }
              } catch (e) {
                Components.utils.reportError(e);
              }
            }
            for each (var map in ["drawer-attr-map", "drawer-attr-map-get"]) {
              try {
                var attrmap_str = item_element.getAttribute(map);
                if (!attrmap_str || attrmap_str == "") continue;
                var attrmap_array = attrmap_str.split(",");
                for (var p in attrmap_array) {
                  var pair = attrmap_array[p].split("=");
                  var elementattribute = pair[0];
                  var stateproperty = pair[1];
                  var not = false;
                  if (stateproperty.substr(0,1) == "!") {
                    not = true;
                    stateproperty = stateproperty.substr(1);
                  }
                  var value = item_element.getAttribute(elementattribute);
                  if (not) value = !value;
                  state[stateproperty] = value;
                }
              } catch (e) {
                Components.utils.reportError(e);
              }
            }
            for (var i=0;i<item_element.childNodes.length;i++) {
              var childnode = item_element.childNodes[i];
              if (childnode.nodeType != Node.ELEMENT_NODE) continue;
              if (childnode.hidden) continue;
              this.getItemState(childnode, state)
            }
         ]]>
        </body>
      </method>
      
      <method name="getItem">
        <parameter name="element"/>
        <body>
          <![CDATA[
            while (element && element != document) {
              if (element.nodeType == Node.ELEMENT_NODE && 
                  element.getAttribute("sbtype") == "drawer-item") 
                return element;
              element = element.parentNode;
            }
            return null;
          ]]>
        </body>
      </method>

      <method name="getItemElementByAttribute">
        <parameter name="_item_or_child"/>
        <parameter name="attribute"/>
        <parameter name="attributeValue"/>
        <parameter name="mustbevisible"/>
        <body>
          <![CDATA[
          var item = this.getItem(_item_or_child);
          if (!item) {
            Components.utils.reportError("item is not a drawer item or any of its children");
            return null;
          }
          var v = this._searchElement(item, attribute, attributeValue, mustbevisible);
          return v;
          ]]>
        </body>
      </method>

      <method name="_searchElement">
        <parameter name="parentNode"/>
        <parameter name="attribute"/>
        <parameter name="attributeValue"/>
        <parameter name="mustbevisible"/>
        <body>
          <![CDATA[
          var nodes = parentNode.childNodes;
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.nodeType == Node.ELEMENT_NODE) {
              if (mustbevisible && this._isHiddenDeep(node)) continue;
              if (node.getAttribute(attribute) == attributeValue)
                return node;
              var found = this._searchElement(node, attribute, attributeValue, mustbevisible);
              if (found) return found;
            }
          }
          return null;
          ]]>
        </body>
      </method>
      
      <method name="_isHiddenDeep">
        <parameter name="node"/>
        <body>
          while (node) {
            if (node.hidden) return true;
            node = node.parentNode;
          }
          return false;
        </body>
      </method>

      <method name="updateContent">
        <body>
          <![CDATA[
          var item_nodes = this.parent.getElementsByAttribute( "sbtype",
                                                               "drawer-item" );
          var remove_item_nodes = this.parent.getElementsByAttribute
                                                ( "sbtype",
                                                  "remove-drawer-item" );
          var remove_disabled = (item_nodes.length > 1 ? false : true);
          for (var i = 0; i < remove_item_nodes.length; i++) {
            if (remove_disabled)
              remove_item_nodes[i].setAttribute( "disabled", true );
            else
              remove_item_nodes[i].removeAttribute( "disabled" );
          }
          ]]>
        </body>
      </method>

      <method name="insertContent">
        <parameter name="before"/>
        <body>
          this.lastcreateditem = this.createDrawerContent();
          this.lastcreateditem.setAttribute("style", "height: " + this.itemsize + "px; overflow: hidden;");
          this.lastcreateditem.setAttribute("sbtype", "drawer-item");
          this.parent.insertBefore( this.lastcreateditem, before );
          if (this.nextlabelstate) this.setItemState(this.lastcreateditem, this.nextlabelstate);
          this.nextlabelstate = null;
          this.updateContent();
          var e = document.createEvent("Events");
          e.initEvent("additem", false, true);
          this.lastcreateditem.dispatchEvent(e);
          setTimeout(function(o) {
              o.parent.boxObject.
                QueryInterface(Components.interfaces.nsIScrollBoxObject).
                  ensureElementIsVisible(o.lastcreateditem);
            }, 0, this);
        </body>
      </method>

      <method name="removeContent">
        <parameter name="content"/>
        <body>
          this.parent.removeChild( content );
          this.updateContent();
          var e = document.createEvent("Events");
          e.initEvent("removeitem", false, true);
          this.dispatchEvent(e);
        </body>
      </method>

      <method name="computeItemHeight">
        <body>
        <![CDATA[
          var height = window.getComputedStyle(this.template, "").height;
          if (!height || height == "auto") {
            Components.utils.reportError("sb-multi-drawer: no css height defined for content template");
            height = "25";
          }
          this.itemsize = parseInt(height);
          height = window.getComputedStyle(this.template, "").marginTop;
          if (height && height != "none") this.itemsize += parseInt(height);
          height = window.getComputedStyle(this.template, "").marginBottom;
          if (height && height != "none") this.itemsize += parseInt(height);
        ]]>
        </body>
      </method>

      <method name="getMaxHeight">
        <body>
        <![CDATA[
          var maxvisitems = parseInt(this.getAttribute("maxvisibleitems"));
          if (!maxvisitems) return -1;
          return maxvisitems * this.itemsize;
        ]]>
        </body>
      </method>

      <method name="createDrawerContent">
        <body>
          return this.cloneBindingChildren();
        </body>
      </method>

    </implementation>

   <handlers>
     <handler event="command">
      <![CDATA[
      try {
        if ( event.originalTarget ) {
          var sbtype = event.originalTarget.getAttribute( "sbtype" );
          switch ( sbtype ) {
            case "add-drawer-item":
              this.addItem(false, event.originalTarget.parentNode.parentNode.nextSibling);
              break;
            case "remove-drawer-item":
              var item_nodes = this.parent.getElementsByAttribute( "sbtype", "drawer-item" );
              if ( item_nodes.length > 1 ) {
                this.removeItem(false, event.originalTarget.parentNode.parentNode);
              }
              break;
          }
        }
      }
      catch ( err ) {
        alert( "onCommand - " + err );
      }
      ]]>
     </handler>
   </handlers>

  </binding>
  
</bindings>

