<?xml version="1.0"?>
<!DOCTYPE bindings SYSTEM "chrome://songbird/locale/songbird.dtd">
<!--
/*
//
// BEGIN SONGBIRD GPL
//
// This file is part of the Songbird web player.
//
// Copyright(c) 2005-2008 POTI, Inc.
// http://songbirdnest.com
//
// This file may be licensed under the terms of of the
// GNU General Public License Version 2 (the "GPL").
//
// Software distributed under the License is distributed
// on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
// express or implied. See the GPL for the specific language
// governing rights and limitations.
//
// You should have received a copy of the GPL along with this
// program. If not, go to http://www.gnu.org/licenses/gpl.html
// or write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// END SONGBIRD GPL
//
 */
-->

<!--
  an addon pane is a place where extensions (and potentially web content) can
  add content for display in a frame, similar to Firefox's sidebar / web panels.
-->
<!--
  WARNING: if you want to remove (or even move) this element dynamically via DOM,
  call destroy() before you do so.
-->

<xbl:bindings
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <xbl:binding id="sb-displaypane">
    <!-- a single display pane (with associated title bar) -->
    <xbl:content>
      <vbox flex="1">
       <browser anonid="content" flex="1" type="chrome" disablehistory="true"
                 xbl:inherits="orient"/>
      </vbox>
    </xbl:content>
    
    <xbl:implementation implements="sbIDisplayPaneInstantiator">
      <xbl:constructor><![CDATA[
      try {
        this._lastURL = Components.classes["@songbirdnest.com/Songbird/DataRemote;1"]
                                  .createInstance(Components.interfaces.sbIDataRemote);
        this._lastHiddenState = Components.classes["@songbirdnest.com/Songbird/DataRemote;1"]
                                  .createInstance(Components.interfaces.sbIDataRemote);
        
      	// if the stateid attribute doesn't exist, fall back to id.
      	// (and if that fails too, use contentGroup)
      	var stateid = this.getAttribute("stateid") || this.id || this.contentGroup;
        this._lastURL.init("displayPanes." + stateid + ".lastURL", null);
        
        this._lastHiddenState.init("displayPanes." + stateid + ".isHidden", null);
        // do not register until our browser is ready
        var paneMgr = Components.classes["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
                                .getService(Components.interfaces.sbIDisplayPaneManager);
        setTimeout(function(self) {
          paneMgr.registerInstantiator(self);
        }, 0, this);

        // load the last opened URL
        var paneLoaded = false;
        if (this._lastURL.stringValue && !this._lastHiddenState.boolValue) {
          var paneinfo = paneMgr.getPaneInfo(this._lastURL.stringValue);
          if (paneinfo) {
            // hide the pane as soon as possible if the url is about:blank
            if (paneinfo.contentUrl == "about:blank") {
              //this._hidden = true;
              this.collapsed = true;
            }
            
            // Load the URL once the browser has had time to initialize.
            var self = this;
            var browserElement = this._getElem("content");
            browserElement.addEventListener("load", function paneInitListener() {
              browserElement.removeEventListener("load", paneInitListener, true);
              self._internalLoadURL(paneinfo);
            }, true);
            
            paneLoaded = true;
          }
        } else {
          // hide the pane as soon as possible if we dont have a lasturl to load
          //this._hidden = true;
          this.collapsed = true;
        }

        if (!paneLoaded) {
          if ("undefined" != typeof(OverlayLoader)) {
            // if the extension is being registered via windowtype overlays, it
            // can show up later.  Wait for that to happen and try again.
            if (OverlayLoader.loadCompleted) {
              // over loads are done; nothing we can do.
              //this.hide();
              this.collapsed = true;
            } else {
              // there are more overlays to load; wait for them to be done
              var self = this;
              document.addEventListener("sb-overlay-load", function() {
                document.removeEventListener("sb-overlay-load", arguments.callee, false);
                var paneinfo = paneMgr.getPaneInfo(self._lastURL.stringValue);
                if (paneinfo && !self._lastHiddenState.boolValue) {
                  self._internalLoadURL(paneinfo);
                } else {
                  // still nothing
                  //self.hide();
                  self.collapsed = true;
                  self._internalLoadURL(paneMgr.defaultPaneInfo);
                }
              }, false);
            }
          } else {
            // there's no overlay loader, so there's no more chance for us to do anything
            //this.hide();
            this.collapsed = true;
          }
        }
        /*
        var contentItems = 
          document.getAnonymousElementByAttribute(this._splitter, 
                                                  "anonid", 
                                                  "contentitems");
        // magic trick to force the contentitems binding to
        // construct synchronously
        if (contentItems)
          contentItems.style.MozBinding;
          */
      } catch(e) {
        Components.utils.reportError(e);
      }
      ]]></xbl:constructor>
      <xbl:destructor><![CDATA[
        this.destroy();
      ]]></xbl:destructor>

      <xbl:property name="contentGroup" readonly="true">
        <xbl:getter><![CDATA[
          return this.getAttribute("contentgroup");
        ]]></xbl:getter>
      </xbl:property>
      <xbl:property name="contentTitle">
        <xbl:getter><![CDATA[
          var label;
          if (this.id == "displaypane_servicepane_bottom")
            label = document.getElementById("servicepane-status-bar-label");
          else
            label = document.getAnonymousElementByAttribute(this._splitter,
                                                            "anonid",
                                                            "splitter-label");
          return (label.value);
        ]]></xbl:getter>
        <xbl:setter><![CDATA[
          var label;
          if (this.id == "displaypane_servicepane_bottom")
            label = document.getElementById("servicepane-status-bar-label");
          else
            label = document.getAnonymousElementByAttribute(this._splitter,
                                                            "anonid",
                                                            "splitter-label");
          label.value = val;
        ]]></xbl:setter>
      </xbl:property>
      <xbl:property name="contentUrl" readonly="true">
        <xbl:getter><![CDATA[
          var elem = document.getAnonymousElementByAttribute(this, "anonid", "content");
          if (!elem || !elem.currentURI)
            return null;
          return elem.currentURI.spec;
        ]]></xbl:getter>
      </xbl:property>
    <xbl:property name="contentWindow" readonly="true">
        <xbl:getter><![CDATA[
          var elem = document.getAnonymousElementByAttribute(this, "anonid", "content");
          return elem.contentWindow;
        ]]></xbl:getter>
      </xbl:property>
      <xbl:property name="displayPane" readonly="true">
        <xbl:getter><![CDATA[
          return this;
        ]]></xbl:getter>
      </xbl:property>
      <xbl:property name="lastContentURL" readonly="true">
        <xbl:getter><![CDATA[
          return this._lastURL.stringValue;
        ]]></xbl:getter>
      </xbl:property>
      <xbl:property name="popup" readonly="true">
        <xbl:getter><![CDATA[
          return popup = document.getAnonymousElementByAttribute(this, "anonid", "menu");
        ]]></xbl:getter>
      </xbl:property>
      <xbl:property name="collapsed">
        <xbl:getter><![CDATA[
          return this.hasAttribute("collapsed");
        ]]></xbl:getter>
        <xbl:setter><![CDATA[
        /*
          if (val) {
            this.setAttribute("collapsed", true);
          } else {
            this.removeAttribute("collapsed");
            if (this._hidden)
              this._hidden = false;
          }
          // trigger the splitter's mouse event to update the drop-down menu
          // disabled state
          this._splitter.toggleDropdownButton(!val);
          */
          if (val)
            this._splitter.setAttribute("state", "collapsed");
          else
            this._splitter.setAttribute("state", "open");
          this._splitter.toggleDropdownButton(!val);
          return val;
        ]]></xbl:setter>
      </xbl:property>
      <xbl:property name="_splitter">
        <xbl:getter><![CDATA[
          if (!this.hasAttribute("splitter"))
            return null;
          return document.getElementById(this.getAttribute("splitter"));
        ]]></xbl:getter>
      </xbl:property>
      <xbl:property name="_hidden">
        <xbl:getter><![CDATA[
          var splitter = this._splitter;
          if (!splitter)
            return false;
          return splitter.hasAttribute("collapsed");
        ]]></xbl:getter>
        <xbl:setter><![CDATA[
          var splitter = this._splitter;
          if (splitter) {
            if (val) {
              splitter.setAttribute("collapsed", true);
            } else {
              splitter.removeAttribute("collapsed");
            }
          }
          if (val != this.collapsed)
            this.collapsed = val;

          return val;
        ]]></xbl:setter>
      </xbl:property>
      <xbl:method name="loadContent">
        <xbl:parameter name="aPaneInfo"/>
        <xbl:body><![CDATA[
        try{
          if (this.contentUrl == aPaneInfo.contentUrl) {
            this.collapsed = false;
            return;
          }
          this._internalLoadURL(aPaneInfo);
          
          // XXX Mook: getComputedStyle for -moz-box-orient lies, see BMO 216838
          // and yes, xul attributes override CSS :(
          var orient = getComputedStyle(this, "").MozBoxOrient;
          if (this.hasAttribute("orient"))
            orient = this.getAttribute("orient");
          if (orient == "vertical") {
            this.width = aPaneInfo.defaultWidth;
            this.collapsed = false;
          } else {
            this.height = aPaneInfo.defaultHeight;
            this.collapsed = false;
          }
        } catch(e) {
          Components.utils.reportError(e);
        }
        ]]></xbl:body>
      </xbl:method>
      <xbl:method name="_internalLoadURL">
        <!-- this loads a content URL without sizing anything -->
        <xbl:parameter name="aPaneInfo"/>
        <xbl:body><![CDATA[
        try{
          // reset the title
          this.contentTitle = "";

          //this._hidden = (aPaneInfo.contentUrl == "about:blank");
          this._getElem("content").loadURI(aPaneInfo.contentUrl, null, null);
          // save the last loaded URL
          this._lastURL.stringValue = aPaneInfo.contentUrl;
          this._lastHiddenState.boolValue = this._hidden;
        } catch(e) {
          Components.utils.reportError(e);
        }
        ]]></xbl:body>
      </xbl:method>
      <xbl:method name="hide">
        <xbl:body><![CDATA[
          this._hidden = true;
          this._lastHiddenState.boolValue = true;
          this._getElem("content").loadURI("about:blank", null, null);
        ]]></xbl:body>
      </xbl:method>
      <xbl:method name="show">
        <xbl:body><![CDATA[
          // show the last loaded pane
          var lastContent = this.lastContentURL;
          var paneMgr = 
            Components
              .classes["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
              .getService(Components.interfaces.sbIDisplayPaneManager);

          var paneinfo = paneMgr.getPaneInfo(lastContent);
          if (!paneinfo)
            paneinfo = paneMgr.defaultPaneInfo;
          this.loadContent(paneinfo);
        ]]></xbl:body>
      </xbl:method>
      <xbl:method name="_getElem">
        <xbl:parameter name="aId"/>
        <xbl:body><![CDATA[
          return document.getAnonymousElementByAttribute(this, "anonid", aId);
        ]]></xbl:body>
      </xbl:method>
      <xbl:method name="destroy">
        <xbl:body><![CDATA[
          var paneMgr = Components.classes["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
                                  .getService(Components.interfaces.sbIDisplayPaneManager);
          paneMgr.unregisterInstantiator(this);

          this._lastHiddenState.unbind();
        ]]></xbl:body>
      </xbl:method>

    </xbl:implementation>
    
    <xbl:handlers>
    </xbl:handlers>
  </xbl:binding>
  <xbl:binding id="sb-displaypane-menuitems">
    <!-- the placeholder for the menu items in the view menu -->
    <xbl:implementation implements="nsIDOMEventListener">
      <xbl:constructor><![CDATA[
        this._items = [];
        this.parentNode.addEventListener("popupshowing", this, false);
        this.handleEvent(null);
      ]]></xbl:constructor>
      <xbl:field name="_items">[]</xbl:field>
      <xbl:method name="handleEvent">
        <xbl:parameter name="aEvent"/>
        <xbl:body><![CDATA[
        try{
          if (aEvent && aEvent.originalTarget != this.parentNode) {
            // this was being bubbled up; ignore
            return;
          }
          var item;
          while ((item = this._items.pop())) {
            this.parentNode.removeChild(item);
          }
            
          var paneMgr = 
            Components
              .classes["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
              .getService(Components.interfaces.sbIDisplayPaneManager);
          
          var enumerator = paneMgr.instantiatorsList;
          if (enumerator.hasMoreElements()) {
            // do we need a separator?
            var sib = this.previousSibling;
            do {
              if (sib == null || sib.localName == "menuseparator") {
                // no separator required
                break;
              } else {
                // insert a separator between elements
                var sep = document.createElement("menuseparator");
                this.parentNode.insertBefore(sep, this);
                this._items.push(sep);
                break;
              }
            } while (sib = sib.previousSibling);
          }

          // for each display pane instantiator registered with the manager
          // create a menu item and stuff it in the view menu
          while (enumerator.hasMoreElements()) {
            var instantiator = enumerator.getNext();
            instantiator
              .QueryInterface(Components.interfaces.sbIDisplayPaneInstantiator);
            instantiator.QueryInterface(Components.interfaces.nsIDOMXULElement);
            item = document.createElement("menuitem");
            var isCollapsed = instantiator.collapsed;
            var label = instantiator.contentGroup;
            if (instantiator.hasAttribute("label")) {
              label = instantiator.getAttribute("label");
            }

            var strKey = (isCollapsed ? 
                            "menu.displaypane.title.show" : 
                            "menu.displaypane.title.hide");
            item.setAttribute("label", this.formatString(strKey, label));
            item.setAttribute("target", instantiator.id);
            item.setAttribute("url", instantiator.contentUrl);
            
            var loadcmd = function(aEvent, aId) {
              var binding = document.getElementById(aId);
              var paneMgr = 
                Components
                  .classes["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
                  .getService(Components.interfaces.sbIDisplayPaneManager);

              var paneinfo = paneMgr.getPaneInfo(binding._lastURL.stringValue);
              if (!paneinfo)
                paneinfo = paneMgr.defaultPaneInfo;
              
              binding.loadContent(paneinfo);
            }
            var unloadcmd = function(aEvent, aId) {
              var binding = document.getElementById(aId);
              var paneMgr = 
                Components
                  .classes["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
                  .getService(Components.interfaces.sbIDisplayPaneManager);
              binding.hide();
            }
            item.setAttribute("oncommand",
                              "(" + 
                              (instantiator.collapsed ? 
                                (uneval(loadcmd)) : (uneval(unloadcmd))) + 
                              ")(event, '" + instantiator.id + "')");
            item.className = "menuitem-iconic displaypane-topmenu";

            this.parentNode.insertBefore(item, this);
            this._items.push(item);
          }
        } catch(e) {
          Components.utils.reportError(e);
        }
        ]]></xbl:body>
      </xbl:method>
      <xbl:method name="formatString">
        <xbl:parameter name="aStrKey" />
        <xbl:parameter name="aLabel" />
        <xbl:body>
          <![CDATA[
            if (!this._strBundle) {
              var retVal = "";
              
              var strBundleService = 
                Components.classes["@mozilla.org/intl/stringbundle;1"]
                  .getService(Components.interfaces.nsIStringBundleService); 
              
              this._strBundle = 
                strBundleService
                  .createBundle("chrome://songbird/locale/songbird.properties");          
            }
            
            try {
              retVal = this._strBundle.formatStringFromName(aStrKey, 
                                                            [ aLabel ], 1);
            }
            catch (e) {
            }
            
            return retVal;
          ]]>
        </xbl:body>
      </xbl:method>
    </xbl:implementation>
  </xbl:binding>

  <xbl:binding id="sb-displaypane-content-menuitems">
    
    <!-- the placeholder for the list of available displaypanes in a menu, plus
         show/hide and 'get more stuff' items. connected to its display pane
         via its id, specified as a "paneid" attribute on this binding -->
    <xbl:implementation implements="nsIDOMEventListener">
    
      <xbl:constructor>
        this._items = [];
        this.parentNode.addEventListener("popupshowing", this, false);
      </xbl:constructor>
    
      <xbl:property name="contentGroup" readonly="true">
        <xbl:getter>
          // return the contentGroup for the associated display pane
          var paneid = this.getAttribute("paneid");
          if (!paneid) 
            return null;
          var binding = document.getElementById(paneid);
          return binding.contentGroup;
        </xbl:getter>
      </xbl:property>

      <xbl:property name="contentUrl" readonly="true">
        <xbl:getter>
          // return the contentUrl for the associated display pane
          var paneid = this.getAttribute("paneid");
          if (!paneid)
            return null;
          var binding = document.getElementById(paneid);
          return binding.contentUrl;
        </xbl:getter>
      </xbl:property>
      
      <xbl:method name="_buildItems">
        <xbl:body><![CDATA[
          const Cc = Components.classes;
          const Ci = Components.interfaces;

          // add all the items to the parent menu
          try {
            // first remove all previously added items
            this._deleteItems();
            
            var paneid = this.getAttribute("paneid");
            if (!this.contentGroup) 
              return;
            
            // do we want a top and/or bottom separator ?
            var wantSeps = this.getAttribute("separator").split(",");
            var wantBottomSeparator = wantSeps.indexOf("bottom") != -1;
            var wantTopSeparator = wantSeps.indexOf("top") != -1;

            if (wantTopSeparator) {
              var sep = document.createElement("menuseparator");
              this.parentNode.insertBefore(sep, this);
              this._items.push(sep);
            }

            // add the "Show"/"Hide" item
            /*
            var binding = document.getElementById(paneid);
            var elem = document.createElement("menuitem");
            elem.setAttribute("label", 
                              binding.collapsed ? 
                                SBString("menu.displaypane.title.showpane", 
                                         "Show") : 
                                SBString("menu.displaypane.title.hidepane", 
                                         "Hide"));
            elem.
              setAttribute("oncommand",
                           binding.collapsed ? 
                             "document.getElementById('" + paneid + "').show()" :
                             "document.getElementById('" + paneid + "').hide()");

            this.parentNode.insertBefore(elem, this);
            this._items.push(elem);

            // add a separator
            var sep = document.createElement("menuseparator");
            this.parentNode.insertBefore(sep, this);
            this._items.push(sep);
            */

            // add an item for each available display pane content
            var paneMgr = Cc["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
                            .getService(Ci.sbIDisplayPaneManager);
            var contentGroup = this.contentGroup.toUpperCase();
            
            // Iterate over the registered display panes and only add items that
            // are registered for the current display pane.
            var displayPanes = [];
            var contentInfoEnum = paneMgr.contentList;
            while (contentInfoEnum.hasMoreElements()) {
              var curContentInfo = contentInfoEnum.getNext();
              curContentInfo.QueryInterface(Ci.sbIDisplayPaneContentInfo);

              var itemGroups = curContentInfo.suggestedContentGroups
                                             .toUpperCase();
              if (itemGroups.split(";").indexOf(contentGroup) != -1) {
                displayPanes.push(curContentInfo);
              }
            }

            // sort by title
            function addonPaneSorter(x, y) {
              if (x.contentTitle < y.contentTitle) 
                return -1;
              if (y.contentTitle < x.contentTitle)
                return 1;
              return 0;
            }
            displayPanes.sort(addonPaneSorter);

            // actually generate menuitems for each |DisplayPaneItem|.
            var shouldInsertSeparator = false;
            for each (var item in displayPanes) {
              var elem;

              // if this item is the currently loaded display pane, then
              // inspect it to see if it has submenu states
              var submenuFound = false;
              if (item.contentUrl == this.contentUrl) {
                var paneid = this.getAttribute("paneid");
                var paneWin = document.getElementById(paneid).contentWindow;
                if (typeof(paneWin.onDisplayPaneMenuPopup) == "function") {
                  submenuFound = true;
                  elem = document.createElement("menu");
                  elem.setAttribute("label", item.contentTitle);
                  elem.setAttribute("image", item.contentIcon);
                  elem.setAttribute("displaypanesubmenu", "true");
                  elem.setAttribute("class", "menu-iconic");
                  var menupopup = document.createElement("menupopup");
                  menupopup.className = "menulist-menupopup";
                  elem.appendChild(menupopup);
                  paneWin.onDisplayPaneMenuPopup("create", menupopup, document);
                }
              }
              if (!submenuFound) {
                elem = document.createElement("menuitem");
                elem.setAttribute("label", item.contentTitle);
                elem.setAttribute("url", item.contentUrl);
                elem.setAttribute("image", item.contentIcon);
                elem.setAttribute("type", "radio");
                elem.setAttribute("class", "displaypane-menuitem");
    
                if (item.contentUrl == this.contentUrl) {
                  elem.setAttribute("selected", "true");
                }

                // we embed an oncommand that carries enough information to call
                // this binding again with the menu item being used.  This is
                // unfortunately quite ugly.
                var oncommand = function(aEvent, aId) {
                  var binding = document.getElementById(aId);
                  var menuitem = aEvent.target;
                  var paneMgr =
                      Cc["@songbirdnest.com/Songbird/DisplayPane/Manager;1"]
                         .getService(Ci.sbIDisplayPaneManager);
                  var paneinfo = 
                    paneMgr.getPaneInfo(menuitem.getAttribute("url"));
                  binding.loadContent(paneinfo);
                }
                elem.setAttribute("oncommand",
                                  "(" + uneval(oncommand) +
                                  ")(event, '" + paneid + "')");
              }

              // insert the menuitem
              this.parentNode.insertBefore(elem, this);
              this._items.push(elem);

              shouldInsertSeparator = true;
            }
          
            // Only draw a separator if we inserted a least one menuitem.
            if (shouldInsertSeparator) {
              var sep = document.createElement("menuseparator");
              this.parentNode.insertBefore(sep, this);
              this._items.push(sep);
            }

            // add the "get more stuff" menuitem
            var elem = document.createElement("menuitem");
            elem.setAttribute("label", 
                              SBString("menu.displaypane.title.getmore", 
                                       "Get More Display Panes..."));
            elem.setAttribute("oncommand", "onMenu(this);");
            elem.setAttribute("value", "songbird.url.addons.displaypanes");

            this.parentNode.insertBefore(elem, this);
            this._items.push(elem);

            // if we want a bottom separator, add it
            if (wantBottomSeparator) {
              var sep = document.createElement("menuseparator");
              this.parentNode.insertBefore(sep, this);
              this._items.push(sep);
            }

          }
          catch (e) {
            Components.utils.reportError(e);
          }
          
        ]]></xbl:body>
      </xbl:method>
      
      <xbl:method name="_deleteItems">
        <xbl:body><![CDATA[
          // remove all items
          var item;
          while ((item = this._items.pop())) {
            if (item.getAttribute("displaypanesubmenu", "true")) {
              // display pane sub-menu (<menu>)
              var paneid = this.getAttribute("paneid");
              var paneWin = document.getElementById(paneid).contentWindow;
              if (typeof(paneWin.onDisplayPaneMenuPopup) != "undefined") {
                // invoke the display pane function to destroy the submenu
                paneWin.onDisplayPaneMenuPopup("destroy");

                // destroy the menu
                while (item.firstChild)
                  item.removeChild(item.firstChild);
              }
            }
            this.parentNode.removeChild(item);
          }
        ]]></xbl:body>
      </xbl:method>

      <xbl:method name="handleEvent">
        <xbl:parameter name="aEvent"/>
        <xbl:body><![CDATA[
          if (aEvent && aEvent.originalTarget != this.parentNode) {
            // this is a sub-menu event bubbling up
            return true;
          }
          // the menu is building, add all items
          this._buildItems();
        ]]>
        </xbl:body>
      </xbl:method>

    </xbl:implementation>
  </xbl:binding>

  <xbl:binding id="sb-displaypane-button">
    <!-- a display pane button, opens/close its associated pane,
         and receives notifications in order to turn on/off when that pane
         is shown/hidden by something else. also exposes the content menu
         as a context menu -->
    <xbl:content>
      <button anonid="button"/>
      <popupset>
        <popup class="sb-playlist-popup menulist-menupopup"
               anonid="popup">
          <sb-displaypane-content-menuitems anonid="contentitems" 
                                            xbl:inherits="paneid"/>
        </popup>
      </popupset>
    </xbl:content>
    <xbl:implementation>
      <xbl:constructor><![CDATA[
      try {
        // connect to the appropriate display pane, using a dataremote based
        // on the id of the pane, specified via the "paneid" attribute on this
        // binding
        this._lastHiddenState = 
          Components.classes["@songbirdnest.com/Songbird/DataRemote;1"]
                    .createInstance(Components.interfaces.sbIDataRemote);
        
      	var paneid = this.getAttribute("paneid");
        this._lastHiddenState.init("displayPanes." + paneid + ".isHidden", 
                                   null);

        var binding = this;
        var observer = {
          observe: function(s,t,d) { binding._onStateChanged(); } 
        }

        this._lastHiddenState.bindObserver( observer, false );
        
        // magic trick to force the contentitems binding to
        // construct synchronously. 
        this._contentitems.style.MozBinding;
      } catch(e) {
        Components.utils.reportError(e);
      }
      ]]></xbl:constructor>
      <xbl:destructor><![CDATA[
        this.destroy();
      ]]></xbl:destructor>
      
      <xbl:method name="destroy">
        <xbl:body><![CDATA[
          this._lastHiddenState.unbind();
        ]]></xbl:body>
      </xbl:method>

      <xbl:field name="_popup">
        document.getAnonymousElementByAttribute(this, "anonid", "popup");
      </xbl:field>

      <xbl:field name="_button">
        document.getAnonymousElementByAttribute(this, "anonid", "button");
      </xbl:field>

      <xbl:field name="_contentitems">
        document.getAnonymousElementByAttribute(this, "anonid", "contentitems");
      </xbl:field>

      <xbl:property name="_closed" readonly="true">
        <xbl:getter><![CDATA[
          return this._lastHiddenState.boolValue;
        ]]></xbl:getter>
      </xbl:property>
      
      <xbl:method name="_onStateChanged">
        <xbl:body>
          // update the "state" attribute, so that css can switch the
          // image on the fly
          if (this._closed) {
            this.setAttribute("state", "closed");
          } else {
            this.removeAttribute("state");
          }
          // update the tooltip
          var contentpane = this._contentpane;
          var label = contentpane.contentGroup;
          if (contentpane.hasAttribute("label")) {
            label = contentpane.getAttribute("label");
          }
          var strKey = (this._closed ? 
                          "menu.displaypane.title.show" : 
                          "menu.displaypane.title.hide");
          this._button.setAttribute("tooltiptext",
                                    this.formatString(strKey, label));
        </xbl:body>
      </xbl:method>
      
      <xbl:property name="_contentpane" readonly="true">
        <xbl:getter>
        	var paneid = this.getAttribute("paneid");
          return document.getElementById(paneid);
        </xbl:getter>
      </xbl:property>

      <xbl:method name="show">
        <xbl:body>
        	var contentpane = this._contentpane;
        	if (contentpane) {
        	  // show the last content
        	  contentpane.show();
            this._onStateChanged();
          }
        </xbl:body>
      </xbl:method>

      <xbl:method name="hide">
        <xbl:body>
        	var contentpane = this._contentpane;
        	if (contentpane) {
        	  // hide/collapse the pane
        	  contentpane.hide();
            this._onStateChanged();
          }
        </xbl:body>
      </xbl:method>
      
      <xbl:method name="formatString">
        <xbl:parameter name="aStrKey" />
        <xbl:parameter name="aLabel" />
        <xbl:body>
          <![CDATA[
            if (!this._strBundle) {
              var retVal = "";
              
              var strBundleService = 
                Components.classes["@mozilla.org/intl/stringbundle;1"]
                  .getService(Components.interfaces.nsIStringBundleService); 
              
              this._strBundle = 
                strBundleService
                  .createBundle("chrome://songbird/locale/songbird.properties");          
            }
            
            try {
              retVal = 
                this._strBundle.formatStringFromName(aStrKey, [ aLabel ], 1);
            }
            catch (e) {
            }
            
            return retVal;
          ]]>
        </xbl:body>
      </xbl:method>

    </xbl:implementation>
    
    <xbl:handlers>
      <xbl:handler event="command">
      <![CDATA[
        // handle clicks on the button
        if (event.originalTarget != this._button)
          return;
        if (this._closed)
          this.show();
        else
          this.hide();
        event.stopPropagation();
      ]]>
      </xbl:handler>

      <xbl:handler event="contextmenu">
      <![CDATA[
        // handle right click
        var anchor = this.getAttribute("popupanchor") || "topleft";
        var align = this.getAttribute("popupalign") || "bottomleft";
        this._popup.showPopup(this,
                              -1, -1,
                              "popup",
                              anchor,
                              align);
        event.stopPropagation();
        event.preventDefault();
      ]]>
      </xbl:handler>
    </xbl:handlers>
  </xbl:binding>

</xbl:bindings>
