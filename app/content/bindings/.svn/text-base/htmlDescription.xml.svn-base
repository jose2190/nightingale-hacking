<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2009 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!-- Import external definitions. -->
<!DOCTYPE window [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
<!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
%brandDTD;
%songbirdDTD;
]>

<bindings
      xmlns="http://www.mozilla.org/xbl"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- *************************************************************************
   *****************************************************************************
   *
   * HTML description widget.
   *
   *   This widget implements a XUL description element that renders its text
   * content as html.  This is useful for using HTML in description elements
   * whose text content is set dynamically.
   *   An example of this use is specifying text styles in localized strings
   * such as "This is <b>important</b>".  If the string is specified in a DTD
   * file, and the default XML namespace is XHTML, the string will be rendered
   * as HTML with a bold "important".  However, if the string is written to the
   * description element dynamically, "important" will not display as bold.
   *   When a child text node is added, this widget parses the text node content
   * as HTML and replaces the text node with the resulting HTML nodes.
   *
   *****************************************************************************
   ************************************************************************* -->

  <binding id="sb-html-description" extends="xul:description">

    <!-- ***********************************************************************
     *
     * Implementation.
     *
     *********************************************************************** -->

    <implementation>
      <!--
       * Private fields.
       *
       *   _ignoreNodeInserted  If true, ignore node inserted events.
       -->

      <field name="_ignoreNodeInserted">false</field>


      <!--
      /**
       * \brief Construct the widget.
       */
       -->

      <constructor> <![CDATA[
        // If the first child is a text node, render it as HTML.
        var firstChild = this.firstChild;
        if (firstChild &&
            (firstChild.nodeType ==
             Components.interfaces.nsIDOMNode.TEXT_NODE)) {
          this._renderTextNode(firstChild);
        }
      ]]></constructor>


      <!--
      /**
       * Render the text node specified by aNode as HTML and replace the node
       * with the rendered HTML elements.
       *
       * \param aNode           Text node to render as HTML.
       */
       -->

      <method name="_renderTextNode">
        <parameter name="aNode"/><body><![CDATA[
        // Render text node.  Leave text node alone if an exception occurs
        // (e.g., invalid HTML in text).
        try {
          // Get the node text.
          var nodeText = aNode.nodeValue;

          // Create an XHTML snippet that can be parsed into DOM.
          var xhtmlText = '<div xmlns="http://www.w3.org/1999/xhtml">' +
                          nodeText +
                          '</div>';

          // Parse the XHTML into a document.
          var xhtmlDoc = (new DOMParser()).parseFromString(xhtmlText,
                                                           "text/xml");
          var documentElement = xhtmlDoc.documentElement;

          // Validate parsed XHTML in case the text node did not contain valid
          // XHTML.  Return without modifying text node if parsed XHTML is not
          // valid.
          if ((documentElement.namespaceURI !=
               "http://www.w3.org/1999/xhtml") ||
              (documentElement.nodeName != "div")) {
            Components.utils.reportError("Invalid XHTML: " + nodeText);
            return;
          }

          // Import the XHTML into the current document and replace the text
          // node with the XHTML.
          var xhtmlNode = document.importNode(documentElement, true);
          aNode.parentNode.replaceChild(xhtmlNode, aNode);
        }
        catch (ex) {
          Components.utils.reportError(ex);
        }
      ]]></body></method>


    </implementation>


    <!-- ***********************************************************************
     *
     * Handlers.
     *
     *********************************************************************** -->

    <handlers>

      <!--
      /**
       * \brief Handle DOM node inserted events.
       */
       -->

      <handler event="DOMNodeInserted"><![CDATA[
        // Do nothing if ignoring node inserted events.
        if (this._ignoreNodeInserted)
          return;

        // Get the inserted node.
        var insertedNode = event.originalTarget;

        // Do nothing if not a text node.
        if (insertedNode.nodeType != Components.interfaces.nsIDOMNode.TEXT_NODE)
          return;

        // Ignore node inserted events.
        this._ignoreNodeInserted = true;

        // Render inserted text node as HTML.
        this._renderTextNode(insertedNode);

        // Stop ignoring node inserted events.
        this._ignoreNodeInserted = false;
      ]]></handler>

    </handlers>

  </binding>

</bindings>

