<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2009 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd" >

<bindings id="splitterBindings"
   xmlns="http://www.mozilla.org/xbl"
   xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="splitter" extends="xul:splitter">
    <resources>
      <stylesheet src="chrome://global/skin/splitter.css"/>
    </resources>
  </binding>

  <binding id="displaypane-grippy" extends="xul:button">
    <resources>
      <stylesheet src="chrome://global/skin/splitter.css"/>
    </resources>

    <implementation>
      <method name="animateSplitter">
        <parameter name="splitter" />
        <parameter name="element" />
        <parameter name="dim" />
        <parameter name="orig" />
        <parameter name="from" />
        <parameter name="to" />
        <parameter name="interval" />
        <parameter name="ascending" />
        <body><![CDATA[
          var self = this;
          from = parseInt(from);
          to = parseInt(to);
          if (ascending) {
            // growing from->to
            if (from < to) {
              var diff = to-from;
              interval = parseInt(diff/2);
              var newdim = parseInt(element[dim]) + interval;
              if (newdim >= to || interval < 5)
                newdim = to;
              element[dim] = newdim;
              setTimeout(function() {
                self.animateSplitter(splitter, element, dim, orig, element[dim],
                                     to, interval, ascending);
              }, 1);
            } else {
              element[dim] = to;
            }
          } else {
            // shrinking from -> to
            if (from > to) {
              var diff = from-to;
              interval = parseInt(diff/2);
              var newdim = parseInt(element[dim]) - interval;
              if (newdim <= to || interval < 3)
                newdim = to;
              element[dim] = newdim;
              setTimeout(function() {
                self.animateSplitter(splitter, element, dim, orig, element[dim],
                                     to, interval, ascending);
              }, 1);
            } else {
              element[dim] = to;
              if (to == 0) {
                splitter.setAttribute("state", "collapsed");
                element[dim] = orig;
              }
            }
          }
          ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="command"><![CDATA[
        var splitter = this.parentNode;
        while (splitter.tagName.indexOf("splitter") == -1)
          splitter = splitter.parentNode;
        if (!splitter)
          return;

        // Get the element that would be collapsed/open 
        var el = splitter.collapseElement;

        var dimension;
        var defaultDimensionValue;
        if (splitter.getAttribute("orient") == "vertical") {
          dimension = "height";
          defaultDimensionValue = "defaultHeight";
        } else {
          dimension = "width";
          defaultDimensionValue = "defaultWidth";
        }

        var state = splitter.getAttribute("state");
        if (state == "collapsed") {
          var paneMgr = Components.classes["@songbirdnest.com/Songbird/DisplayPane/Manager;1"].getService(Components.interfaces.sbIDisplayPaneManager);
          var paneInfo = paneMgr.getPaneInfo(el._lastURL.stringValue);
          if (!paneInfo)
            paneInfo = paneMgr.defaultPaneInfo;
          
          // If we're restoring from a collapsed state, and our "open" size
          // is 0, then let's restore to the default size instead
          var openSize = el[dimension];
          if (openSize == 0)
            openSize = paneInfo[defaultDimensionValue];
            
          el[dimension] = 0;
          splitter.setAttribute("state", "open");
          this.animateSplitter(splitter, el, dimension,
                          el[dimension], 0, openSize, 5, true);
        } else {
          this.animateSplitter(splitter, el, dimension,
                          el[dimension], el[dimension], 0, 5, false);
        }
      ]]></handler>

      <handler event="mousemove"><![CDATA[
        // Override the mousemove handler so that the splitter doesn't catch
        // them (for bug 19150)
        event.stopPropagation();
        event.preventDefault();
      ]]></handler>
    </handlers>
  </binding>

</bindings>
