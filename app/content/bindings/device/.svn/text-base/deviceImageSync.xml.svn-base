<?xml version="1.0"?>
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!-- Import external definitions. -->
<!DOCTYPE window SYSTEM "chrome://songbird/locale/songbird.dtd">

<bindings
      xmlns="http://www.mozilla.org/xbl"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- *************************************************************************
   *****************************************************************************
   *
   * Image sync widget
   *
   *****************************************************************************
   ************************************************************************* -->

  <binding id="sb-device-image-sync"
     extends="chrome://songbird/content/bindings/device/deviceControl.xml#sb-device-control">

    <!-- ***********************************************************************
     *
     * Content.
     *
     *********************************************************************** -->

     <content>

      <xul:vbox class="device-tab-content">
        <xul:hbox align="center">
          <xul:stack flex="1">
            <xul:hbox sbid="content_management_header_background"/>
            <xul:hbox align="center">
              <xul:checkbox sbid="content_management_checkbox"
                            label="&device.sync.images.from.label;"
                            oncommand="document.getBindingParent(this)._enableSync(this.checked);"/>
              <xul:menulist sbid="sync_images_from_list"
                            flex="1"
                            onselect="document.getBindingParent(this)._folderChanged();">
                <xul:menupopup>
                  <xul:menuitem label="&device.sync.images.browse;" value=""/>
                </xul:menupopup>
              </xul:menulist>
            </xul:hbox>
          </xul:stack>
        </xul:hbox>

        <xul:groupbox sbid="content_management_groupbox">
          <xul:radiogroup sbid="sync_images_type_group">
            <xul:radio sbid="sync_images_all_radio"
                       label="&device.sync.images.all.label;"
                       _label_default="&device.sync.images.all.label;"
                       _label_template="&device.sync.images.all.template;"
                       oncommand="document.getBindingParent(this)._syncAll(true);"/>
            <xul:radio sbid="sync_images_selected_radio"
                       label="&device.sync.images.selected.label;"
                       oncommand="document.getBindingParent(this)._syncAll(false);"/>
            <xul:tree sbid="sync_images_folders_tree"
                      hidecolumnpicker="true"
                      enableColumnDrag="false"
                      editable="true"
                      seltype="single"
                      rows="5"
                      onclick="if (this.getAttribute('disabled') != 'true')
                                 document.getBindingParent(this)._updateSyncFolders();">
              <xul:treecols>
                <xul:treecol sbid="sync_images_folder_check"
                             type="checkbox"
                             editable="true"
                             class="sync-images-folder-check"/>
                <xul:treecol sbid="sync_images_folder_name"
                             class="sync-images-folder-name"
                             label="&device.sync.images.foldername;"
                             flex="1"/>
                <xul:treecol sbid="sync_images_folder_filecount"
                             class="sync-images-folder-filecount"
                             label="&device.sync.images.filecount;"
                             width="80"/>
              </xul:treecols>

              <xul:treechildren sbid="sync_images_folder_children"
                                alternatingbackground="true"/>
            </xul:tree>
          </xul:radiogroup>
        </xul:groupbox>
        <xul:vbox sbid="sync_images_supported_formats_box">
          <xul:spacer flex="1"/>
          <xul:label sbid="sync_images_supported_formats"/>
        </xul:vbox>
      </xul:vbox>
    </content>

    <!-- ***********************************************************************
     *
     * Implementation.
     *
     *********************************************************************** -->

    <implementation
      implements="sbIDeviceEventListener, sbIDeviceLibraryListener">

      <field name="_syncFromFolder">null</field>
      <field name="_syncFoldersList">null</field>
      <field name="_imageSettings">false</field>
      <field name="_mediaType">Ci.sbIDeviceLibrary.MEDIATYPE_IMAGE</field>
      <field name="_CIDM">Ci.sbIDeviceLibraryMediaSyncSettings</field>
      <field name="_deviceEventTarget">null</field>
      <field name="_displayedFolder">null</field>
      <field name="_imageTab">false</field>
      <field name="_domEventListenerSet">null</field>
      <!-- _ignoreFolderChanges defaults to true to ignore the select event
           during widget construction -->
      <field name="_ignoreFolderChanges">true</field>
      <field name="_fileScanner">Cc["@songbirdnest.com/Songbird/FileScan;1"]
                                   .createInstance(Ci.sbIFileScan);</field>
      <field name="_fileScanQuery">null</field>
      <field name="_fileScanTimer">null</field>

      <!--
       * \brief Constructor, initializes the widget.
       -->
      <constructor> <![CDATA[
      {
        Cu.import("resource://app/jsmodules/ArrayConverter.jsm", this);
        Cu.import("resource://app/jsmodules/PlatformUtils.jsm", this);
        Cu.import("resource://app/jsmodules/StringUtils.jsm", this);
        Cu.import("resource://app/jsmodules/DOMUtils.jsm", this);

        if (this.device)
          this._initDevice();
        else
          this._updateUI();
      }
      ]]></constructor>

      <!--
       * \brief Destructor, cleans up everything.
       -->
      <destructor> <![CDATA[
      {
        if (this._fileScanner) {
          this._fileScanner.finalize();
          this._fileScanner = null;
        }
        this._finalizeDevice();
      }
      ]]></destructor>

      <method name="_initDevice">
        <body><![CDATA[
          // No need to initilize the device if device does not support image.
          var capabilities = this.device.capabilities;
          var sbIDC = Ci.sbIDeviceCapabilities;
          if (!capabilities.supportsContent(sbIDC.FUNCTION_IMAGE_DISPLAY,
                                            sbIDC.CONTENT_IMAGE)) {
            return;
          }

          // The file extension list that device supports.
          let fileExtensions = capabilities.getSupportedFileExtensions(
                                              this.device,
                                              sbIDC.CONTENT_IMAGE);

          let extensions = "";
          while (fileExtensions.hasMore()) {
            if (extensions != "")
              extensions += ","
            extensions += " ." + fileExtensions.getNext();
          }
          let supportedExtensions =
                this._getElement("sync_images_supported_formats");
          supportedExtensions.value =
            SBFormattedString("device.sync.images.supported.formats",
                              [extensions]);

          // Listen for device events.
          this._deviceEventTarget =
                this.device.QueryInterface(Ci.sbIDeviceEventTarget);
          this._deviceEventTarget.addEventListener(this);

          // Create a DOM event listener set.
          this._domEventListenerSet = new this.DOMEventListenerSet();

          // Listen for image tab selected event.
          var self = this;
          var func = function(aEvent) { self._onImageTabSelectedEvent(); };
          this._domEventListenerSet.add(document,
                                        "image-tab-selected",
                                        func,
                                        false,
                                        false);

          // Listen for changes in the settings
          if (this.devLib) {
            this.devLib.addDeviceLibraryListener(this);
            this._imageSettings =
              this.devLib.syncSettings.getMediaSettings(this._mediaType);
          }

          /* Set the imagesync enabled checkbox to reflect whether
           * imagesync is on */
          let syncImagesCheckBox =
            this._getElement("content_management_checkbox");

          syncImagesCheckBox.checked =
            (this._imageSettings &&
             this._imageSettings.mgmtType != this._CIDM.SYNC_MGMT_NONE);

          // Read preferences and update UI
          this._syncPrefsRead();
          this._updateUI();
        ]]></body>
      </method>

      <method name="_finalizeDevice">
        <body><![CDATA[
          if (this._deviceEventTarget) {
            this._deviceEventTarget.removeEventListener(this);
            this._deviceEventTarget = null;
          }

          // Remove DOM event listeners.
          if (this._domEventListenerSet) {
            this._domEventListenerSet.removeAll();
            this._domEventListenerSet = null;
          }

          try {
            // Remove our settings listener
            if (this.devLib) {
              this.devLib.removeDeviceLibraryListener(this);
            }
          } catch(e) {
            dump("Error removing device library listener\n");
          }

          this._imageSettings = null;
        ]]></body>
      </method>

      <!--
       * \brief Retrieves an anonymous child element by its sbid attribute.
       *
       * \param aElementID  element ID to search
       * \return Element
       -->
      <method name="_getElement">
        <parameter name="aElementID"/>
        <body><![CDATA[
        {
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         aElementID);
        }
        ]]></body>
      </method>

      <!--
       * \brief Re-reads syncFromFolder and sync folder list.
       -->
      <method name="_syncPrefsRead">
        <body><![CDATA[
        {
          // If there's no device library, just return.
          if (!this.devLib)
            return;

          this._syncFromFolder = this._imageSettings.syncFromFolder;

          // Get the sync folder list.
          this._syncFoldersList = {};
          let storedFoldersList =
                this.devLib.getSyncFolderListByType(this._mediaType);
          for (let i = 0; i < storedFoldersList.length; i++) {
            let folder = storedFoldersList.queryElementAt(i, Ci.nsIFile);
            this._syncFoldersList[folder.path] = true;
          }
        }
        ]]></body>
      </method>

      <!--
       * \brief Saves sync folder list.
       -->
      <method name="_syncFolderListWrite">
        <body><![CDATA[
        {
          let jsArray = [];
          for (let path in this._syncFoldersList) {
            let file = Cc["@mozilla.org/file/local;1"]
                         .createInstance(Ci.nsILocalFile);
            file.initWithPath(path);
            jsArray.push(file);
          }
          let array = this.ArrayConverter.nsIArray(jsArray);
          this.devLib.setSyncFolderListByType(this._mediaType, array);
        }
        ]]></body>
      </method>

      <!--
       * \brief Updates UI with current sync preferences.
       -->
      <method name="_updateUI">
        <body>
        <![CDATA[
        {
          // Do not update the UI if the image tab hasn't been selected.
          if (!this._imageTab)
            return;

          // Hide widget if no device library is present
          if (!this.devLib) {
            this.setAttribute("hidden", "true")
            return;
          }
          this.removeAttribute("hidden");

          if (!this._imageSettings) {
            this.devLib.addDeviceLibraryListener(this);
            this._imageSettings =
              this.devLib.syncSettings.getMediaSettings(this._mediaType);
          }

          // Enable/disable radio buttons
          let syncAllRadio = this._getElement("sync_images_all_radio");
          let syncSelectedRadio =
                this._getElement("sync_images_selected_radio");

          // Update radio group state
          let syncSelected =
            (this._imageSettings.mgmtType == this._CIDM.SYNC_MGMT_PLAYLISTS);
          let selectedRadio = (syncSelected ? syncSelectedRadio : syncAllRadio);
          let radioGroup = this._getElement("sync_images_type_group");
          radioGroup.selectedItem = selectedRadio;

          // Make sure to remove selection in root folder dropdown list (disable
          // select handler to prevent an endless loop)
          let rootFolderElement = this._getElement("sync_images_from_list");
          try {
            this._ignoreFolderChanges = true;
            rootFolderElement.selectedIndex = -1;
          }
          finally {
            this._ignoreFolderChanges = false;
          }

          // Update main checkbox state
          let syncEnabled =
                (this._imageSettings.mgmtType != this._CIDM.SYNC_MGMT_NONE);

          let syncImagesCheckBox =
                this._getElement("content_management_checkbox");
          syncImagesCheckBox.checked = syncEnabled;

          let syncFolderTree = this._getElement("sync_images_folders_tree");
          let selector = this._getElement("content_management_groupbox");
          let headerBackground =
              this._getElement("content_management_header_background");
          let isBusy = this.device && this.device.isBusy;
          if (!syncEnabled || isBusy) {
            this.setAttribute("disabled", true);
            selector.setAttribute("disabled", true);
            rootFolderElement.setAttribute("disabled", true);
            syncAllRadio.setAttribute("disabled", true);
            syncSelectedRadio.setAttribute("disabled", true);
            syncFolderTree.setAttribute("disabled", true);
            headerBackground.setAttribute("disabled", true);
          }
          else {
            this.removeAttribute("disabled");
            selector.removeAttribute("disabled");
            rootFolderElement.removeAttribute("disabled");
            syncAllRadio.removeAttribute("disabled");
            syncSelectedRadio.removeAttribute("disabled");
            if (syncEnabled && this._imageSettings.mgmtType ==
                               this._CIDM.SYNC_MGMT_PLAYLISTS) {
              syncFolderTree.removeAttribute("disabled");
            }
            else {
              syncFolderTree.setAttribute("disabled", true);
            }
            headerBackground.removeAttribute("disabled");
          }

          if (isBusy) {
            syncImagesCheckBox.setAttribute("disabled", true);
          }
          else {
            syncImagesCheckBox.removeAttribute("disabled");
          }

          // Update root folder displayed and list of subfolders if necessary
          let subfoldersElement =
                this._getElement("sync_images_folder_children");

          this._syncFromFolder = this._imageSettings.syncFromFolder;

          if (this._syncFromFolder) {
            var displayLabelText = this._syncFromFolder.leafName;
            if(this.PlatformUtils.platformString == "Windows_NT") {
              displayLabelText =
                Cc["@songbirdnest.com/Songbird/KnownFolderManager;1"]
                  .createInstance(Ci.sbIKnownFolderManager)
                  .getDisplayNameFromPath(this._syncFromFolder.path);
            }
            rootFolderElement.setAttribute("label",
                                           displayLabelText);
            rootFolderElement.setAttribute(
                                "value",
                                this._syncFromFolder.path);

            if (!this._displayedFolder ||
                !this._syncFromFolder.equals(this._displayedFolder)) {
              // Reset label for "all items" radio
              syncAllRadio.setAttribute("label",
                                  syncAllRadio.getAttribute("_label_default"));

              // Remove currently displayed subfolders
              while (subfoldersElement.firstChild)
                subfoldersElement.removeChild(subfoldersElement.firstChild);

              // Add subfolders of the new root folder to the list
              let subfolders = this._syncFromFolder.directoryEntries;
              for (let folder in this.ArrayConverter.JSEnum(subfolders)) {
                if (!(folder instanceof Ci.nsIFile) || !folder.isDirectory())
                  continue;

                // Generate tree item
                let item = document.createElement("treeitem");
                let row = document.createElement("treerow");

                let checkCell = document.createElement("treecell");
                row.appendChild(checkCell);

                let nameCell = document.createElement("treecell");
                nameCell.setAttribute("label", folder.leafName);
                row.appendChild(nameCell);

                let countCell = document.createElement("treecell");
                row.appendChild(countCell);

                item.appendChild(row);
                subfoldersElement.appendChild(item);

                // Attach some properties to the item to make working with it
                // easier later
                item._folder = folder;
                item._checkCell = checkCell;
                item._countCell = countCell;
              }

              // Cancel current scan query and start new one
              this.startDirScan();
            }
          }
          else {
            rootFolderElement.setAttribute("label", " ");
            rootFolderElement.setAttribute("value", "");

            if (this._displayedFolder) {
              // Reset label for "all items" radio
              syncAllRadio.setAttribute("label",
                                  syncAllRadio.getAttribute("_label_default"));

              // Remove currently displayed subfolders
              while (subfoldersElement.firstChild)
                subfoldersElement.removeChild(subfoldersElement.firstChild);
            }

            this.stopDirScan();
          }

          this._displayedFolder = this._syncFromFolder;

          // Update subfolder selection
          for (let item = subfoldersElement.firstChild;
               item;
               item = item.nextSibling) {
            let isChecked = (syncSelected ?
                             item._folder.path in this._syncFoldersList :
                             true);
            item._checkCell.setAttribute("value", isChecked);
          }
        }
        ]]></body>
      </method>

      <!--
       * \brief Called when the user selects a different root folder from the list.
       -->
      <method name="_folderChanged">
        <body><![CDATA[
        {
          if (this._ignoreFolderChanges)
            return;

          let oldRootFolder = this._syncFromFolder;
          let list = this._getElement("sync_images_from_list");
          if (list.value) {
            let rootFolder = Cc["@mozilla.org/file/local;1"]
                               .createInstance(Ci.nsILocalFile);
            rootFolder.initWithPath(list.value);
            this._imageSettings.syncFromFolder = rootFolder;
          }
          else {
            // User clicked "Choose folder", open file picker
            let filePicker = Cc["@mozilla.org/filepicker;1"]
                               .createInstance(Ci.nsIFilePicker);
            filePicker.init(window, list.getAttribute("label"),
                            Ci.nsIFilePicker.modeGetFolder);
            if (this._syncFromFolder instanceof Ci.nsILocalFile)
              filePicker.displayDirectory = this._syncFromFolder;
            if (filePicker.show() == Ci.nsIFilePicker.returnOK) {
              this._imageSettings.syncFromFolder = filePicker.file;
            }
          }

          if (oldRootFolder &&
              !oldRootFolder.equals(this._imageSettings.syncFromFolder)) {
            // Clear subfolders list if root folder changed
            this._syncFoldersList = {};
          }

          this._syncFolderListWrite();
          this._updateUI();
        }
        ]]></body>
      </method>

      <!--
       * \brief Enables or disables sync depending on aEnable parameter.
       -->
      <method name="_enableSync">
        <parameter name="aEnable"/>
        <body><![CDATA[
        {
          if (aEnable) {
            this._imageSettings.mgmtType = this._CIDM.SYNC_MGMT_ALL;
          }
          else {
            this._imageSettings.mgmtType = this._CIDM.SYNC_MGMT_NONE;
          }
          this._updateUI();
        }
        ]]></body>
      </method>

      <!--
       * \brief Swiches between syncing all content and selected folders
       * depending on aEnable parameter.
       -->
      <method name="_syncAll">
        <parameter name="aEnable"/>
        <body><![CDATA[
        {
          this._imageSettings.mgmtType =
                                (aEnable ? this._CIDM.SYNC_MGMT_ALL :
                                           this._CIDM.SYNC_MGMT_PLAYLISTS);
          this._updateUI();
        }
        ]]></body>
      </method>

      <!--
       * \brief Called if the user changes subfolder selection.
       -->
      <method name="_updateSyncFolders">
        <body><![CDATA[
        {
          let subfoldersElement =
                this._getElement("sync_images_folder_children");
          this._syncFoldersList = {};
          for (let item = subfoldersElement.firstChild;
               item;
               item = item.nextSibling) {
            if (item._checkCell.getAttribute("value") == "true")
              this._syncFoldersList[item._folder.path] = true;
          }

          // A hack so that SYNC_SETTINGS_CHANGED can be dispatched.
          if (this._getElement("content_management_checkbox").checked) {
            if (this._getElement("sync_images_type_group").selectedItem ==
                this._getElement("sync_images_all_radio")) {
              this._imageSettings.mgmtType = this._CIDM.SYNC_MGMT_ALL;
            }
            else {
              this._imageSettings.mgmtType = this._CIDM.SYNC_MGMT_PLAYLISTS;
            }
          }
          this._syncFolderListWrite();
        }
        ]]></body>
      </method>

      <!--
       * \brief Starts a new scan of the root directory.
       -->
      <method name="startDirScan">
        <body><![CDATA[
        {
          // Cancel scan already in progress
          this.stopDirScan();

          // Initialize file scan query
          this._fileScanQuery = Cc["@songbirdnest.com/Songbird/FileScanQuery;1"]
                                  .createInstance(Ci.sbIFileScanQuery);

          let capabilities = this.device.capabilities;
          let sbIDC = Ci.sbIDeviceCapabilities;
          let fileExtensions = capabilities.getSupportedFileExtensions(
                                              this.device,
                                              sbIDC.CONTENT_IMAGE);

          // Only scan the images that the device supports.
          while (fileExtensions.hasMore()) {
            this._fileScanQuery.addFileExtension(fileExtensions.getNext());
          }

          this._fileScanQuery.setDirectory(
                                this._syncFromFolder.path);
          this._fileScanQuery.setRecurse(true);
          this._fileScanner.submitQuery(this._fileScanQuery);

          // Poll the query to determine when it is done - everything else
          // isn't thread-safe.
          var self = this;
          function pollCallback() {
            // If the fileScanQuery is null, we still want to cancel the timer
            // else if it's not check whether it's still scanning and if it's
            // not, then process what it found
            if (!self._fileScanQuery || !self._fileScanQuery.isScanning()) {
              if (self._fileScanTimer) {
                window.clearInterval(self._fileScanTimer);
                self._fileScanTimer = null;
              }

              // keep _fileScanner around to deal with more incoming queries.
              // it will be finalized in destructor.
              let query = self._fileScanQuery;
              if (query) {
                self._fileScanQuery = null;
                self.processDirScanResults(query);
              }
            }
          }

          this._fileScanTimer = window.setInterval(pollCallback, 1000);
        }
        ]]></body>
      </method>

      <!--
       * \brief Stops the directory scan currently in progress.
       -->
      <method name="stopDirScan">
        <body><![CDATA[
        {
          if (this._fileScanQuery && this._fileScanQuery.isScanning())
            this._fileScanQuery.cancel();
          this._fileScanQuery = null;

          if (this._fileScanTimer)
            window.clearInterval(this._fileScanTimer);
          this._fileScanTimer = null;
        }
        ]]></body>
      </method>

      <!--
       * \brief Updates file counts for subdirectories after a finished scan.
       *
       * \param aScanQuery  file scan query that finished executing
       -->
      <method name="processDirScanResults">
        <parameter name="aScanQuery"/>
        <body><![CDATA[
        {
          let totalCount = aScanQuery.getFileCount();

          let ioService = Cc["@mozilla.org/network/io-service;1"]
                            .getService(Ci.nsIIOService);
          let libUtils = Cc["@songbirdnest.com/Songbird/library/Manager;1"]
                           .getService(Ci.sbILibraryUtils);

          // Count number of files for the subdirectories
          let subdirCounts = {};
          let rootFolder = this._syncFromFolder;
          for (let i = 0; i < totalCount; i++) {
            let path = aScanQuery.getFilePath(i);
            let uri = ioService.newURI(path, null, null);
            let file = (uri instanceof Ci.nsIFileURL ? uri.file : null)
            if (!file)
              continue;

            // Walk up in the directory hierarchy until we find a subdirectory
            // of our root directory
            while (file.parent && !file.parent.equals(rootFolder))
              file = file.parent;

            if (file.parent && file.isDirectory()) {
              file = libUtils.getCanonicalPath(file)
                             .QueryInterface(Ci.nsILocalFile);
              let subdir = file.getRelativeDescriptor(rootFolder);
              if (!(subdir in subdirCounts))
                subdirCounts[subdir] = 0;
              subdirCounts[subdir]++;
            }
          }

          // Update label of the "All items" radio button
          let allRadio = this._getElement("sync_images_all_radio");
          let allRadioLabel = allRadio.getAttribute("_label_template");
          allRadioLabel = allRadioLabel.replace(/%S/g, totalCount);
          allRadio.setAttribute("label", allRadioLabel);

          // Update count column for the list items
          let subfoldersElement = this._getElement("sync_images_folder_children");
          for (let item = subfoldersElement.firstChild;
               item;
               item = item.nextSibling) {
            let file = libUtils.getCanonicalPath(item._folder)
                               .QueryInterface(Ci.nsILocalFile);
            let path = file.getRelativeDescriptor(rootFolder);
            let count = (path in subdirCounts ?
                         subdirCounts[path] :
                         0);
            item._countCell.setAttribute("label", count);
          }
        }
        ]]></body>
      </method>

      <!--
       * \brief Handles image-tab-selected event
       -->
      <method name="_onImageTabSelectedEvent">
        <body><![CDATA[
        {
          if (!this._imageTab) {
            this._imageTab = true;
            this._updateUI();
          }
        }
        ]]></body>
      </method>

      <!--
       * sbIDeviceLibraryListener
       *
       * We don't do anything with these functions, but they need to be here.
       -->
      <method name="onBatchBegin">
        <parameter name="aMediaList"/>
        <body>{}</body>
      </method>
      <method name="onBatchEnd">
        <parameter name="aMediaList"/>
        <body>{}</body>
      </method>
      <method name="onItemAdded">
        <parameter name="aMediaList"/>
        <parameter name="aMediaItem"/>
        <parameter name="aIndex"/>
        <body>{}</body>
      </method>
      <method name="onBeforeItemRemoved">
        <parameter name="aMediaList"/>
        <parameter name="aMediaItem"/>
        <parameter name="aIndex"/>
        <body>{}</body>
      </method>
      <method name="onAfterItemRemoved">
        <parameter name="aMediaList"/>
        <parameter name="aMediaItem"/>
        <parameter name="aIndex"/>
        <body>{}</body>
      </method>
      <method name="onBeforeListCleared">
        <parameter name="aMediaList"/>
        <parameter name="aExcludeLists"/>
        <body>{}</body>
      </method>
      <method name="onListCleared">
        <parameter name="aMediaList"/>
        <parameter name="aExcludeLists"/>
        <body>{}</body>
      </method>
      <method name="onItemUpdated">
        <parameter name="aMediaList"/>
        <parameter name="aMediaItem"/>
        <parameter name="aProperties"/>
        <body>{}</body>
      </method>
      <method name="onItemMoved">
        <parameter name="aMediaList"/>
        <parameter name="aFromIndex"/>
        <parameter name="aToIndex"/>
        <body>{}</body>
      </method>
      <method name="onItemCopied">
        <parameter name="aSourceItem"/>
        <parameter name="aDestItem"/>
        <body>{}</body>
      </method>
      <method name="onBeforeCreateMediaItem">
        <parameter name="aContentUri"/>
        <parameter name="aProperties"/>
        <parameter name="aAllDuplicates"/>
        <body>{ return true; }</body>
      </method>
      <method name="onBeforeCreateMediaList">
        <parameter name="aType"/>
        <parameter name="aProperties"/>
        <body>{ return true; }</body>
      </method>
      <method name="onBeforeAdd">
        <body>{ return true; }</body>
      </method>
      <method name="onBeforeAddAll">
        <parameter name="aMediaList"/>
        <body>{ return true; }</body>
      </method>
      <method name="onBeforeAddSome">
        <parameter name="aMediaItems"/>
        <body>{ return true; }</body>
      </method>
      <method name="onBeforeClear">
        <body>{ return true; }</body>
      </method>

      <!--
       * \brief Handle the device event specified by aEvent.
       *
       * \param aEvent              Device event.
       -->
      <method name="onDeviceEvent">
        <parameter name="aEvent"/>
        <body><![CDATA[
        {
          switch(aEvent.type) {
            case Ci.sbIDeviceEvent.EVENT_DEVICE_PREFS_CHANGED:
              this._updateUI();
              break;

            case Ci.sbIDeviceEvent.EVENT_DEVICE_STATE_CHANGED:
              this._updateUI();
              break;
          }
        }
        ]]></body>
      </method>
    </implementation>


    <!-- ***********************************************************************
     *
     * Handlers.
     *
     *********************************************************************** -->

    <handlers>
      <handler event="deviceBound"><![CDATA[
        // Re-initialize the widget.
        this._finalizeDevice();
        this._initDevice();
        ]]></handler>

      <handler event="devLibBound"><![CDATA[
        // Re-initialize the widget.
        this._finalizeDevice();
        this._initDevice();
        ]]></handler>
    </handlers>

  </binding>

</bindings>
