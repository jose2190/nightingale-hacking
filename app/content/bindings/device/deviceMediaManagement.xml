<?xml version="1.0"?>
<!-- vim: set sw=2 :miv -->
<!--
/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2010 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */
-->

<!-- Import external definitions. -->
<!DOCTYPE window [
  <!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
  <!ENTITY % songbirdDTD SYSTEM "chrome://songbird/locale/songbird.dtd">
  %brandDTD;
  %songbirdDTD;
]>

<bindings
      xmlns="http://www.mozilla.org/xbl"
      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
      xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- *************************************************************************
   *****************************************************************************
   *
   * This is a groupbox to hold the disk management prefs for one device library
   * Note that theoretically you might get multiple instances of this per page
   * (because a device might have multiple libraries).
   *
   *****************************************************************************
   ************************************************************************* -->

  <binding id="sb-device-management"
           extends="chrome://songbird/content/bindings/device/deviceControl.xml#sb-device-control">

    <resources>
      <stylesheet src="chrome://songbird-bindings/skin/device/deviceMediaManagement.css"/>
    </resources>

    <!-- ***********************************************************************
     *
     * Content.
     *
     *********************************************************************** -->

    <content>
      <!--
        - expects to have the following attributes:
        - "device-id"
        - "dev-lib-guid"
        -->
      <xul:vbox flex="1">
        <xul:groupbox flex="1" sbid="transcoding-groupbox" setting="transcode">
          <xul:caption label="&device.settings.music.transcoding.label;"/>
          <xul:deck sbid="transcoding_settings_deck">
            <xul:description sbid="no_encoders_available_description">
              &device.settings.music.transcoding.no_encoders.description;
            </xul:description>

            <xul:vbox sbid="transcoding_preferences"
                      class="content-controls"
                      oncommand="DeviceMediaManagementServices.onUIPrefChange();">

              <!-- Transcoding mode radio group. -->
              <xul:radiogroup sbid="transcoding_mode_radio_group" flex="1">

                <xul:radio sbid="transcoding-mode-auto"
                           xbl:inherits="disabled"
                           label="&device.settings.music.transcoding.mode.auto.label;"/>
                <xul:radio sbid="transcoding-mode-manual"
                           xbl:inherits="disabled"
                           label="&device.settings.music.transcoding.mode.manual.label;"/>
                <xul:sb-device-transcode-settings sbid="transcode-settings" class="indent"/>
              </xul:radiogroup>

            </xul:vbox>
          </xul:deck>
        </xul:groupbox>
        <xul:groupbox flex="1"
                      setting="diskmgmt"
                      oncommand="DeviceMediaManagementServices.dispatchSettingsChangeEvent();">
          <xul:caption label="&device.settings.disk.label;"/>
          <xul:vbox>
            <xul:checkbox sbid="space_limit_enable"
                          xbl:inherits="disabled"
                          oncommand="toggleLimitSpaceCheckbox();"/>

            <xul:spacer height="5"/>
            <xul:stack class="indent-margins">
              <xul:hbox class="notch-box" sbid="notch-hbox">
                <xul:hbox flex="1"/>
                <xul:hbox flex="1"/>
                <xul:hbox flex="1"/>
                <xul:hbox flex="1" class="end"/>
              </xul:hbox>

              <xul:scale sbid="space_limit" flex="1" min="0" max="100"
                         onclick="_onClick();"/>
            </xul:stack>

            <xul:hbox class="indent-margins" flex="1">
              <xul:hbox flex="1">
                <xul:description flex="1"
                                 sbid="notch-0percent-description"
                                 class="notch-0percent-description">
                  &device.settings.disk.0percent.label;
                </xul:description>
              </xul:hbox>
              <xul:hbox  flex="1">
                <xul:description flex="1"
                                 sbid="notch-100percent-description"
                                 class="notch-100percent-description">
                  &device.settings.disk.100percent.label;
                </xul:description>
              </xul:hbox>
            </xul:hbox>

            <xul:spacer height="10" flex="1"/>
          </xul:vbox>
        </xul:groupbox>
      </xul:vbox>
    </content>


    <!-- ***********************************************************************
     *
     * Implementation.
     *
     *********************************************************************** -->

    <implementation>

      <property name="_prefRoot" readonly="true">
        <getter>
          return "songbird.device." +
                 this.deviceID +
                 ".preferences.library." +
                 this.devLibGUID;
        </getter>
      </property>
      <property name="_devicePrefRoot" readonly="true">
        <getter>
          return "library." + this.devLibGUID;
        </getter>
      </property>

      <property name="_scale" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         "space_limit");
        </getter>
      </property>

      <property name="_limitSpaceCheckbox" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         "space_limit_enable");
        </getter>
      </property>

      <property name="_notchHbox" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(this,
                                                         "sbid",
                                                         "notch-hbox");
        </getter>
      </property>

      <property name="_zeroPercentDescription" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(
                   this,
                   "sbid",
                   "notch-0percent-description");
        </getter>
      </property>

      <property name="_hundrenPercentDescription" readonly="true">
        <getter>
          return document.getAnonymousElementByAttribute(
                   this,
                   "sbid",
                   "notch-100percent-description");
        </getter>
      </property>

      <!--
       * constructor
       *
       *   This method constructs the widget.
       -->

      <constructor> <![CDATA[
      {
        /* Import external services. */
        this.importExternalServices();

        var settingsAttribute = this.getAttribute("hide");
        var settingsList = settingsAttribute.split(",");

        for(let i = 0; i < settingsList.length; ++i) {
          let box = this._getSettingBox(settingsList[i]);
          if(box) {
            box.hidden = true;
          }
        }

        var self = this;
        this._scale.addEventListener("change",
                                     function() { self.onSpaceLimitChanged() },
                                     false);
      }
      ]]></constructor>


      <!--
       * destructor
       *
       *   This method destroys the widget.
       -->

      <destructor> <![CDATA[
      {
        if (this.device) {
          this.device = null;
        }
        /* Finalize the device music management preference services. */
        DeviceMediaManagementServices.finalize(this);

      }
      ]]></destructor>

      <method name="_onClick">
        <body>
          if (!this._scale.disabled)
            DeviceMediaManagementServices.dispatchSettingsChangeEvent();
        </body>
      </method>

      <method name="_getSettingBox">
        <parameter name="aID"/>
        <body>
          return document.getAnonymousElementByAttribute(this, "setting", aID);
        </body>
      </method>


      <!--
       * importExternalServices
       *
       *   This function imports external services.
       -->

      <method name="importExternalServices"><body><![CDATA[
      {
        /* Import the device sync services. */
        if (typeof(DeviceMediaManagementServices) == "undefined") {
          var jsLoader;
          /* Get the Javascript sub-script loader services. */
          jsLoader = Components.classes["@mozilla.org/moz/jssubscript-loader;1"]
                               .getService
                                  (Components.interfaces.mozIJSSubScriptLoader);
          jsLoader.loadSubScript
                  ("chrome://songbird/content/scripts/device/deviceMediaManagement.js",
                   null);
        }
      }
      ]]></body></method>


      <method name="save">
        <body> <![CDATA[
          // Save the device's storage settings
          this._saveStorageScaleSetting();

          DeviceMediaManagementServices.savePreferences();
        ]]></body>
      </method>

      <method name="reset">
        <body> <![CDATA[
          // Set the scale to the device's current value.
          var self = this;
          setTimeout(function() { self._resetStorageScale(); }, 100);

          DeviceMediaManagementServices.resetPreferences();
        ]]></body>
      </method>

      <method name="toggleLimitSpaceCheckbox">
        <body><![CDATA[
          this._scale.disabled = !this._limitSpaceCheckbox.checked;
          this._updateNotchDisabledState();
        ]]></body>
      </method>

      <method name="onSpaceLimitChanged">
        <body><![CDATA[
          // Get the device capacity.
          var capacity = 0;
          try {
            capacity = this.devLib.getProperty
                         ("http://songbirdnest.com/device/1.0#capacity");
            capacity = parseInt(capacity);
          } catch (ex) {};

          var limitPercentage = parseInt(this._scale.getAttribute("value"));
          if (capacity > 0) {
            capacity = ((capacity * limitPercentage) / 100);
          }

          var storageConverter =
            Cc["@songbirdnest.com/Songbird/Properties/UnitConverter/Storage;1"]
              .createInstance(Ci.sbIPropertyUnitConverter);
          capacity = storageConverter.autoFormat(capacity, -1, 1);

          this._limitSpaceCheckbox.label =
            SBFormattedString("device.settings.limit_disk_space",
                              [this._scale.getAttribute("value"),
                               capacity]);
        ]]></body>
      </method>

      <method name="_resetStorageScale">
        <body><![CDATA[
          var spaceSettingsVariant =
            this.device.getPreference(
                this._devicePrefRoot + ".music_limit_percent");

          var percentValue = 100;
          if (spaceSettingsVariant) {
            percentValue = spaceSettingsVariant;
          }
          this._scale.setAttribute("value", percentValue);

          var shouldLimit =
            this.device.getPreference(
                this._devicePrefRoot + ".use_music_limit_percent");

          this._scale.disabled = !shouldLimit || this.device.isBusy;
          this._limitSpaceCheckbox.checked = shouldLimit;
          this._updateNotchDisabledState();
        ]]></body>
      </method>

      <method name="_updateNotchDisabledState">
        <body><![CDATA[
          // Update the CSS class on the notch boxes.
          for (var i = 0; i < this._notchHbox.childNodes.length; i++) {
            var curChildNode = this._notchHbox.childNodes.item(i);
            if (this._scale.disabled) {
              curChildNode.setAttribute("disabled", "true");
            }
            else {
              curChildNode.removeAttribute("disabled");
            }
          }

          // Enable/disable the percentage labels
          if (this._scale.disabled) {
            this._zeroPercentDescription.setAttribute("disabled", "true");
            this._hundrenPercentDescription.setAttribute("disabled", "true");
          }
          else {
            this._zeroPercentDescription.removeAttribute("disabled");
            this._hundrenPercentDescription.removeAttribute("disabled");
          }
        ]]></body>
      </method>

      <method name="_saveStorageScaleSetting">
        <body><![CDATA[
          var percentValue = this._scale.getAttribute("value");
          this.device.setPreference(
              this._devicePrefRoot + ".music_limit_percent",
              parseInt(percentValue));

          this.device.setPreference(
              this._devicePrefRoot + ".use_music_limit_percent",
              this._limitSpaceCheckbox.checked);
        ]]></body>
      </method>

    </implementation>


    <!-- ***********************************************************************
     *
     * Handlers.
     *
     *********************************************************************** -->

    <handlers>
      <handler event="devLibBound"><![CDATA[
        /* Re-initialize the device music management services. */
        DeviceMediaManagementServices.finalize(this);
        DeviceMediaManagementServices.initialize(this);
      ]]></handler>
    </handlers>

  </binding>

</bindings>
