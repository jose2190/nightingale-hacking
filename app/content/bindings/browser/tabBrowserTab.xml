<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is this file as it was released on March 28, 2001.
   -
   - The Initial Developer of the Original Code is
   - David Hyatt.
   - Portions created by the Initial Developer are Copyright (C) 2001
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   David Hyatt <hyatt@netscape.com> (Original Author of <tabbrowser>)
   -   Mike Connor <mconnor@steelgryphon.com>
   -   Peter Parente <parente@cs.unc.edu>
   -   Giorgio Maone <g.maone@informaction.com>
   -   Asaf Romano <mozilla.mano@sent.com>
   -   Seth Spitzer <sspitzer@mozilla.org>
   -   Simon BÃ¼nzli <zeniko@gmail.com>
   -   Michael Ventnor <ventnor.bugzilla@yahoo.com.au>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the GPL or the LGPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
<!ENTITY % tabBrowserDTD SYSTEM "chrome://browser/locale/tabbrowser.dtd" >
%tabBrowserDTD;
<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
%globalDTD;
]>

<bindings id="tabBrowserBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="tabbrowser-tab" display="xul:box"
           extends="chrome://global/content/bindings/tabbox.xml#tab">
    <content chromedir="&locale.dir;"
             closetabtext="&closeTab.label;">
      <xul:hbox class="tab-middle box-inherit" xbl:inherits="align,dir,pack,orient,selected" flex="1">
        <xul:image class="tab-icon" xbl:inherits="validate,src=image"/>
        <xul:label class="tab-text" xbl:inherits="value=label,accesskey,crop,disabled" flex="1"/>
      </xul:hbox>
      <xul:toolbarbutton anonid="close-button" tabindex="-1" class="tab-close-button"/>
    </content>

    <implementation>
      <field name="mOverCloseButton">false</field>
      <field name="mCorrespondingMenuitem">null</field>
      
      <!-- for drag-and-drop -->
      <method name="getTransferData">
        <parameter name="aEvent"/>
        <parameter name="aXferData"/>
        <parameter name="aDragAction"/>
        <body>
        <![CDATA[
          var browser = this.linkedBrowser;
          var URI = browser ? browser.currentURI : null;
          if (URI) {
            aXferData.data.addDataForFlavour("text/x-moz-url", URI.spec + "\n" + this.label);
            aXferData.data.addDataForFlavour("text/unicode", URI.spec);
            aXferData.data.addDataForFlavour("text/html", '<a href="' + URI.spec + '">' + this.label + '</a>');
          } else {
            aXferData.data.addDataForFlavour("text/unicode", "about:blank");
          }
        ]]>
        </body>
      </method>

      <field name="mPrefs" readonly="true">
        Components.classes['@mozilla.org/preferences-service;1']
                  .getService(Components.interfaces.nsIPrefService)
                  .getBranch(null);
      </field>

      <field name="_tabbrowser">null</field>
      <property name="mTabBrowser">
        <getter>
        <![CDATA[
          if (!this._tabbrowser) {
          var tabs = document.getBindingParent(this);
          this._tabbrowser = tabs &&
                             (tabs.tabBrowser ||
                              document.getBindingParent(tabs));
          }
          return this._tabbrowser;
        ]]>
        </getter>
        <setter>
          return this._tabbrowser = val;
        </setter>
      </property>
      
      <field name="mFaviconService">null</field>

      <!-- public icon methods -->
      <method name="setIcon">
        <parameter name="aURI"/>
        <body>
          <![CDATA[
            if (!this.mTabBrowser) {
              Components.utils.reportError((new Error).stack);
            }
            var browser = this.mTabBrowser.getBrowserForTab(this);
            if (browser) {
              browser.mIconURL = aURI;
            }

            if(!this.mFaviconService) {
              this.mFaviconService =
                Components.classes["@mozilla.org/browser/favicon-service;1"]
                          .getService(Components.interfaces.nsIFaviconService);
            }
            
            if(aURI) {
              try {
                var uri = aURI;
                if(!(aURI instanceof Components.interfaces.nsIURI)) {
                  try {
                    uri = Components.classes["@mozilla.org/network/io-service;1"]
                                    .getService(Components.interfaces.nsIIOService)
                                    .newURI(aURI, null, null);
                  } catch (ex) {
                    //ignore the exception
                    uri = null;
                  }
                }

                this.mFaviconService.setAndLoadFaviconForPage(browser.currentURI, 
                                                              uri, 
                                                              false);
              }
              catch(e) {
                Components.utils.reportError(e);
              }
            }

            this.updateIcon();

            for (var i = 0; i < this.mTabBrowser.mProgressListeners.length; i++) {
              var p = this.mTabBrowser.mProgressListeners[i];
              if ('onLinkIconAvailable' in p) {
                p.onLinkIconAvailable(browser);
              }
            }
          ]]>
        </body>
      </method>

      <method name="updateIcon">
        <body>
          <![CDATA[
            var browser = this.mTabBrowser.getBrowserForTab(this);
            if (!this.hasAttribute("busy") && browser && browser.mIconURL)
              this.setAttribute("image", browser.mIconURL);
            else
              this.removeAttribute("image");
          ]]>
        </body>
      </method>
      
      <!-- private icon methods -->
      <method name="shouldLoadFavIcon">
        <parameter name="aURI"/>
        <body>
          <![CDATA[
            return (aURI && this.mPrefs.getBoolPref("browser.chrome.site_icons") &&
                    this.mPrefs.getBoolPref("browser.chrome.favicons") &&
                    ("schemeIs" in aURI) && (aURI.schemeIs("http") || aURI.schemeIs("https")));
          ]]>
        </body>
      </method>
      <method name="useDefaultIcon">
        <body>
          <![CDATA[
            var browser = this.mTabBrowser.getBrowserForTab(this);
            if (browser.contentDocument instanceof ImageDocument) {
              if (this.mPrefs.getBoolPref("browser.chrome.site_icons")) {
                try {
                  var sz = this.mPrefs.getIntPref("browser.chrome.image_icons.max_size");
                  if (!sz)
                    return;

                  var req = browser.contentDocument.imageRequest;
                  if (!req || !req.image ||
                      req.image.width > sz ||
                      req.image.height > sz)
                    return;

                  this.setIcon(browser.currentURI.spec);
                } catch (e) { }
              }
            }
            else if (this.shouldLoadFavIcon(browser.currentURI)) {
              var url = browser.currentURI.prePath + "/favicon.ico";
              if (!this.mTabBrowser.isIconKnownMissing(url))
                this.setIcon(url);
            }
          ]]>
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="mouseover">
        var anonid = event.originalTarget.getAttribute("anonid");
        if (anonid == "close-button")
          this.mOverCloseButton = true;
      </handler>
      <handler event="mouseout">
        var anonid = event.originalTarget.getAttribute("anonid");
        if (anonid == "close-button")
          this.mOverCloseButton = false;
      </handler>
      <handler event="mousedown" button="0" phase="capturing">
      <![CDATA[
        if (this.mOverCloseButton)
          event.stopPropagation();
      ]]>
      </handler>
    </handlers>
  </binding>

</bindings>
