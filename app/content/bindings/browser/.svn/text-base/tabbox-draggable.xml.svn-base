<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
]>

<bindings id="tabDraggableBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="tabbox-draggable"
           extends="chrome://global/content/bindings/tabbox.xml#tabbox">
    <implementation>
      <method name="getTabForPanel">
        <parameter name="aPanel"/>
        <body>
        <![CDATA[
          var panelIndex = Array.indexOf(this.tabpanels.childNodes, aPanel);
          if (panelIndex < 0) {
            return null; // not found
          }
          var tabIndex = panelIndex;
          if ("__panelIndex" in this.tabs) {
            // draggable tabbox, use the index mapping
            tabIndex = this.tabs.__panelIndex.indexOf(panelIndex);
          }
          return this.tabs.getItemAtIndex(tabIndex);
        ]]>
        </body>
      </method>
      <method name="getPanelForTab">
        <parameter name="aTab"/>
        <body>
        <![CDATA[
          var tabIndex = Array.indexOf(this.tabs.childNodes, aTab);
          if (tabIndex < 0) {
            return null; // not found
          }
          var panelIndex = tabIndex;
          if ("__panelIndex" in this.tabs) {
            // draggable tabbox, use the index mapping
            panelIndex = this.tabs.__panelIndex[tabIndex];
          }
          return this.panels.childNodes.item(panelIndex);
        ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="tabs-draggable"
           extends="chrome://global/content/bindings/tabbox.xml#tabs">

    <resources>
      <stylesheet src="chrome://global/skin/browser.css"/>
    </resources>

    <content>
      <xul:stack flex="1" class="tabs-container"
                 ondraggesture="nsDragAndDrop.startDrag(event, document.getBindingParent(this)); event.stopPropagation();"
                 ondragover="nsDragAndDrop.dragOver(event, document.getBindingParent(this)); event.stopPropagation();"
                 ondragdrop="nsDragAndDrop.drop(event, document.getBindingParent(this)); event.stopPropagation();"
                 ondragexit="nsDragAndDrop.dragExit(event, document.getBindingParent(this)); event.stopPropagation();">
        <xul:arrowscrollbox anonid="arrowscrollbox" orient="horizontal" flex="1" style="min-width: 1px;" class="tabs-arrowscrollbox">
          <children/>
        </xul:arrowscrollbox>
        <xul:hbox class="tab-drop-indicator-bar" mousethrough="always">
          <xul:hbox class="tab-drop-indicator" mousethrough="always"/>
        </xul:hbox>
      </xul:stack>
    </content>

    <implementation>
      <field name="_tabbox">
        (function(){
          // find the closest parent node that is a tabbox
          // in an inline function because this is an expression
          for (var parent = this.parentNode; parent; parent = parent.parentNode) {
            if ("handleCtrlTab" in parent) {
              return parent;
            }
          }
          return null;
        }).call(this)
      </field>
      
      <field name="_arrowscrollbox">
        document.getAnonymousElementByAttribute(this, "anonid", "arrowscrollbox")
      </field>

      <property name="selectedIndex">
        <getter>
        <![CDATA[
          const tabs = this.childNodes;
          for (var i = 0; i < tabs.length; i++) {
            if (tabs[i].selected)
              return i;
          }
          return -1;
        ]]>
        </getter>
        
        <setter>
        <![CDATA[
          var tab = this.getItemAtIndex(val);
          if (tab) {
            var alreadySelected = tab.selected;

            Array.forEach(this.childNodes, function (aTab) {
              if (aTab.selected && aTab != tab)
                aTab._selected = false;
            });
            tab._selected = true;

            this.setAttribute("value", tab.value);

            for (var parent = this.parentNode; parent; parent = parent.parentNode) {
              if (parent.localName == 'tabbox') {
                parent.setAttribute("selectedIndex", val);
                break;
              }
            }
            
            var tabpanels = this._panels;
            // This will cause an onselect event to fire for the tabpanel element.
            if (tabpanels) {
              // find an id 
              var linkedPanelId = tab.linkedPanel;
              var linkedPanel = linkedPanelId ? document.getElementById(linkedPanelId) : null;
              if (linkedPanel)
                tabpanels.selectedPanel = linkedPanel;
              else {
                tabpanels.selectedIndex = this._panelIndex[val];
              }
            }

            if (!alreadySelected) {
              // Fire an onselect event for the tabs element.
              var event = document.createEvent('Events');
              event.initEvent('select', true, true);
              this.dispatchEvent(event);
            }
          }
          return val;
        ]]>
        </setter>
      </property>
      
      <field name="__panels">
        (function(){
          for (var parent = this.parentNode; parent; parent = parent.parentNode) {
            if (parent.localName == 'tabbox') {
              return parent.tabpanels;
            }
          }
          return null;
        }).call(this);
      </field>
      <property name="_panels">
        <getter>
        <![CDATA[
          return this.__panels;
        ]]>
        </getter>
      </property>

      <!-- array of tab index to panel index mappings -->
      <field name="__panelIndex">[]</field>
      <property name="_panelIndex">
        <getter>
        <![CDATA[
          for (var i = this.__panelIndex.length; i < this.childNodes.length; ++i) {
            this.__panelIndex.push(i);
          }
          return this.__panelIndex;
        ]]>
        </getter>
      </property>
      
      <!-- public mutators -->
      <method name="moveTabTo">
        <parameter name="aTab"/>
        <parameter name="aIndex"/>
        <body>
        <![CDATA[
          if (!aTab) {
            throw new Components.Exception("no tab given",
                                           Components.results.NS_ERROR_INVALID_ARG);
          }
          var oldPosition = this.getIndexOfItem(aTab);
          if (oldPosition < 0) {
            // umm, the given tab isn't a child!?
            throw new Components.Exception("tab not found",
                                           Components.results.NS_ERROR_INVALID_ARG);
          }
          
          // fix up the panel indicies
          var oldPanelIndex = this._panelIndex[oldPosition];
          this._panelIndex.splice(oldPosition, 1);
          this._panelIndex.splice(aIndex, 0, oldPanelIndex);
          
          var oldSelectedItem = this.selectedItem;

          aIndex = aIndex < oldPosition ? aIndex: aIndex+1;
          this.selectedItem._selected = false;
          // use .item() instead of [] because dragging to the end of the strip goes out of
          // bounds: .item() returns null (so it acts like appendChild), but [] throws
          this.insertBefore(aTab, this.childNodes.item(aIndex));

          var i;
          for (i = 0; i < this.childNodes.length; i++) {
            this.childNodes[i]._selected = false;
          }
          
          if (oldSelectedItem) {
            oldSelectedItem._selected = true;
          }
          this._arrowscrollbox.scrollBoxObject.ensureElementIsVisible(this.selectedItem);

          var evt = document.createEvent("UIEvents");
          evt.initUIEvent("TabMove", true, false, window, oldPosition);
          aTab.dispatchEvent(evt);

          return aTab;
        ]]>
        </body>
      </method>


      <!-- Drag and drop observer API -->
      <method name="onDragStart">
        <parameter name="aEvent"/>
        <parameter name="aXferData"/>
        <parameter name="aDragAction"/>
        <body>
        <![CDATA[
          if (aEvent.target.localName == "tab" &&
              aEvent.originalTarget.localName != "toolbarbutton") {
            aXferData.data = new TransferData();
            if ("getTransferData" in aEvent.target) {
              // the tab has its own transfer data implementation
              aEvent.target.getTransferData(aEvent, aXferData, aDragAction);
            } else {
              aXferData.data.addDataForFlavour("text/unicode", aEvent.target.label);
            }
          }
        ]]>
        </body>
      </method>

      <method name="canDrop">
        <parameter name="aEvent"/>
        <parameter name="aDragSession"/>
        <body>
          <![CDATA[
            if (aDragSession.sourceNode &&
                aDragSession.sourceNode.parentNode == this)
            {
              // dragging from another tab in the same tabstrip
              var boxObject = aDragSession.sourceNode.boxObject;
              if (aEvent.screenX < boxObject.screenX ||
                  aEvent.screenX > (boxObject.screenX + boxObject.width))
                return true;
            }
            return false;
          ]]>
        </body>
      </method>

      <field name="_dragTime">0</field>
      <field name="_dragOverDelay">350</field>
      <method name="onDragOver">
        <parameter name="aEvent"/>
        <parameter name="aFlavour"/>
        <parameter name="aDragSession"/>
        <body>
          <![CDATA[
            if (aDragSession.sourceNode) {
              var scrollbox = this._arrowscrollbox;

              // autoscroll the tab strip if we drag over the scroll
              // buttons, even if we aren't dragging a tab, but then
              // return to avoid drawing the drop indicator
              var pixelsToScroll = 0;

              var targetAnonid = aEvent.originalTarget.getAttribute("anonid");
              if (targetAnonid == "scrollbutton-up") {
                pixelsToScroll = scrollbox.scrollIncrement * -1;
                scrollbox.scrollByPixels(pixelsToScroll);
              }
              else if (targetAnonid == "scrollbutton-down" || 
                       (targetAnonid == "alltabs-button" && 
                        scrollbox.getAttribute("overflow") == "true")) {
                pixelsToScroll = scrollbox.scrollIncrement;
                scrollbox.scrollByPixels(pixelsToScroll);
              }

              var isTabDrag = (aDragSession.sourceNode.parentNode == this);
              if (!isTabDrag && aEvent.target.localName == "tab") {
                if (!this._dragTime) 
                  this._dragTime = Date.now();
                if (Date.now() >= this._dragTime + this._dragOverDelay)
                  this.selectedItem = aEvent.target;
                return;
              }

              var newIndex = this._getNewIndex(aEvent);

              var ib = document.getAnonymousElementByAttribute(this, "class", "tab-drop-indicator-bar");;
              var ind = ib.firstChild;
              ib.setAttribute('dragging',
                 aDragSession.canDrop ? 'true' : 'false');

              var tabStripBoxObject = this._arrowscrollbox.scrollBoxObject;
              var halfIndWidth = Math.floor((ind.boxObject.width + 1) / 2);
              if (window.getComputedStyle(this.parentNode, null)
                        .direction == "ltr") {
                var newMarginLeft;
                var minMarginLeft = tabStripBoxObject.x - halfIndWidth -
                                    ib.boxObject.x;
                // make sure we don't place the tab drop indicator past the
                // edge, or the containing box will flex and stretch
                // the tab drop indicator bar, which will flex the url bar.  
                // XXX todo
                // just use first value if you can figure out how to get
                // the tab drop indicator to crop instead of flex and stretch
                // the tab drop indicator bar.
                var maxMarginLeft = Math.min(
                  (minMarginLeft + tabStripBoxObject.width), 
                  (ib.boxObject.x + ib.boxObject.width - ind.boxObject.width));

                // if we are scrolling, put the drop indicator at the edge
                // so that it doesn't jump while scrolling
                if (pixelsToScroll > 0)
                  newMarginLeft = maxMarginLeft;
                else if (pixelsToScroll < 0)
                  newMarginLeft = minMarginLeft;
                else {
                  if (newIndex == this.childNodes.length) {
                      newMarginLeft = this.childNodes[newIndex-1].boxObject.screenX +
                                      this.childNodes[newIndex-1].boxObject.width - 
                                      this.boxObject.screenX - halfIndWidth;
                  } else {
                      newMarginLeft = this.childNodes[newIndex].boxObject.screenX - 
                                      this.boxObject.screenX - halfIndWidth;
                  }

                  // ensure we never place the drop indicator beyond
                  // our limits
                  if (newMarginLeft < minMarginLeft)
                    newMarginLeft = minMarginLeft;
                  else if (newMarginLeft > maxMarginLeft)
                    newMarginLeft = maxMarginLeft;
                }
                ind.style.marginLeft = newMarginLeft + 'px';
              } else {
                var newMarginRight;
                var minMarginRight = tabStripBoxObject.x - halfIndWidth -
                                     ib.boxObject.x;
                // make sure we don't place the tab drop indicator past the
                // edge, or the containing box will flex and stretch
                // the tab drop indicator bar, which will flex the url bar.  
                // XXX todo
                // just use first value if you can figure out how to get
                // the tab drop indicator to crop instead of flex and stretch
                // the tab drop indicator bar.
                var maxMarginRight = Math.min(
                  (minMarginRight + tabStripBoxObject.width), 
                  (ib.boxObject.x + ib.boxObject.width - ind.boxObject.width));

                // if we are scrolling, put the drop indicator at the edge
                // so that it doesn't jump while scrolling
                if (pixelsToScroll > 0)
                  newMarginRight = maxMarginRight;
                else if (pixelsToScroll < 0)
                  newMarginRight = minMarginRight;
                else {
                if (newIndex == this.childNodes.length) {
                    newMarginRight = this.boxObject.width + 
                                     this.boxObject.screenX -
                                     this.childNodes[newIndex-1].boxObject.screenX -
                                     halfIndWidth;
                } else {
                    newMarginRight = this.boxObject.width + 
                                     this.boxObject.screenX -
                                     this.childNodes[newIndex].boxObject.screenX -
                                     this.childNodes[newIndex].boxObject.width -
                                     halfIndWidth;
                  }

                  // ensure we never place the drop indicator beyond
                  // our limits
                  if (newMarginRight < minMarginRight)
                    newMarginRight = minMarginRight;
                  else if (newMarginRight > maxMarginRight)
                    newMarginRight = maxMarginRight;
                }
                ind.style.marginRight = newMarginRight + 'px';
              }
            }
          ]]>
        </body>
      </method>

      <method name="_getNewIndex">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            var i;
            if (window.getComputedStyle(this.parentNode, null).direction == "ltr") {
              for (i = 0; i < this.childNodes.length; i++)
                if (aEvent.screenX < this.childNodes[i].boxObject.screenX + this.childNodes[i].boxObject.width / 2) 
                  return i;
            } else {
               for (i = 0; i < this.childNodes.length; i++)
                if (aEvent.screenX > this.childNodes[i].boxObject.screenX + this.childNodes[i].boxObject.width / 2)
                  return i;
            }

            return this.childNodes.length;
          ]]>
        </body>
      </method>

      <method name="onDrop">
        <parameter name="aEvent"/>
        <parameter name="aXferData"/>
        <parameter name="aDragSession"/>
        <body>
          <![CDATA[
            if (aDragSession.sourceNode && aDragSession.sourceNode.parentNode == this) {
              var newIndex = this._getNewIndex(aEvent);
              var oldIndex = 0;
              for (; oldIndex < this.childNodes.length; ++oldIndex) {
                if (this.childNodes[oldIndex] == aDragSession.sourceNode)
                  break;
              }

              if (newIndex > oldIndex)
                newIndex--;
              if (newIndex != oldIndex)
                this.moveTabTo(this.childNodes[oldIndex], newIndex);
            }
          ]]>
        </body>
      </method>

      <method name="onDragExit">
        <parameter name="aEvent"/>
        <parameter name="aDragSession"/>
        <body>
          <![CDATA[
            this.mDragTime = 0;

            if (aDragSession.sourceNode &&
                aDragSession.sourceNode.parentNode == this &&
                aDragSession.canDrop) {
              var target = aEvent.relatedTarget;
              while (target && target != this)
                target = target.parentNode;
              if (target)
                return;
            }
            var bar = document.getAnonymousElementByAttribute(this, "class", "tab-drop-indicator-bar");
            bar.setAttribute('dragging','false');
          ]]>
        </body>
      </method>

      <method name="getSupportedFlavours">
        <body>
        <![CDATA[
          var flavourSet = new FlavourSet();
          flavourSet.appendFlavour("text/unicode");
          return flavourSet;
        ]]>
        </body>
      </method>

    </implementation>
  </binding>

</bindings>

